<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>作息表</title>
    <url>/2020/06/17/%E4%BD%9C%E6%81%AF%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="作息表"><a href="#作息表" class="headerlink" title="作息表"></a>作息表</h1><table>
<thead>
<tr>
<th>时间</th>
<th>任务</th>
</tr>
</thead>
<tbody><tr>
<td>6：30</td>
<td>起床</td>
</tr>
<tr>
<td>7：00 — 8：00</td>
<td>跑步 + 听音单词120 + 发音练习（1篇）</td>
</tr>
<tr>
<td>8：10 — 10：00</td>
<td>线性代数（奇数）看句句真研（偶数）周日除外</td>
</tr>
<tr>
<td>10：10 — 12：00</td>
<td>概率论（奇数）看英语写作（偶数）周日除外</td>
</tr>
<tr>
<td>12：10 — 13：00</td>
<td>吃午饭 + 整理实习笔记</td>
</tr>
<tr>
<td>13：10 — 14：00</td>
<td>午休</td>
</tr>
<tr>
<td>14：10 — 16：00</td>
<td>看视频学习高数</td>
</tr>
<tr>
<td>16：10 — 18：00</td>
<td>看视频学习高数 or 做高数题</td>
</tr>
<tr>
<td>18：10 — 19：00</td>
<td>吃饭 + 可以选择整理学习笔记</td>
</tr>
<tr>
<td>19：10 — 20：20</td>
<td>晚上走路 + 新背30以上单词 + 读文章（可选）</td>
</tr>
<tr>
<td>20：30 — 21：50</td>
<td>看视频学习高数</td>
</tr>
<tr>
<td>22：00 — 23：00</td>
<td>可以自己安排，写一会笔记博客 or leetcode or 视频</td>
</tr>
<tr>
<td>23：30</td>
<td>睡觉</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>LRU和LFU算法</title>
    <url>/2020/06/08/LRU%E5%92%8CLFU%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="LRU和LFU算法解析"><a href="#LRU和LFU算法解析" class="headerlink" title="LRU和LFU算法解析"></a>LRU和LFU算法解析</h1><h2 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h2><h3 id="LRU概念"><a href="#LRU概念" class="headerlink" title="LRU概念"></a>LRU概念</h3><p>LRU（The Least Recently Used，最近最少未使用）是一种常见内存管理算法，最早应用于Linux操作系统，在Redis中也有广泛使用的。</p>
<p>LRU算法有这样一种假设：<strong>如果某个数据长期不被使用，在未来被用到的几率也不大；因此缓存容量达到上限时，应在写入新数据之前删除最久未使用的数据值</strong>，从而为新数据腾出空间。</p>
<h3 id="LRU算法实现"><a href="#LRU算法实现" class="headerlink" title="LRU算法实现"></a>LRU算法实现</h3><h4 id="LRU算法描述"><a href="#LRU算法描述" class="headerlink" title="LRU算法描述"></a>LRU算法描述</h4><p>需要设计一种数据结构，并且提供以下接口：</p>
<ul>
<li>构造函数，确定初始容量大小</li>
<li><code>get(key)</code>：如果关键字key存于缓存中，则获取其对应的值；否则返回-1</li>
<li><code>put(key, val)</code>：<ul>
<li>如果关键字key已经存在，则更改其对应的值为<code>val</code>；</li>
<li>如果关键字不存在，则插入（key,val）</li>
<li>当缓存容量达到上限时，最久没有访问的数据应该被置换。</li>
</ul>
</li>
</ul>
<h4 id="LRU算法图示"><a href="#LRU算法图示" class="headerlink" title="LRU算法图示"></a>LRU算法图示</h4><p>我们可以使用<strong>双向链表</strong>+<strong>哈希表</strong>来模拟实现LRU算法：</p>
<ul>
<li>哈希表用来快速查找某个key是否存于缓存中</li>
<li>链表用来表示使用数据项的时间先后次序</li>
</ul>
<p><strong>LRU存储图示</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/LRU_Store.png" alt="LRU_Store" title="">
                </div>
                <div class="image-caption">LRU_Store</div>
            </figure>


<p>当LRU的容量未到达上限时，对某个数据进行访问（包括添加，读取，修改），则只需要在链表头部插入新节点即可。</p>
<p>当LRU的容量到达上限时，需要添加某个数据，则需要移除链表最末端的键值（最久未使用），然后头插新节点。</p>
<p><strong>容量未满，插入新值003</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/LRU_Insert1.png" alt="容量未满，插入新值" title="">
                </div>
                <div class="image-caption">容量未满，插入新值</div>
            </figure>



<p><strong>容量上限，插入新值004</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/LRU_Insert2.png" alt="容量上限，插入新值" title="">
                </div>
                <div class="image-caption">容量上限，插入新值</div>
            </figure>



<p><strong>访问数据003</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/LRU_Visit.png" alt="访问数据003" title="">
                </div>
                <div class="image-caption">访问数据003</div>
            </figure>



<h4 id="LRU-C-代码"><a href="#LRU-C-代码" class="headerlink" title="LRU C++代码"></a>LRU C++代码</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 键值节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> key;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        Node(<span class="keyword">int</span> k, <span class="keyword">int</span> v):key(k), val(v)&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">using</span> node_iter = <span class="built_in">list</span>&lt;Node&gt;::iterator;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    LRUCache(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;cap = capacity;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> it = mp.find(key);</span><br><span class="line">        <span class="keyword">if</span>(it == mp.end()) <span class="keyword">return</span> <span class="number">-1</span>;       <span class="comment">// 节点不存在</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> val = it-&gt;second-&gt;val;</span><br><span class="line">            l.erase(it-&gt;second);            <span class="comment">// list通过迭代器删除节点</span></span><br><span class="line">            l.push_front(Node(key, val));   <span class="comment">// 头插最近访问节点</span></span><br><span class="line">            mp[key] = l.begin();            <span class="comment">// 更新哈希表中 key对应的 list迭代器</span></span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> it = mp.find(key);</span><br><span class="line">        <span class="keyword">if</span>(it == mp.end())&#123;</span><br><span class="line">            <span class="keyword">if</span>(cap == mp.size())&#123;</span><br><span class="line">                <span class="comment">// 容量达到上限且需要添加, 移除最久未使用的</span></span><br><span class="line">                mp.erase(l.back().key); l.pop_back(); </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 容量达到上限，则可以直接添加</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// key存于缓存，需要修改</span></span><br><span class="line">            l.erase(it-&gt;second);</span><br><span class="line">        &#125;</span><br><span class="line">        l.push_front(Node(key, value));     <span class="comment">// 头插最近访问节点</span></span><br><span class="line">        mp[key] = l.begin();                <span class="comment">// 更新哈希表中 key对应的 list迭代器</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, node_iter&gt; mp;       <span class="comment">// 哈希表</span></span><br><span class="line">    <span class="built_in">list</span>&lt;Node&gt; l;                           <span class="comment">// 双向链表</span></span><br><span class="line">    <span class="keyword">int</span> cap;                                <span class="comment">// 缓存容量上限</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> capacity = <span class="number">3</span>;</span><br><span class="line">    <span class="function">LRUCache <span class="title">cache</span><span class="params">(capacity)</span></span>;</span><br><span class="line"></span><br><span class="line">    cache.put(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    cache.put(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">1</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;		<span class="comment">// 返回 1</span></span><br><span class="line">    cache.put(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">2</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;		<span class="comment">// 返回 2 </span></span><br><span class="line">    cache.put(<span class="number">4</span>, <span class="number">4</span>);                     		<span class="comment">// 该操作会使得关键字 1 作废</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">1</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;		<span class="comment">// 返回 -1 (未找到)</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">3</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;		<span class="comment">// 返回 3</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">4</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;		<span class="comment">// 返回  4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    out:</span></span><br><span class="line"><span class="comment">    1 2 -1 3 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<h2 id="LFU"><a href="#LFU" class="headerlink" title="LFU"></a>LFU</h2><h3 id="LFU概念"><a href="#LFU概念" class="headerlink" title="LFU概念"></a>LFU概念</h3><p>LFU（The Least Frequently Used，最不经常使用）也是一种常见的缓存算法。</p>
<p>和LRU类似，LFU同样有这样的假设：<strong>如果一个数据在最近一段时间很少被访问到，那么可以认为在将来它被访问的可能性也很小。因此，当空间满时，最小频率访问的数据最先被淘汰；当存在两个或者更多个键具有相同的使用频次时，应该淘汰最久未使用的数据。（类比LRU）</strong></p>
<h3 id="LFU算法实现"><a href="#LFU算法实现" class="headerlink" title="LFU算法实现"></a>LFU算法实现</h3><h4 id="LFU算法描述"><a href="#LFU算法描述" class="headerlink" title="LFU算法描述"></a>LFU算法描述</h4><p>需要设计一种数据结构，并且提供一下接口：</p>
<ul>
<li>构造函数，确定初始缓存容量</li>
<li><code>get(key)</code> ：如果键存在于缓存中，则获取键的值，否则返回 -1。</li>
<li><code>put(key, value)</code> - 如果键已存在，则变更其值；如果键不存在，请插入键值对。当缓存达到其容量时，则应该在插入新项之前，移除最不经常使用的项。<strong>当存在两个或者更多个键具有相同的使用频次时，应该移除最久未使用的键</strong>。</li>
</ul>
<h4 id="LFU算法图示"><a href="#LFU算法图示" class="headerlink" title="LFU算法图示"></a>LFU算法图示</h4><p>我们可以使用<strong>双哈希表 + 双链表</strong>来模拟实现LFU算法：</p>
<ul>
<li><code>key_table</code>：用来快速查找某个key是否存于缓存中</li>
<li><code>freq_table</code>：以使用频次为键，存储相同使用频次的节点</li>
</ul>
<p><strong>LFU存储图示</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200610134226961.png" alt="LFU存储图示" title="">
                </div>
                <div class="image-caption">LFU存储图示</div>
            </figure>



<p>当LFU的容量未到达上限时，对某个数据进行访问（包括添加，读取，修改），其使用频次加一，则只需要在对应链表头部插入新节点即可。</p>
<p>当LFU的容量到达上限时，需要添加某个数据，则需要移除当前使用频次最低的链表最末端的键值（最久未使用），然后在频次为1的链表头插新节点。</p>
<p><strong>容量未满，插入新值005</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200610134635589.png" alt="容量未满，插入新值" title="">
                </div>
                <div class="image-caption">容量未满，插入新值</div>
            </figure>



<p><strong>访问数据001</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200610135240758.png" alt="访问数据001" title="">
                </div>
                <div class="image-caption">访问数据001</div>
            </figure>



<p><strong>容量上限，插入新值006</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200610135906353.png" alt="容量上限，插入新值" title="">
                </div>
                <div class="image-caption">容量上限，插入新值</div>
            </figure>

<h4 id="LFU-C-代码"><a href="#LFU-C-代码" class="headerlink" title="LFU C++代码"></a>LFU C++代码</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LFUCache</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 键值节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> key, val, freq;</span><br><span class="line">        Node(<span class="keyword">int</span> _key,<span class="keyword">int</span> _val,<span class="keyword">int</span> _freq): key(_key), val(_val), freq(_freq)&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    LFUCache(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;cap = capacity;</span><br><span class="line">        min_freq = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!cap) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">auto</span> it = key_table.find(key);			 </span><br><span class="line">        <span class="comment">// 节点不存在</span></span><br><span class="line">        <span class="keyword">if</span>(it == key_table.end())&#123;					</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">auto</span> key_iter = it-&gt;second;</span><br><span class="line">            Node* node = *key_iter;</span><br><span class="line">            <span class="keyword">int</span> val = node-&gt;val, freq = node-&gt;freq;</span><br><span class="line">            freq_table[freq].erase(key_iter);</span><br><span class="line">            <span class="comment">// 如果 freq 对应的链表为空，则移除</span></span><br><span class="line">            <span class="keyword">if</span>(freq_table[freq].size() == <span class="number">0</span>)&#123;		</span><br><span class="line">                freq_table.erase(freq);</span><br><span class="line">                <span class="comment">// 更新最小使用频次，为当前节点使用频次 ferq + 1</span></span><br><span class="line">                <span class="keyword">if</span>(min_freq == freq) min_freq = freq + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node-&gt;freq += <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// freq + 1 频次对应链表进行头插</span></span><br><span class="line">            freq_table[freq + <span class="number">1</span>].push_front(node);</span><br><span class="line">            <span class="comment">// 更新 key 对应的list迭代器</span></span><br><span class="line">            key_table[key] = freq_table[freq + <span class="number">1</span>].begin();</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!cap) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">auto</span> it = key_table.find(key);</span><br><span class="line">        <span class="keyword">if</span>(it != key_table.end())&#123;</span><br><span class="line">            <span class="comment">// key 存于缓存中</span></span><br><span class="line">            <span class="keyword">auto</span> key_iter = it-&gt;second;</span><br><span class="line">            <span class="keyword">auto</span> node = *key_iter;</span><br><span class="line">            <span class="keyword">int</span> freq = node-&gt;freq;</span><br><span class="line">            freq_table[freq].erase(key_iter);</span><br><span class="line">            <span class="keyword">if</span>(freq_table[freq].size() == <span class="number">0</span>)&#123;</span><br><span class="line">                freq_table.erase(freq);</span><br><span class="line">                <span class="comment">// 更新 min_freq</span></span><br><span class="line">                <span class="keyword">if</span>(min_freq == freq)min_freq = freq + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 修改值, 更新freq</span></span><br><span class="line">            node-&gt;freq += <span class="number">1</span>; node-&gt;val = value;</span><br><span class="line">            <span class="comment">// freq + 1 频次链表进行头插</span></span><br><span class="line">            freq_table[freq + <span class="number">1</span>].push_front(node);</span><br><span class="line">            <span class="comment">// 更新 key 对应的list迭代器</span></span><br><span class="line">            key_table[key] = freq_table[freq + <span class="number">1</span>].begin();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 容量达到上限</span></span><br><span class="line">            <span class="keyword">if</span>(key_table.size() == cap)&#123;</span><br><span class="line">                <span class="comment">// 获取使用频次最小且最久未使用的节点</span></span><br><span class="line">                Node* del_node = freq_table[min_freq].back();</span><br><span class="line">                freq_table[min_freq].pop_back();</span><br><span class="line">                <span class="keyword">if</span>(freq_table[min_freq].size() == <span class="number">0</span>)&#123;</span><br><span class="line">                    freq_table.erase(min_freq);</span><br><span class="line">                &#125;</span><br><span class="line">                key_table.erase(del_node-&gt;key);</span><br><span class="line">                <span class="keyword">delete</span> del_node;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 头插新节点</span></span><br><span class="line">            freq_table[<span class="number">1</span>].push_front(<span class="keyword">new</span> Node(key, value, <span class="number">1</span>));</span><br><span class="line">            key_table[key] = freq_table[<span class="number">1</span>].begin();</span><br><span class="line">            <span class="comment">// 当前最小使用频次为1</span></span><br><span class="line">            min_freq = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 缓存上限</span></span><br><span class="line">    <span class="keyword">int</span> cap;</span><br><span class="line">    <span class="comment">// 当前最低使用频次</span></span><br><span class="line">    <span class="keyword">int</span> min_freq;</span><br><span class="line">    <span class="comment">// 根据key建立哈希表</span></span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">list</span>&lt;Node*&gt;::iterator&gt; key_table;</span><br><span class="line">    <span class="comment">// 按照使用频次建立哈希表</span></span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">list</span>&lt;Node*&gt;&gt; freq_table;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="代码测试-1"><a href="#代码测试-1" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> capacity = <span class="number">2</span>;</span><br><span class="line"> 	<span class="function">LFUCache <span class="title">cache</span><span class="params">(capacity)</span></span>;</span><br><span class="line">    </span><br><span class="line">    cache.put(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    cache.put(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">1</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;       <span class="comment">// 返回 1</span></span><br><span class="line">	cache.put(<span class="number">3</span>, <span class="number">3</span>);    						  <span class="comment">// 此操作会使关键字 2 作废</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">2</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;       <span class="comment">// 返回 -1 (未找到key 2)</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">3</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;       <span class="comment">// 返回 3</span></span><br><span class="line">	cache.put(<span class="number">4</span>, <span class="number">4</span>);    						  <span class="comment">// 此操作会使关键字 1 作废</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">1</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;       <span class="comment">// 返回 -1 (未找到 key 1)</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">3</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;       <span class="comment">// 返回 3</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">4</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;       <span class="comment">// 返回 4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	out:</span></span><br><span class="line"><span class="comment">	1 -1 3 -1 3 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>LRU和LFU的算法暂时就介绍到这里了，作者水平有限，可能会存在疏漏之处，欢迎指正。</p>
<p>关于其他的缓存算法，例如<strong>FIFO</strong>，<strong>ARC</strong>，<strong>MRU</strong>等，我们会在后续的文章继续探讨。</p>
<p>谢谢~</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>缓存算法</tag>
      </tags>
  </entry>
  <entry>
    <title>圆周率Pi的求解</title>
    <url>/2020/06/11/%E5%9C%86%E5%91%A8%E7%8E%87Pi%E7%9A%84%E6%B1%82%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="圆周率Pi的求解"><a href="#圆周率Pi的求解" class="headerlink" title="圆周率Pi的求解"></a>圆周率Pi的求解</h1><blockquote>
<p>字节跳动面试时，算法部分给我丢了这个开胃小菜；当时使用的是蒙特卡洛模拟，效果还不错。</p>
</blockquote>
<h2 id="1-蒙特卡洛模拟"><a href="#1-蒙特卡洛模拟" class="headerlink" title="1. 蒙特卡洛模拟"></a>1. 蒙特卡洛模拟</h2><p>蒙特卡洛模拟用于模拟一个随机过程中不同结果可能出现的概率。那怎么使用蒙特卡洛模拟来求解圆周率Pi呢？</p>
<h3 id="1-1-思想"><a href="#1-1-思想" class="headerlink" title="1.1 思想"></a>1.1 思想</h3><p>蒙特卡洛模拟的思想是很简单的，比如：<strong>在以[0,0]，[1,1]为顶点的正方形内进行随机投点，如果该随机点到圆心[0,0]的距离小于1，则说明该点位于以[0,0]为圆心，1为半径的1/4圆内；当试验次数达到无穷时，位于圆内点的数目和总投点数目之比无限接近圆和正方形面积之比，即pi/4。</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200611192448117.png" alt="蒙特卡洛模拟" title="">
                </div>
                <div class="image-caption">蒙特卡洛模拟</div>
            </figure>

<h3 id="1-2-求解代码"><a href="#1-2-求解代码" class="headerlink" title="1.2 求解代码"></a>1.2 求解代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">float</span> <span class="title">calcPi</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> numOfPoints)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 计算随机点到原点的距离平方</span></span><br><span class="line">        <span class="keyword">auto</span> getDist = [](<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&amp; point)&#123;</span><br><span class="line">            <span class="keyword">return</span> point[<span class="number">0</span>] * point[<span class="number">0</span>] + point[<span class="number">1</span>] * point[<span class="number">1</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">int</span> legal_num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;= numOfPoints; ++i)&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; point = getNextRandom();</span><br><span class="line">            <span class="keyword">if</span>(getDist(point) &lt;= <span class="number">1.0f</span>)&#123;</span><br><span class="line">				++legal_num;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 面积之比： Pi/4 ≈ legal_num/numOfPoints</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">4.0</span>*(<span class="keyword">float</span>)legal_num/(<span class="keyword">float</span>)numOfPoints;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; <span class="title">getNextRandom</span><span class="params">()</span></span>&#123;</span><br><span class="line">    	<span class="keyword">int</span> x = rand() % <span class="number">100</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> y = rand() % <span class="number">100</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;x/<span class="number">100.0f</span>, y/<span class="number">100.0f</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    Solution s;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> numOfPoints = <span class="number">10</span>* <span class="number">10000</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; s.calcPi(numOfPoints) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	out:</span></span><br><span class="line"><span class="comment">	3.11112</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>从这里的输出结果可以看到，使用蒙特卡洛求解的结果精度明显不够，不过思想简单算法实现容易。</p>
<blockquote>
<p>我当时面试时，输出的结果差不多就是这个样子；面试官看后说，有没有办法使得结果更加精确一些呢？</p>
<p>我说：可以增大样本点的个数；或者实验多组数据求取平均值；但是感觉这个模拟方法不太好。</p>
<p>面试官又问：还有优化的方法么？这个随机数的生成可以优化一下么？</p>
<p>我想：随机数的生成？什么意思？难道是在说随机数的底层生成算法上解决？虽然有接触过线性同余法，但是这水平更不不够呀。难道是说，想要保证随机数不重复？使用哈希？没想明白，就说不会了。</p>
<p>有想法的朋友可以告知我一下哈~</p>
</blockquote>
<h2 id="2-级数求解"><a href="#2-级数求解" class="headerlink" title="2. 级数求解"></a>2. 级数求解</h2><p>在高中或者在大学数学中，我们可能会看到这样一个公式：</p>
<p><code>Pi/4 = 1 - 1/3 + 1/5 - 1/7 + 1/9 - 1/11 + 1/13 ...</code></p>
<p>其实这是一个<strong>交错级数</strong>（以0为极限，必收敛），是数学家莱布尼茨发现的计算圆周率Pi的公式，它的通项表达为如下：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200611192708214.png" alt="莱布尼茨公式" title="">
                </div>
                <div class="image-caption">莱布尼茨公式</div>
            </figure>

<h3 id="2-1-代码"><a href="#2-1-代码" class="headerlink" title="2.1 代码"></a>2.1 代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">calcPi</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0.0</span>, symbol = <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;=n; ++i)&#123;</span><br><span class="line">            sum += symbol/(<span class="number">2</span> * i + <span class="number">1</span>);</span><br><span class="line">            symbol = -symbol;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span> * sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Solution s;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> n = <span class="number">10</span> * <span class="number">10000</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; s.calcPi(n) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	out:</span></span><br><span class="line"><span class="comment">	3.1416</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>从输出结果可以看出，使用莱布尼茨级数来计算Pi值精度更好，值得一提的是该算法的求解效率大大优于蒙特卡洛模拟。</p>
</blockquote>
<p>好了，关于圆周率Pi的求解方法暂时介绍到这里，大家有什么更好的方法，可以在下面畅所欲言~</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>蒙特卡洛算法</tag>
        <tag>级数</tag>
      </tags>
  </entry>
  <entry>
    <title>英语听力计划</title>
    <url>/2020/07/19/%E8%8B%B1%E8%AF%AD%E5%90%AC%E5%8A%9B%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<h1 id="英语听力计划"><a href="#英语听力计划" class="headerlink" title="英语听力计划"></a>英语听力计划</h1><h2 id="第一阶段—Peppa-Pig"><a href="#第一阶段—Peppa-Pig" class="headerlink" title="第一阶段—Peppa Pig"></a>第一阶段—Peppa Pig</h2><p>刚开始先计划培养语感，形成模块化听力，争取不再纠结一段听力中的某几个词，如果将一段句子分得过于零散，那么就会发生听的后面忘记前面的，只记住了几个单词，却没有形成模块化的记忆。</p>
<p>总共90个小视频，每个短视频大概五分钟左右，目前计划每天看3个，早中晚各一个。</p>
<table>
<thead>
<tr>
<th>时间段</th>
<th>任务</th>
</tr>
</thead>
<tbody><tr>
<td>8：00 — 8：10</td>
<td>Peppa Pig</td>
</tr>
<tr>
<td>12：50 — 13：00</td>
<td>Peppa Pig</td>
</tr>
<tr>
<td>23：30 — 23：40</td>
<td>Peppa Pig</td>
</tr>
</tbody></table>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200830210316287.png" alt="image-20200830210316287"></p>
]]></content>
      <tags>
        <tag>英语</tag>
      </tags>
  </entry>
  <entry>
    <title>讲讲堆内存和栈内存</title>
    <url>/2020/06/14/%E8%AE%B2%E8%AE%B2%E5%A0%86%E5%86%85%E5%AD%98%E5%92%8C%E6%A0%88%E5%86%85%E5%AD%98/</url>
    <content><![CDATA[<h1 id="讲讲堆内存和栈内存"><a href="#讲讲堆内存和栈内存" class="headerlink" title="讲讲堆内存和栈内存"></a>讲讲堆内存和栈内存</h1><blockquote>
<p>前段时间面试腾讯时候，面试官问了一个很基础的问题：请你说说堆内存和栈内存的区别？</p>
<p>我：基本就是那套模板，例如栈内存是由编译器自动分配和释放，其内存地址在编译期已确定的；主要用来存储局部变量，函数参数以及函数调用的地址等等；对于堆内存来说，其生命周期是由程序员决定的，即程序员手动申请释放，如果没有及时释放，就会造成内存泄漏，当程序结束时，会有操作系统回收未释放的内存。</p>
<p>说完之后，面试官没有立即反应，我以为他不太满意，又接着说了说堆栈的增长方向和内存大小等等…</p>
<p>不知道是我回答的不好还是面试官太高冷，没什么说辞…</p>
</blockquote>
<p>本文内容有参考百科，知乎，博客等优秀回答。</p>
<h2 id="1-从编程语言角度理解不同内存"><a href="#1-从编程语言角度理解不同内存" class="headerlink" title="1.  从编程语言角度理解不同内存"></a>1.  从编程语言角度理解不同内存</h2><p><strong>程序的内存分配：</strong></p>
<p>一个由C/C++编译的程序占用的内存分布：</p>
<ul>
<li><p>栈区（stack）：由编译器自动分配释放 ，存放函数的参数值，局部变量的值等</p>
</li>
<li><p>堆区（heap）：一般由程序员分配释放， 若程序员不释放，程序结束时可能由操作系统回收 </p>
</li>
<li><p>全局区（global）/ 静态区（static）：</p>
<ul>
<li>data区：已经初始化的全局变量、静态变量和常量</li>
<li>bss区：用来存放程序中未初始化的全局变量和静态变量；程序执行前BSS段会自动清0。</li>
<li>常量区：全局区中划分的一个小区域，里面存放的是常量，如const修饰的全局变量、字符串常量</li>
</ul>
</li>
<li><p>代码区（code）：存放函数体的二进制代码</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	@Time     : 2020/6/15 </span></span><br><span class="line"><span class="comment"> 	@Author   : BambooWine</span></span><br><span class="line"><span class="comment"> 	@Mail     : 2278816117@qq.com</span></span><br><span class="line"><span class="comment"> 	@Env	  : win10 + vs2017</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> g_a = <span class="number">10</span>;		<span class="comment">// 全局变量 data区</span></span><br><span class="line"><span class="keyword">int</span> g_b;	        <span class="comment">// 全局变量 bss区</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> s_a = <span class="number">10</span>;	<span class="comment">// 静态变量 data区</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;           <span class="comment">// 栈</span></span><br><span class="line">    <span class="keyword">char</span> s[] = <span class="string">"abc"</span>;	 <span class="comment">// 栈</span></span><br><span class="line">    <span class="keyword">char</span>* p1;            <span class="comment">// 栈</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> s_b = <span class="number">1</span>;	 <span class="comment">// 静态变量 data区</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* str = <span class="string">"123"</span>;	            <span class="comment">// "123"在常量区，str在栈区</span></span><br><span class="line">    p1 = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">10</span>);  <span class="comment">// 申请堆内存</span></span><br><span class="line">    <span class="built_in">strcpy</span>(p1, <span class="string">"123"</span>);   <span class="comment">// 123放在常量区，编译器可能会将它与p3所指向的"123456"优化成一个地方</span></span><br><span class="line">    <span class="built_in">free</span>(p1); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-从物理层角度理解堆栈内存"><a href="#2-从物理层角度理解堆栈内存" class="headerlink" title="2. 从物理层角度理解堆栈内存"></a>2. 从物理层角度理解堆栈内存</h2><blockquote>
<p>不知道大家有没有这样的想法，堆栈不就是内存的不同区，为什么访问速度会有差矣呢？</p>
<p>最近想到了这个问题，但奈何才疏学浅，只能在各种论坛搜索资料。</p>
</blockquote>
<ul>
<li>从硬件上来说，堆和栈最终都是内存条上的若干存储单元，理应并没有什么不同</li>
<li>但是很多CPU对压栈，出栈操作有硬件（指令）上的支持，所以在栈区分配/归还内存速度较快；尤其是函数内部的局部变量，可以轻易与函数调用/返回绑定</li>
<li>由于栈内存分配/回收的特殊机制，使得同一函数内部的”局部变量”总是分配在一段连续的内存空间上</li>
</ul>
<p><a href="https://blog.csdn.net/yxwb1253587469/article/details/50759604?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-3" target="_blank" rel="noopener">https://blog.csdn.net/yxwb1253587469/article/details/50759604?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-3</a></p>
<p><a href="https://www.cnblogs.com/jiudianren/p/5671992.html" target="_blank" rel="noopener">https://www.cnblogs.com/jiudianren/p/5671992.html</a></p>
]]></content>
      <categories>
        <category>计算机组成原理</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-indigo主题添加置顶功能</title>
    <url>/2020/06/17/hexo/hexo-indigo%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E7%BD%AE%E9%A1%B6%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h1 id="hexo-indigo主题添加置顶功能"><a href="#hexo-indigo主题添加置顶功能" class="headerlink" title="hexo-indigo主题添加置顶功能"></a>hexo-indigo主题添加置顶功能</h1><blockquote>
<p>参考文章：<a href="https://www.jianshu.com/p/42a4efcdf8d7" target="_blank" rel="noopener">解决Hexo博客文章置顶问题</a></p>
</blockquote>
<h2 id="1-自定义html排序功能"><a href="#1-自定义html排序功能" class="headerlink" title="1. 自定义html排序功能"></a>1. 自定义html排序功能</h2><p>原理：<strong>在Hexo生成首页HTML时，将top值高的文章排在前面，达到置顶功能</strong>。</p>
<p>修改Hexo文件夹下的<code>node_modules/hexo-generator-index/lib/generator.js</code>，在生成文章之前进行文章top值排序。</p>
<p>需添加的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">        <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>generator.js完整内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">  <span class="keyword">const</span> posts = locals.posts.sort(config.index_generator.order_by);</span><br><span class="line"></span><br><span class="line">	posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    	<span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">        	<span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></span><br><span class="line">        	<span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123;     <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面</span></span><br><span class="line">        	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">        	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</span><br><span class="line">  <span class="keyword">const</span> path = config.index_generator.path || <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> pagination(path, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</span><br><span class="line">    format: paginationDir + <span class="string">'/%d/'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p>修改完成后，只需要在front-matter中设置需要置顶文章的top值，将会根据top值大小来选择置顶顺序top值越大越靠前。需要注意的是，这个文件不是主题的一部分，也不是Git管理的，备份的时候比较容易忽略。</p>
<p><strong>使用实例：</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200617232808783.png" alt="使用实例" title="">
                </div>
                <div class="image-caption">使用实例</div>
            </figure>



<p><strong>只需要设置top值即可完成排序置顶操作，并且还可以根据不同top值，选择置顶文章的先后次序</strong></p>
<h2 id="2-添加置顶标签"><a href="#2-添加置顶标签" class="headerlink" title="2. 添加置顶标签"></a>2. 添加置顶标签</h2><p>参考文章的博主使用的是yelee主题，有自己的置顶标签，在indigo主题里，我们可以自己做。</p>
<ul>
<li><p>如果要在文章中添加置顶标签，则打开<code>themes\indigo\layout\_partial\post.ejs</code>文件，接着定位到<code>&lt;div class=&quot;post-meta&quot;&gt;</code> ，在它的下面添加这段代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加置顶标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">post.top</span> &gt;</span> 1)&#123; %&gt;</span><br><span class="line">	<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-thumb-tack"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">7D26CD</span>&gt;</span>置顶<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-divider"</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果要在博客主页的预览页面添加置顶标签，则打开<code>themes\indigo\layout\_partial\index_item.ejs</code>文件，接着定位到<code>&lt;div class=&quot;post-meta&quot;&gt;</code> ，在它的下面添加这段代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加置顶标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">post.top</span> &gt;</span> 1)&#123; %&gt;</span><br><span class="line">	<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-thumb-tack"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">7D26CD</span>&gt;</span>置顶<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-divider"</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果还想在其他页面添加，则打开对应的 ejs文件，添加上述代码即可</p>
</li>
</ul>
<p><strong>预览效果：</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200617232034478.png" alt="预览效果" title="">
                </div>
                <div class="image-caption">预览效果</div>
            </figure>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>next主题首页只显示摘要</title>
    <url>/2020/07/02/hexo/next%E4%B8%BB%E9%A2%98%E9%A6%96%E9%A1%B5%E5%8F%AA%E6%98%BE%E7%A4%BA%E6%91%98%E8%A6%81/</url>
    <content><![CDATA[<h1 id="next主题首页只显示摘要"><a href="#next主题首页只显示摘要" class="headerlink" title="next主题首页只显示摘要"></a>next主题首页只显示摘要</h1><blockquote>
<p>参考文章：</p>
<p><a href="https://blog.csdn.net/yueyue200830/article/details/104470646" target="_blank" rel="noopener">设置hexo首页只显示部分摘要（不显示全文）</a></p>
<p>本文针对Next<strong>新版</strong>主题，Next默认是会显示全文的，这样显然很不方便，因此需要一些方法去只显示前面一部分。</p>
</blockquote>
<h2 id="1-修改配置"><a href="#1-修改配置" class="headerlink" title="1. 修改配置"></a>1. 修改配置</h2><p>首先需要在Next主题的_config.yml中把设置打开：(默认安装时就打开了)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Automatically excerpt description <span class="keyword">in</span> homepage as preamble text.</span></span><br><span class="line">excerpt_description: true</span><br></pre></td></tr></table></figure>



<h2 id="2-方法一"><a href="#2-方法一" class="headerlink" title="2. 方法一"></a>2. 方法一</h2><p>在文章的<code>front-matter</code>中添加<code>description</code>，其中description中的内容就会被显示在首页上，其余一律不显示。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 让首页显示部分内容</span><br><span class="line">date: 2020-02-23 22:55:10</span><br><span class="line">description: 这是显示在首页的概述，正文内容均会被隐藏。</span><br><span class="line">---</span><br></pre></td></tr></table></figure>



<h2 id="3-方法二"><a href="#3-方法二" class="headerlink" title="3. 方法二"></a>3. 方法二</h2><p>在需要截断的地方加入：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--more--&gt;</span></span><br></pre></td></tr></table></figure>

<p>首页就会显示这条以上的所有内容，隐藏接下来的所有内容。</p>
<p><strong>两种方式各有利弊，大家可以按需要选择</strong></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-theme-indigo搭建Valine评论以及美化</title>
    <url>/2020/06/12/hexo/hexo-theme-indigo%E6%90%AD%E5%BB%BAValine%E8%AF%84%E8%AE%BA%E4%BB%A5%E5%8F%8A%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<h1 id="indigo主题搭建Valine评论以及美化"><a href="#indigo主题搭建Valine评论以及美化" class="headerlink" title="indigo主题搭建Valine评论以及美化"></a>indigo主题搭建Valine评论以及美化</h1><h2 id="1-indigo主题搭建Valine后台评论系统"><a href="#1-indigo主题搭建Valine后台评论系统" class="headerlink" title="1. indigo主题搭建Valine后台评论系统"></a>1. indigo主题搭建Valine后台评论系统</h2><p>Valine是基于Leancloud开发完成的，因此我们需要先注册一个Leadcloud的账号。</p>
<p><a href="https://www.leancloud.cn/" target="_blank" rel="noopener">Leadcloud官网，点我注册</a></p>
<ul>
<li>先注册；注册的时候需要身份验证和邮箱验证。</li>
<li>创建一个应用，名称可以随意起，不过我们还是规范些。</li>
<li>然后 <strong>进入应用-&gt;设置-&gt;应用key</strong>，获取你的 <strong>appid</strong> 和  <strong>appkey</strong>。</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200612102215624.png" alt="进入应用" title="">
                </div>
                <div class="image-caption">进入应用</div>
            </figure>



<ul>
<li>打开Indigo主题配置文件<code>_config.yml</code>，找到valine部分，在appId和appKey填写上次获取到的。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Valine Comment system. https://valine.js.org</span></span><br><span class="line">valine:</span><br><span class="line">  enable: true # 如果你想使用valine，请将值设置为 true</span><br><span class="line">  appId:  # your leancloud appId</span><br><span class="line">  appKey:  # your leancloud appKey</span><br><span class="line">  notify: false # Mail notify</span><br><span class="line">  verify: false # Verify code</span><br><span class="line">  avatar: mm # Gravatar style : mm/identicon/monsterid/wavatar/retro/hide</span><br><span class="line">  placeholder: 快来评论吧~ # Comment Box placeholder</span><br><span class="line">  guest_info: nick,mail,link # Comment header info</span><br><span class="line">  pageSize: 5 # comment list page size</span><br></pre></td></tr></table></figure>

<ul>
<li>请填写<code>应用&gt;设置&gt;安全设置</code>中的<code>Web 安全域名</code></li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200612151347788.png" alt="image-20200612151347788" title="">
                </div>
                <div class="image-caption">image-20200612151347788</div>
            </figure>

<ul>
<li>至此就完全配置完成了</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo s # 查看效果</span><br></pre></td></tr></table></figure>

<ul>
<li><p>看一眼效果（placeholder属性我改过了）</p>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200612104305556.png" alt="搭建效果"></p>
</li>
</ul>
<h2 id="2-Indigo主题Valine的简单美化"><a href="#2-Indigo主题Valine的简单美化" class="headerlink" title="2. Indigo主题Valine的简单美化"></a>2. Indigo主题Valine的简单美化</h2><blockquote>
<p>不得不说，作者不太会html和css，作为一个前端门外汉，只能简简单单地美化一下；所以在这里我只简单说一下美化的步骤，熟练的小伙伴可以自己尝试尝试。</p>
</blockquote>
<p>打开<code>\themes\indigo\layout\_partial\plugins\valine.ejs</code>所在文件，这就是评论区的配置。</p>
<p>关于基础的配置，不再赘述，大家可以参考<a href="https://valine.js.org/" target="_blank" rel="noopener">Valine官网</a>。</p>
<h3 id="2-1-Valine配置BiliBili表情包"><a href="#2-1-Valine配置BiliBili表情包" class="headerlink" title="2.1 Valine配置BiliBili表情包"></a>2.1 Valine配置BiliBili表情包</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200612140932816.png" alt="Valine配置BiliBili表情包" title="">
                </div>
                <div class="image-caption">Valine配置BiliBili表情包</div>
            </figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">new Valine(&#123;</span><br><span class="line">            el: '#comments',</span><br><span class="line">            notify: '&lt;%= theme.valine.notify %&gt;' == 'true',</span><br><span class="line">            verify: '&lt;%= theme.valine.verify %&gt;' == 'true',</span><br><span class="line">            appId: "&lt;%= theme.valine.appId %&gt;",</span><br><span class="line">            appKey: "&lt;%= theme.valine.appKey %&gt;",</span><br><span class="line">            avatar: "&lt;%= theme.valine.avatar %&gt;",</span><br><span class="line">            placeholder: "&lt;%= theme.valine.placeholder %&gt;",</span><br><span class="line">            guest_info: guest_info.length == 0 ? GUEST_INFO : guest_info,</span><br><span class="line">            pageSize: "&lt;%= theme.valine.pageSize %&gt;",</span><br><span class="line">            </span><br><span class="line">            // 设置Bilibili表情包地址</span><br><span class="line">            emojiCDN: '//i0.hdslb.com/bfs/emote/', </span><br><span class="line">            // 表情title和图片映射</span><br><span class="line">            emojiMaps: &#123;</span><br><span class="line">            "tv_doge": "6ea59c827c414b4a2955fe79e0f6fd3dcd515e24.png",</span><br><span class="line">            "tv_亲亲": "a8111ad55953ef5e3be3327ef94eb4a39d535d06.png",</span><br><span class="line">            "tv_偷笑": "bb690d4107620f1c15cff29509db529a73aee261.png",</span><br><span class="line">            "tv_再见": "180129b8ea851044ce71caf55cc8ce44bd4a4fc8.png",</span><br><span class="line">            "tv_冷漠": "b9cbc755c2b3ee43be07ca13de84e5b699a3f101.png",</span><br><span class="line">            "tv_发怒": "34ba3cd204d5b05fec70ce08fa9fa0dd612409ff.png",</span><br><span class="line">            "tv_发财": "34db290afd2963723c6eb3c4560667db7253a21a.png",</span><br><span class="line">            "tv_可爱": "9e55fd9b500ac4b96613539f1ce2f9499e314ed9.png",</span><br><span class="line">            "tv_吐血": "09dd16a7aa59b77baa1155d47484409624470c77.png",</span><br><span class="line">            "tv_呆": "fe1179ebaa191569b0d31cecafe7a2cd1c951c9d.png",</span><br><span class="line">            "tv_呕吐": "9f996894a39e282ccf5e66856af49483f81870f3.png",</span><br><span class="line">            "tv_困": "241ee304e44c0af029adceb294399391e4737ef2.png",</span><br><span class="line">            "tv_坏笑": "1f0b87f731a671079842116e0991c91c2c88645a.png",</span><br><span class="line">            "tv_大佬": "093c1e2c490161aca397afc45573c877cdead616.png",</span><br><span class="line">            "tv_大哭": "23269aeb35f99daee28dda129676f6e9ea87934f.png",</span><br><span class="line">            "tv_委屈": "d04dba7b5465779e9755d2ab6f0a897b9b33bb77.png",</span><br><span class="line">            "tv_害羞": "a37683fb5642fa3ddfc7f4e5525fd13e42a2bdb1.png",</span><br><span class="line">            "tv_尴尬": "7cfa62dafc59798a3d3fb262d421eeeff166cfa4.png",</span><br><span class="line">            "tv_微笑": "70dc5c7b56f93eb61bddba11e28fb1d18fddcd4c.png",</span><br><span class="line">            "tv_思考": "90cf159733e558137ed20aa04d09964436f618a1.png",</span><br><span class="line">            "tv_惊吓": "0d15c7e2ee58e935adc6a7193ee042388adc22af.png",</span><br><span class="line">            "tv_打脸": "56ab10b624063e966bfcb76ea5dc4794d87dfd47.png",</span><br><span class="line">            "tv_抓狂": "fe31c08edad661d63762b04e17b8d5ae3c71a757.png",</span><br><span class="line">            "tv_抠鼻": "c666f55e88d471e51bbd9fab9bb308110824a6eb.png",</span><br><span class="line">            "tv_斜眼笑": "911f987aa8bc1bee12d52aafe62bc41ef4474e6c.png",</span><br><span class="line">            "tv_无奈": "ea8ed89ee9878f2fece2dda0ea8a5dbfe21b5751.png",</span><br><span class="line">            "tv_晕": "5443c22b4d07fb1907ccc610c8e6db254f2461b7.png",</span><br><span class="line">            "tv_流汗": "cead1c351ab8d79e9f369605beb90148db0fbed3.png",</span><br><span class="line">            "tv_流泪": "7e71cde7858f0cd50d74b0264aa26db612a8a167.png",</span><br><span class="line">            "tv_流鼻血": "c32d39db2737f89b904ca32700d140a9241b0767.png",</span><br><span class="line">            "tv_点赞": "f85c354995bd99e28fc76c869bfe42ba6438eff4.png",</span><br><span class="line">            "tv_生气": "26702dcafdab5e8225b43ffd23c94ac1ff932654.png",</span><br><span class="line">            "tv_生病": "8b0ec90e6b86771092a498c54f09fc94621c1900.png",</span><br><span class="line">            "tv_疑问": "0793d949b18d7be716078349c202c15ff166f314.png",</span><br><span class="line">            "tv_白眼": "c1d59f439e379ee50eef488bcb5e5378e5044ea4.png",</span><br><span class="line">            "tv_皱眉": "72ccad6679fea0d14cce648b4d818e09b8ffea2d.png",</span><br><span class="line">            "tv_目瞪口呆": "0b8cb81a68de5d5365212c99375e7ace3e7891b7.png",</span><br><span class="line">            "tv_睡着": "8b196675b53af58264f383c50ad0945048290b33.png",</span><br><span class="line">            "tv_笑哭": "1abc628f6d4f4caf9d0e7800878f4697abbc8273.png",</span><br><span class="line">            "tv_腼腆": "89712c0d4af73e67f89e35cbc518420380a7f6f4.png",</span><br><span class="line">            "tv_色": "61822c7e9aae5da76475e7892534545336b23a6f.png",</span><br><span class="line">            "tv_调侃": "4bc022533ef31544ca0d72c12c808cf4a1cce3e3.png",</span><br><span class="line">            "tv_调皮": "b9c41de8e82dd7a8515ae5e3cb63e898bf245186.png",</span><br><span class="line">            "tv_鄙视": "6e72339f346a692a495b123174b49e4e8e781303.png",</span><br><span class="line">            "tv_闭嘴": "c9e990da7f6e93975e25fd8b70e2e290aa4086ef.png",</span><br><span class="line">            "tv_难过": "87f46748d3f142ebc6586ff58860d0e2fc8263ba.png",</span><br><span class="line">            "tv_馋": "fc7e829b845c43c623c8b490ee3602b7f0e76a31.png",</span><br><span class="line">            "tv_鬼脸": "0ffbbddf8a94d124ca2f54b360bbc04feb6bbfea.png",</span><br><span class="line">            "tv_黑人问号": "45821a01f51bc867da9edbaa2e070410819a95b2.png",</span><br><span class="line">            "tv_鼓掌": "1d21793f96ef4e6f48b23e53e3b9e42da833a0f6.png"</span><br><span class="line">                // ... 更多表情</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>



<h3 id="2-2-Valine评论区添加背景图片"><a href="#2-2-Valine评论区添加背景图片" class="headerlink" title="2.2 Valine评论区添加背景图片"></a>2.2 Valine评论区添加背景图片</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 评论框美化 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.v</span> <span class="selector-class">.vwrap</span> <span class="selector-class">.vedit</span>&#123;</span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 这里可以直接使用自定义链接，也可以在主题配置文件中添加项 --&gt;</span></span></span><br><span class="line">        &lt;!--</span><br><span class="line">        valine:</span><br><span class="line">          bg: https://gitee.com/cungudafa/source/raw/master/img/gif/Sitich/Sitich30.gif</span><br><span class="line">        --&gt;</span><br><span class="line"><span class="xml">        background: url("<span class="tag">&lt;<span class="name">%=</span> <span class="attr">theme.valine.bg</span> %&gt;</span>"); </span></span><br><span class="line">        background-repeat: no-repeat;</span><br><span class="line">        background-position: right;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>演示效果</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200612141245363.png" alt="Valine添加背景图片" title="">
                </div>
                <div class="image-caption">Valine添加背景图片</div>
            </figure>



<h3 id="2-3-Valine简单美化（按钮，表头）"><a href="#2-3-Valine简单美化（按钮，表头）" class="headerlink" title="2.3 Valine简单美化（按钮，表头）"></a>2.3 Valine简单美化（按钮，表头）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt; &#123;</span><br><span class="line">    .v .vwrap .vheader&#123;</span><br><span class="line">        background: #fff7f7f7;</span><br><span class="line">    &#125;</span><br><span class="line">    .v .vbtn.vsubmit&#123;</span><br><span class="line">        border-radius: 30px;</span><br><span class="line">        padding: 0;</span><br><span class="line">        color: #111; </span><br><span class="line">        line-height: 44px;</span><br><span class="line">        width:30%;</span><br><span class="line">        background:#ff9999;</span><br><span class="line">        color: #fff;</span><br><span class="line">        line-height: 2;</span><br><span class="line">        font-weight: bolder;</span><br><span class="line">        border: 1px solid #e9eff3;</span><br><span class="line">        padding: .4em .5em;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>



<p><strong>演示效果</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200612142054607.png" alt="美化效果" title="">
                </div>
                <div class="image-caption">美化效果</div>
            </figure>



<blockquote>
<p>简单介绍到这里，有前端大神可以在评论区留下您的美化效果~</p>
</blockquote>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>indigo主题添加友链页面</title>
    <url>/2020/06/18/hexo/indigo%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E5%8F%8B%E9%93%BE%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<h1 id="indigo主题添加友链页面"><a href="#indigo主题添加友链页面" class="headerlink" title="indigo主题添加友链页面"></a>indigo主题添加友链页面</h1><h2 id="1-添加友链界面"><a href="#1-添加友链界面" class="headerlink" title="1. 添加友链界面"></a>1. 添加友链界面</h2><ul>
<li><p>git bash here弹出命令行窗口</p>
</li>
<li><p>输入以下命令新建 “友链“ 文件夹</p>
<p><code>hexo new page links</code></p>
</li>
<li><p>执行完之后，会在<code>source</code>文件夹下创建<code>links</code>文件夹，其中会有一个<code>index.md</code>文件，打开后，对其添加：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">layout: links</span><br></pre></td></tr></table></figure>

<p>这一步主要是为了，确定<strong>友链界面的布局</strong>，使用的是<code>links</code>的布局文件，在下面进行添加</p>
</li>
<li><p>在自己的主题文件下，找到<code>layout</code>文件夹，新建两个文件<code>link.ejs</code>，<code>links.ejs</code>，然后复制下面的代码。（虽然都是indigo主题，但是可能这里的文件后缀名还是不一样，大家可以根据不同文件自行修改，基本差不多）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- link.ejs --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">links</span>', &#123;</span></span><br><span class="line"><span class="tag">    <span class="attr">title:</span> <span class="attr">theme.links_title</span> + '<span class="attr">:</span> '+ <span class="attr">page.link</span></span></span><br><span class="line"><span class="tag">&#125;) %&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- links.ejs --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">header</span>', &#123;</span></span><br><span class="line"><span class="tag">    <span class="attr">title:</span> <span class="attr">locals.title</span> || <span class="attr">theme.links_title</span>,</span></span><br><span class="line"><span class="tag">    <span class="attr">hdClass:</span> '<span class="attr">links-header</span>'</span></span><br><span class="line"><span class="tag">&#125;) %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container body-wrap fade"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">theme.links</span> &amp;&amp; <span class="attr">theme.links.length</span>) &#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"archive-separator"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%=theme.links_title%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"waterfall"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> <span class="attr">theme.links.forEach</span>(<span class="attr">function</span>(<span class="attr">links</span>) &#123; %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"waterfall-item"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"article-card archive-article"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"post-title"</span> <span class="attr">itemprop</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"post-title-link"</span> <span class="attr">href</span>=<span class="string">"&lt;%- links.url %&gt;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">itemprop</span>=<span class="string">"url"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">%-</span> <span class="attr">links.name</span> %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%&#125;)%</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> &#125;%&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-content"</span> <span class="attr">id</span>=<span class="string">"page-content"</span> <span class="attr">itemprop</span>=<span class="string">"pageContent"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%-</span> <span class="attr">page.content</span> %&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    	<span class="selector-class">.page-content</span>&#123;</span></span><br><span class="line"><span class="css">    		<span class="selector-tag">background</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">    		<span class="selector-tag">box-shadow</span>: 0 0 4<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,<span class="selector-class">.2</span>);</span></span><br><span class="line">    		border-radius: 4px;</span><br><span class="line">    		padding: 12px;</span><br><span class="line">    		margin: 40px 0;</span><br><span class="line">    	&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 实在不会这个语法，所以直接把Valine的加载搬过来了，这里是作者添加评论的方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">plugins</span>/<span class="attr">valine</span>') %&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_partial</span>/<span class="attr">paginator</span>') %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h2><ul>
<li><p>打开主题的配置文件<code>_config.yml</code>，在menu菜单中添加<code>友链item</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home:</span><br><span class="line">    text: 主页</span><br><span class="line">    url: /</span><br><span class="line"><span class="comment">&lt;!-- 添加link item --&gt;</span></span><br><span class="line">  link:</span><br><span class="line">    text: 友情链接</span><br><span class="line">    url: /links</span><br></pre></td></tr></table></figure>
</li>
<li><p>现在友链的界面就做好了，可以试一下</p>
</li>
<li><p>然后添加需要的友链，还是在主题的配置文件<code>_config.yml</code>，找一块地方，添加下面的代码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 友情链接</span></span><br><span class="line">links:</span><br><span class="line">  - name: "百度"</span><br><span class="line">    url: https://www.baidu.com/</span><br><span class="line">  - name: "搜狗"</span><br><span class="line">    url: https://www.sogou.com/</span><br></pre></td></tr></table></figure>
</li>
<li><p>现在重新打开界面，看看效果</p>
</li>
</ul>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>indigo自定义界面</title>
    <url>/2020/06/16/hexo/indigo%E8%87%AA%E5%AE%9A%E4%B9%89%E7%95%8C%E9%9D%A2/</url>
    <content><![CDATA[<h1 id="indigo自定义界面"><a href="#indigo自定义界面" class="headerlink" title="indigo自定义界面"></a>indigo自定义界面</h1><p>@card{</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/640.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>

<p>}</p>
<p>@column-2{</p>
<p>@card{</p>
<h1 id="左"><a href="#左" class="headerlink" title="左"></a>左</h1><p>}</p>
<p>@card{</p>
<h1 id="右"><a href="#右" class="headerlink" title="右"></a>右</h1><p>}</p>
<p>}</p>
<p>@column-3{</p>
<p>@card{</p>
<p>左</p>
<p>}</p>
<p>@card{</p>
<p>中</p>
<p>}</p>
<p>@card{</p>
<p>右</p>
<p>}</p>
<p>}</p>
<p>@timeline{</p>
<h5 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h5><p>@item{</p>
<h6 id="6月25日"><a href="#6月25日" class="headerlink" title="6月25日"></a>6月25日</h6><p>第一行<br>第二行 /* ok */</p>
<p>}</p>
<p>@item{</p>
<h6 id="11月6日"><a href="#11月6日" class="headerlink" title="11月6日"></a>11月6日</h6><p>第一行<br>第二行 /* error */</p>
<p>}</p>
<p>}</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora+PicGo+Gitee实现markdown高效创作</title>
    <url>/2020/06/13/%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/Typora-PicGo-Gitee%E5%AE%9E%E7%8E%B0markdown%E9%AB%98%E6%95%88%E5%88%9B%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="Typora-PicGo-Gitee实现markdown高效创作"><a href="#Typora-PicGo-Gitee实现markdown高效创作" class="headerlink" title="Typora+PicGo+Gitee实现markdown高效创作"></a>Typora+PicGo+Gitee实现markdown高效创作</h1><h2 id="Why-Typora"><a href="#Why-Typora" class="headerlink" title="Why Typora"></a>Why Typora</h2><p>Typora是一款极简而功能强大的markdown写作应用，目前仍然免费，强烈推荐。</p>
<h2 id="Why-PicGo"><a href="#Why-PicGo" class="headerlink" title="Why PicGo"></a>Why PicGo</h2><p>对于markdown创作，图片插入是不可或缺的一部分。但是，想要文章被更多人看到，图片就要上传到图床。作者以前经常使用有道云作为图床，除了使用上不方便，有时候还会遇到图片不可访问的情况，略显麻烦低效。</p>
<p><strong>PicGo</strong>这个工具很好地解决了这个问题，只需拖动图片，就可以完成图床上传，并且把想要的链接格式复制到剪贴板。</p>
<h2 id="Why-Gitee"><a href="#Why-Gitee" class="headerlink" title="Why Gitee"></a>Why Gitee</h2><p>Gitee可以说是国内的Github，没有Github那么全能，但是比Github快很多。做一个图床，Gitee应该是更好的选择。</p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul>
<li><p><a href="https://www.typora.io/" target="_blank" rel="noopener">Typora下载</a></p>
</li>
<li><p><a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">PicGo下载</a></p>
</li>
</ul>
<p>选择适应自己的版本，安装过程一路next即可。</p>
<h2 id="PicGo安装插件"><a href="#PicGo安装插件" class="headerlink" title="PicGo安装插件"></a>PicGo安装插件</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200613172244585.png" alt="插件设置" title="">
                </div>
                <div class="image-caption">插件设置</div>
            </figure>



<p>搜索“gitee”，写这篇文章的时候有这两个插件，我选了右边的gitee-uploader，应该都是可以的，本文以gitee-uploader为例。点击“安装”。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/hzyangjc/tuchuang/raw/master/img/222.PNG" alt="安装插件" title="">
                </div>
                <div class="image-caption">安装插件</div>
            </figure>



<h2 id="配置Gitee"><a href="#配置Gitee" class="headerlink" title="配置Gitee"></a>配置Gitee</h2><h3 id="1-新建仓库"><a href="#1-新建仓库" class="headerlink" title="1. 新建仓库"></a>1. 新建仓库</h3><ul>
<li><p>访问 gitee.com，注册或登录。点击右上角的“＋”，点击“新建仓库”。</p>
</li>
<li><p>名称、路径自定，介绍随意。</p>
</li>
<li><p><strong>一定要选择公开！</strong></p>
</li>
<li><p>勾选“用Readme文件初始化这个仓库”，用于创建master分支。</p>
</li>
<li><p>点击创建。</p>
</li>
</ul>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/333.PNG" alt="新建仓库"></p>
<h3 id="2-创建私人令牌"><a href="#2-创建私人令牌" class="headerlink" title="2. 创建私人令牌"></a>2. 创建私人令牌</h3><ul>
<li>点击右上角的头像，点击“设置”</li>
<li>安全设置 -&gt; 私人令牌 -&gt; 生成新令牌</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200613173113929.png" alt="生成新令牌" title="">
                </div>
                <div class="image-caption">生成新令牌</div>
            </figure>

<ul>
<li>随便填一段描述</li>
<li><strong>取消全选，只勾选“projects”</strong></li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/444.PNG" alt="生成新令牌" title="">
                </div>
                <div class="image-caption">生成新令牌</div>
            </figure>

<ul>
<li><p>点击“提交”</p>
</li>
<li><p>然后会让你输入一段密码，之后会生成一段字符串。<strong>一定要点击“复制”，不要丢失了，它只会出现一次</strong></p>
</li>
<li><p>至此，gitee的配置完成</p>
</li>
</ul>
<h2 id="配置PicGO"><a href="#配置PicGO" class="headerlink" title="配置PicGO"></a>配置PicGO</h2><ul>
<li><p>下载插件之后，重启应用。</p>
</li>
<li><p>打开“图床设置”的“gitee”（如图）</p>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200613173458198.png" alt="gitee设置"></p>
</li>
<li><p><strong>先把复制的字符串令牌粘贴到“token”一栏</strong></p>
</li>
<li><p>repo：填写你的仓库对于gitee.com的相对路径。一般是：YourName/YourRepo</p>
</li>
<li><p>branch：master</p>
</li>
<li><p>path：img</p>
</li>
<li><p>后面两个不必填写</p>
</li>
<li><p>点击“确定”并设置为默认图床。</p>
</li>
<li><p><strong>至此，PicGo已经配置完成，拖动一张图片到PicGo的上传区后，待上传完成，会将图片链接复制到剪切板，只要Ctrl+V粘贴即可。</strong></p>
</li>
</ul>
<h2 id="关联Typora"><a href="#关联Typora" class="headerlink" title="关联Typora"></a>关联Typora</h2><p>每次这么做还是有些麻烦，我们可以将Typora进行关联，得到复制图片到Typora即可完成上传并得到链接。</p>
<ul>
<li>打开typora</li>
<li>文件→偏好设置→图像→插入图片时</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200613174233428.png" alt="插入图片" title="">
                </div>
                <div class="image-caption">插入图片</div>
            </figure>

<ul>
<li><p>上传服务就选择PicGo（app）</p>
</li>
<li><p>路径填写你的picgo.exe所在的路径</p>
</li>
<li><p>通过“验证图片上传选项”按钮，可以检验配置是否成功</p>
</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200613174603920.png" alt="上传服务" title="">
                </div>
                <div class="image-caption">上传服务</div>
            </figure>

<ul>
<li>关联Typora至此配置成功</li>
</ul>
<blockquote>
<p>测试之后假如没有问题，那就说明大功告成了。妈妈再也不担心我markdown创作时没有图床了，请开始你的创作之旅吧~</p>
</blockquote>
]]></content>
      <categories>
        <category>工具教程</category>
      </categories>
      <tags>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>基于hexo搭建博客</title>
    <url>/2020/06/16/hexo/%E5%9F%BA%E4%BA%8Ehexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="基于hexo搭建博客"><a href="#基于hexo搭建博客" class="headerlink" title="基于hexo搭建博客"></a>基于hexo搭建博客</h1><blockquote>
<p>参考文章:</p>
<p><a href="https://blog.csdn.net/Bluno_s/article/details/98515460" target="_blank" rel="noopener">我的Hexo博客搭建过程</a></p>
<p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029" target="_blank" rel="noopener">hexo史上最全搭建教程</a></p>
</blockquote>
<h2 id="1-Git安装和配置"><a href="#1-Git安装和配置" class="headerlink" title="1. Git安装和配置"></a>1. Git安装和配置</h2><ul>
<li><p><a href="https://git-scm.com/" target="_blank" rel="noopener">Git官网</a></p>
<p>Git的安装比较简单</p>
</li>
<li><p>准备一个Github账号，我们的博客要挂在github上</p>
</li>
<li><p>首先打开CMD，设置你的账号和邮箱，输入</p>
<p><code>git config --global user.name &quot;yourname&quot;</code><br><code>git config --global user.email &quot;youremail&quot;</code><br>其中”yourname”是你的github账号，”youremail”是你的github账号邮箱</p>
</li>
<li><p>可以用以下两条命令检查输入<br><code>git config user.name</code><br><code>git config user.email</code></p>
</li>
<li><p>然后用以下命令创建SSH秘钥<br><code>ssh-keygen -t rsa -C &quot;youremail&quot;</code><br>后续连敲3次回车，不需要任何输入。<br>完成之后会告诉你生成了.ssh文件夹（应该在C:\Users\Administrator路径下），找到文件夹，其中id_rsa是秘钥，id_rsa.pub是公钥，用文本编辑器打开id_rsa.pub，复制所有内容。</p>
</li>
<li><p>添加公钥到Github</p>
<p>登录Github，右上角 <strong>头像-&gt;Settings -&gt; SSH and GPG keys -&gt; New SSH key</strong>。 把公钥粘贴到key中，填好title并点击Add SSH key。</p>
</li>
<li><p>回到CMD，输入命令<br><code>ssh -T git@github.com</code><br>选yes，提示成功。</p>
</li>
</ul>
<h2 id="2-安装Nodejs"><a href="#2-安装Nodejs" class="headerlink" title="2. 安装Nodejs"></a>2. 安装Nodejs</h2><ul>
<li><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Nodejs官网</a></p>
<p>windows：选择LTS版本就行了，下载完成后安装。</p>
</li>
<li><p>安装完成有两个组件，nodejs和npm，可以在<strong>git bash</strong>下使用以下命令查看版本</p>
<p><code>node -v</code></p>
<p><code>npm -v</code></p>
</li>
<li><p>用npm安装cnpm淘宝镜像源</p>
<p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>
<p>用以下命令查看版本<br><code>cnpm -v</code><br>安装完成以后就都是用cnpm下载了</p>
</li>
</ul>
<h2 id="3-安装博客框架Hexo"><a href="#3-安装博客框架Hexo" class="headerlink" title="3. 安装博客框架Hexo"></a>3. 安装博客框架Hexo</h2><ul>
<li>安装命令<br><code>cnpm install -g hexo-cli</code></li>
<li>查看版本<br><code>hexo -v</code></li>
</ul>
<h2 id="4-搭建Hexo博客"><a href="#4-搭建Hexo博客" class="headerlink" title="4. 搭建Hexo博客"></a>4. 搭建Hexo博客</h2><blockquote>
<p><a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">hexo常用命令</a></p>
</blockquote>
<ul>
<li><p>新建一个文件夹，例如<code>D:\blog</code></p>
</li>
<li><p>在上述文件夹<code>D:\blog</code>右键，<code>git bash</code>打开</p>
</li>
<li><p>初始化一下hexo</p>
<p><code>hexo init myblog</code></p>
<p>这个myblog可以自己取什么名字都行，然后我们会看到在myblog文件夹下，有一些文件：</p>
<ul>
<li>node_modules: 依赖包</li>
<li>public：存放生成的页面</li>
<li>scaffolds：生成文章的一些模板</li>
<li>source：用来存放你的文章</li>
<li>themes：主题</li>
<li><strong>_config.yml: 博客的配置文件</strong></li>
</ul>
</li>
<li><p>启动博客</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo g		<span class="comment">// hexo generate的缩写，生成静态文章</span></span><br><span class="line">hexo s		<span class="comment">// hexo server的缩写，启动本地服务器</span></span><br></pre></td></tr></table></figure>

<p>然后在浏览器输入localhost:4000就可以看到你生成的博客了，hexo本地web服务器监听了4000端口。</p>
<p><strong>结束本地服务器按Ctrl+C</strong>。</p>
</li>
<li><p>远程部署到Github</p>
<blockquote>
<p>将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上</p>
</blockquote>
<ul>
<li>登录Github，新建一个仓库：右上角+号 -&gt; new repository</li>
<li>项目命名必须是 “yourname.github.io”，比如我的是 “BambooWine.github.io”，描述写一下，选public，然后点Create Repository</li>
<li>为Hexo安装Github部署插件：输入命令 <code>cnpm install --save hexo-deployer-git</code></li>
<li>打开站点配置文件 <strong>_config.yml</strong>，翻到最后，修改为：其中YourgithubName你的GitHub账户名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;YourgithubName&#x2F;YourgithubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<ul>
<li><p>部署到Github：<code>hexo deploy 或者 hexo d</code></p>
<p> 这个过程就是使用你Git中SSH关联的账号往你刚刚新建的仓库中push文件，等待部署完成之后，打开你的github即可查看效果。<strong>通常部署完成之后要等待一段时间，一些效果才会正常显示</strong>。</p>
</li>
</ul>
</li>
</ul>
<h2 id="5-写文章，更换主题等操作"><a href="#5-写文章，更换主题等操作" class="headerlink" title="5.  写文章，更换主题等操作"></a>5.  写文章，更换主题等操作</h2><h3 id="5-1-撰写文章"><a href="#5-1-撰写文章" class="headerlink" title="5.1 撰写文章"></a>5.1 撰写文章</h3><ul>
<li><p>创建博客文章</p>
<p><code>hexo n &quot;我的第一篇博客文章&quot;</code></p>
<p>n是new的简写，创建完成后文章会放到source/_posts文件夹下面，md文件，markdown语法自行学习。</p>
<p>打开文件之后，开头的部分内容官方称为Font-matter，这里你可以设定文章标题，文章创建更新时间，标签，分类等等，具体请查阅。<a href="https://hexo.io/zh-cn/docs/front-matter" target="_blank" rel="noopener">front-matter官网介绍</a></p>
</li>
<li><p>写完一篇博客之后，可以看一下效果</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">hexo cl      <span class="comment">// 清理（必要时清理，不必每次都清理）</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">hexo g       <span class="comment">// hexo generate的缩写，生成静态文章</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">hexo s       <span class="comment">// hexo server的缩写，启动本地服务器</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="5-2-更换主题"><a href="#5-2-更换主题" class="headerlink" title="5.2 更换主题"></a>5.2 更换主题</h3><blockquote>
<p>默认情况博客采用的是landscape主题，略丑陋，本博客采用<a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="noopener">indigo主题</a></p>
</blockquote>
<ul>
<li><p>安装主题</p>
<p>在blog文件夹下，右键<strong>git bash</strong>，输入以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-indigo.git themes&#x2F;indigo</span><br></pre></td></tr></table></figure>

<p>之后会在themes下新建indigo文件夹，然后将主题克隆到此文件夹下</p>
</li>
<li><p>配置hexo全局设置文件_config.yml</p>
<p>找到theme字段，默认是landscape，改成indigo</p>
</li>
<li><p>启动本地服务器查看效果</p>
</li>
</ul>
<p><strong>至此大概就初步完成了，后续美化等操作，大家可以自行挖掘</strong></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>控制</title>
    <url>/2020/08/01/%E8%80%83%E7%A0%94%E7%A7%91%E7%9B%AE/%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="控制科学"><a href="#控制科学" class="headerlink" title="控制科学"></a>控制科学</h1><h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><h2 id="2-自动控制系统的数学模型"><a href="#2-自动控制系统的数学模型" class="headerlink" title="2. 自动控制系统的数学模型"></a>2. 自动控制系统的数学模型</h2><h3 id="2-1-微分方程的编写"><a href="#2-1-微分方程的编写" class="headerlink" title="2.1 微分方程的编写"></a>2.1 微分方程的编写</h3><ul>
<li><p>编写步骤</p>
<ul>
<li>确定系统的输入量和输出量;</li>
<li>将系统分解为各环节，依次确定各环节的输入量和输出量，根据各环节的物理规律写出各环节的微分方程;</li>
<li>消去中间变量，求出系统的微分方程。</li>
</ul>
</li>
<li><p>使用的定律</p>
<ul>
<li>基尔霍夫电流定律(KCL);在任一时刻，集总电路中任一个节点上，流入节点的电流之和<strong>等于</strong>流出节点的电流之和。</li>
<li>基尔霍夫电压定律(KVL): 在任一时刻，沿集总电路中任一回路，所有支路电压的代数和恒<strong>等于</strong>零。</li>
</ul>
</li>
<li><p>常用器件的数学模型</p>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200822220628204.png" alt="image-20200822220628204"></p>
</li>
</ul>
<ul>
<li><p>传递函数的定义</p>
<p><strong>零初始条件</strong></p>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200822221230447.png" alt="image-20200822221230447"></p>
</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200822221422806.png" alt="image-20200822221422806" title="">
                </div>
                <div class="image-caption">image-20200822221422806</div>
            </figure>

<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200822221753888.png" alt="image-20200822221753888" title="">
                </div>
                <div class="image-caption">image-20200822221753888</div>
            </figure>



<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200822223750247.png" alt="image-20200822223750247"></p>
<h2 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h2><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200826225811541.png" alt="image-20200826225811541"></p>
<h2 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h2><ul>
<li><p>计算机控制系统是闭环还是开环？</p>
<p>保持器工作期间是开环，否则是闭环</p>
</li>
</ul>
]]></content>
      <categories>
        <category>考研</category>
      </categories>
      <tags>
        <tag>控制科学</tag>
      </tags>
  </entry>
  <entry>
    <title>看懂PID控制器</title>
    <url>/2020/06/16/%E6%8E%A7%E5%88%B6%E7%A7%91%E5%AD%A6/%E7%9C%8B%E6%87%82PID%E6%8E%A7%E5%88%B6%E5%99%A8/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="PID控制器"><a href="#PID控制器" class="headerlink" title="PID控制器"></a>PID控制器</h1><h2 id="1-控制器"><a href="#1-控制器" class="headerlink" title="1. 控制器"></a>1. 控制器</h2><p>在研究PID控制器前，必须先想一个问题，控制器的作用到底是什么？相信不少同学在学习自动控制原理的时候，接触最多的是：直接对传递函数进行分析，比如研究某个传函的阶跃响应？幅频特性？稳态误差？根据劳斯判据，根轨迹研究根的分布以判断系统的稳定型？</p>
<p>那么控制器又是哪里冒出来的？自控中的开环系统或者闭环系统不能解决问题么？其实这是我们认识狭隘了，这句话本身就是不对的，往下看。</p>
<p>举两个实例：</p>
<h3 id="1-1-电机速度控制系统"><a href="#1-1-电机速度控制系统" class="headerlink" title="1.1 电机速度控制系统"></a>1.1 电机速度控制系统</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221429670.png" alt="电机速度" title="">
                </div>
                <div class="image-caption">电机速度</div>
            </figure>

<ol>
<li>当出现扰动而使得电机的转速偏离设定值时，测速电动机充当检测变送环节的角色，而它的输出和设定值之间就会出现一个偏差信号（电压信号）</li>
<li>这个偏差信号通常是比较小的，所以需要放大器对其进行放大</li>
<li>而这个放大后的电压信号则是触发器的控制电压，控制晶闸管的关断时间，进而调节电动机的电枢电压，从而调节转速直到等于设定值</li>
</ol>
<p>在这个控制系统中，电动机显然是被控对象，而它的转速变化规律是可以抽象为一个数学模型的，也就是传递函数；而其他的环节，则是为了共同产生一个控制信号来作为电动机的输入。</p>
<p>我们可以把比较器称为本文中的<strong>调节器</strong>，或者将比较器+放大器称为<strong>调节器</strong>，这不是重点，无伤大雅。</p>
<p>值得注意的是：这个系统中的所有环节，其控制规律都可以抽象为若干个传递函数</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221459922.png" alt="电机调速" title="">
                </div>
                <div class="image-caption">电机调速</div>
            </figure>
<ul>
<li>Un*为设定值，Un为测量变送的反馈值</li>
<li>两者偏差去调节触发器控制电压Uct，控制规律为<code>Kp</code></li>
<li>通过晶闸管控制电动机回路总电压Ud0，控制规律为<code>Ks</code></li>
<li>Ud0 - 电枢总电阻电压即为电动机电动势E</li>
<li>E = Ceφn，得到输出转速；测速发电机根据转速反馈电压信号，控制规律<code>α</code></li>
</ul>
<h3 id="1-2-温度或水位控制系统"><a href="#1-2-温度或水位控制系统" class="headerlink" title="1.2 温度或水位控制系统"></a>1.2 温度或水位控制系统</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221521103.png" alt="水位控制" title="">
                </div>
                <div class="image-caption">水位控制</div>
            </figure>

<p>这个应该是比较简单的过程控制，实际水位低于设定水位时，控制器则作用于执行机构去增大调节阀开度，增加进水流量。</p>
<h3 id="1-3-小小总结"><a href="#1-3-小小总结" class="headerlink" title="1.3 小小总结"></a>1.3 小小总结</h3><blockquote>
<p>不要总是孤立控制器，它们是控制被控对象的必要环节。</p>
</blockquote>
<p>这里给出一般的闭环控制系统框图</p>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221545700.png" alt="闭环控制框图"></p>
<blockquote>
<p>不要单纯的认为只有被控对象才有传递函数，每一个环节都有其相应的控制规律，都可以抽象为一个数学模型，用对应的传递函数来表达。就像最小拍控制器设计中，我们根据输入信号选择整个系统的闭环传函，进而确定控制器的脉冲传递函数。</p>
</blockquote>
<p><strong>总结：对于闭环系统来说，控制器的输入是偏差信号，输出则是控制信号，去控制执行机构，进而调节被控对象</strong>。</p>
<p><strong>而闭环控制系统，设计目的就是系统输出对输入的跟随能力</strong>。</p>
<h2 id="2-PID"><a href="#2-PID" class="headerlink" title="2. PID"></a>2. PID</h2><ul>
<li>P：比例控制器，对系统产生的偏差能够迅速做出反应；但是比例控制器不能消除余差，不过随着比例系数的增大，余差会减小，同时系统输出振荡次数增加，稳定性也会下降，调节时间加长</li>
</ul>
<blockquote>
<p>关于不能消除余差这一点，从数学角度是可以解释的，求一下余差即可。当然直想也是可以理解的：对于一个速度控制系统，某时刻负载减小，导致转速上升，比例控制器作用于执行机构使得转速下降，假如转速可以下降到设定转速，那么此时负载依然是小于额定负载的，转速依然会上升；所以反证得，最后余差是肯定会存在的。</p>
</blockquote>
<ul>
<li>I：积分控制器，积分控制是可以消除余差的，体现于偏差消失后，积分控制器的输出是可以<strong>保持</strong>前时刻的输出；但是积分控制器的控制动作比较缓慢，一般不单独使用；随着积分系数的增大（时间常数的减小），系统的稳定性下降。</li>
</ul>
<ul>
<li>D：微分控制器，够体现出当前误差的变化趋势，在偏差出现或变化的瞬间，立即产生强烈的调节作用，从而加快系统的动作速度，减少调节时间；但是由于微分对静态偏差毫无控制能力（偏差存在，但是不变化，控制器输出为0），所以一般不单独使用。并且在纯比例作用的基础上增加微分作用可以提高系统稳定性。</li>
</ul>
<p><strong>总结：讲比例，积分，微分三种控制规律结合在一起，只要三项控制作用的强度配合得当，就既能快速调节，又能消除余差，从而得到满意的控制效果。</strong></p>
<h2 id="3-模拟式PID"><a href="#3-模拟式PID" class="headerlink" title="3. 模拟式PID"></a>3. 模拟式PID</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221607032.png" alt="一般pid框图" title="">
                </div>
                <div class="image-caption">一般pid框图</div>
            </figure>

<p>模拟pid控制器的算法：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221621725.png" alt="模拟pid算法" title="">
                </div>
                <div class="image-caption">模拟pid算法</div>
            </figure>

<ul>
<li>u(t) 为控制器输出，e(t) 为控制器输入，即偏差信号：<code>e(t) = r(t) - y(t)</code></li>
<li>Kp 为比例系数，Ti 为积分时间常数，Td 为微分时间常数</li>
</ul>
<p>给出一个简单的matlab模拟pid仿真：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221633752.png" alt="模拟pid仿真" title="">
                </div>
                <div class="image-caption">模拟pid仿真</div>
            </figure>

<p>参数设置：<code>Kp = 0.5, Ki = 0.2, Kd = 1</code>；输出结果：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221650331.png" alt="模拟pid仿真结果" title="">
                </div>
                <div class="image-caption">模拟pid仿真结果</div>
            </figure>

<p><strong>模拟pid局限性</strong></p>
<ul>
<li>功能单一，灵活性差</li>
<li>信息分散，所用仪表多，且监视不方便</li>
<li>接线过多，系统维护难度大</li>
</ul>
<p>随着计算机等技术的发展，数字控制器日益成为工业生产中占据主导地位的控制器。</p>
<h2 id="4-数字式PID"><a href="#4-数字式PID" class="headerlink" title="4. 数字式PID"></a>4. 数字式PID</h2><p>对模拟pid控制器进行离散化处理，用<strong>后向差分</strong>代替微分得：（具体细节不细说）</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221709929.png" alt="离散化pid算法" title="">
                </div>
                <div class="image-caption">离散化pid算法</div>
            </figure>


<h3 id="4-1-位置式PID算法"><a href="#4-1-位置式PID算法" class="headerlink" title="4.1 位置式PID算法"></a>4.1 位置式PID算法</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221726139.png" alt="位置式pid" title="">
                </div>
                <div class="image-caption">位置式pid</div>
            </figure>

<ul>
<li>Kp，Ki，Kd为比例，积分，微分的三个重要参数</li>
<li>k是采样序列号，k=0,1,2,3…</li>
<li>Uk第k次采样时刻<strong>控制器</strong>输出值</li>
<li>ek第k次采样时刻偏差，e(k-1)第k-1次采样偏差值，e(k-2)第k-2次采样偏差值</li>
<li>位置式pid控制器的输入为系统的偏差值，输出为uk，即偏差的组合</li>
</ul>
<h4 id="4-1-2-位置式pid算法的缺点"><a href="#4-1-2-位置式pid算法的缺点" class="headerlink" title="4.1.2 位置式pid算法的缺点"></a>4.1.2 位置式pid算法的缺点</h4><ul>
<li>控制器输出与过去的各个状态有关，运算量大</li>
<li>计算机出现故障，u(k)的大幅度变化会引起执行机构位置的大幅度变化</li>
</ul>
<h3 id="4-2-增量式PID算法"><a href="#4-2-增量式PID算法" class="headerlink" title="4.2 增量式PID算法"></a>4.2 增量式PID算法</h3><p>由位置式pid第k次输出 - 第k-1次输出 得到增量式pid算法：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9nc3MwLmJhaWR1LmNvbS85NG8zZFNhZ194STRraEdrbzlXVEFuRjZoaHkvemhpZGFvL3doJTNENjAwJTJDODAwL3NpZ249NjAyYzFhOTdjOWZkZmMwM2U1MmRlYmJlZTQwZmFiYWMvZTRkZGU3MTE5MGVmNzZjNjBmM2YxNzQyOTcxNmZkZmFhZTUxNjdlZS5qcGc" alt="增量式pid算法" title="">
                </div>
                <div class="image-caption">增量式pid算法</div>
            </figure>

<blockquote>
<p>增量式pid算法表示的是控制机构（阀门，步进电机等）的调节增量，即k时刻相对于k-1时刻的调节增量。</p>
</blockquote>
<p><strong>值得注意的是：采用增量式pid算法的控制器输出值为调节增量</strong>。</p>
<p>从这里也可以得出<strong>位置式pid算法</strong>的另一种表示形式：<br><code>u(k) = u(k - 1) + Δu</code></p>
<p>可以说，位置式pid算法和增量式pid算法是pid算法的两种表现形式，从本质上讲二者是一致的。</p>
<h4 id="4-2-2-增量式pid的优点"><a href="#4-2-2-增量式pid的优点" class="headerlink" title="4.2.2 增量式pid的优点"></a>4.2.2 增量式pid的优点</h4><ul>
<li>算式中不需要累加；控制增量Δu(k)的确定仅与最近3次的采样值有关</li>
<li>计算机每次只输出控制增量，对应执行机构位置的变化量，不易引起过程的异常操作</li>
<li>手动—自动切换时冲击小。当控制从手动向自动切换时，<br>可以作到无扰动切换</li>
</ul>
<h3 id="4-3-位置式pid和增量式pid的抉择"><a href="#4-3-位置式pid和增量式pid的抉择" class="headerlink" title="4.3 位置式pid和增量式pid的抉择"></a>4.3 位置式pid和增量式pid的抉择</h3><p>在实际使用中应该使用位置式还是增量式，关键看执行机构的特性：</p>
<ul>
<li>如果执行机构具有积分特性（如步进电机，具有齿轮传递特性的位置执行机构等），应该使用增量式pid算法</li>
<li>如果执行机构没有积分特性，则应该使用位置式pid算法</li>
</ul>
<h3 id="4-4-位置式pid和增量式pid仿真"><a href="#4-4-位置式pid和增量式pid仿真" class="headerlink" title="4.4 位置式pid和增量式pid仿真"></a>4.4 位置式pid和增量式pid仿真</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function [] &#x3D; my_simulink_pid()</span><br><span class="line">% 离散模型</span><br><span class="line">ts &#x3D; 0.001;						    % 采样时间</span><br><span class="line">sys &#x3D; tf(400, [1, 50, 0]);		    % 传递函数</span><br><span class="line">d_sys &#x3D; c2d(sys, ts, &#39;z&#39;);		    % 传递函数离散化</span><br><span class="line">[num, den] &#x3D; tfdata(d_sys, &#39;v&#39;);	% 提取分子分母</span><br><span class="line"></span><br><span class="line">% pid参数</span><br><span class="line">kp &#x3D; 10; ki &#x3D; 2; kd &#x3D; 15;</span><br><span class="line"></span><br><span class="line">% 初始化信号值</span><br><span class="line">y_feed &#x3D; 0;	    % 当前反馈值</span><br><span class="line">y_prev1 &#x3D; 0;    % 前一次输出值</span><br><span class="line">y_prev2 &#x3D; 0;    % 前前一次输出值</span><br><span class="line"></span><br><span class="line">u_prev1 &#x3D; 0;    % 前一次控制器输出值</span><br><span class="line">u_prev2 &#x3D; 0;    % 前前一次控制器输出值</span><br><span class="line"></span><br><span class="line">e_prev1 &#x3D; 0;    % 前一次偏差</span><br><span class="line">e_prev2 &#x3D; 0;    % 前前一次偏差</span><br><span class="line"></span><br><span class="line">x &#x3D; [0, 0, 0];  % p i d 分别的输出</span><br><span class="line"></span><br><span class="line">for k &#x3D; 1:1:3000</span><br><span class="line">	time(k) &#x3D; k*ts;         % 时间序列，用于画图</span><br><span class="line">	r_in(k) &#x3D; 1;            % 输入序列，单位阶跃</span><br><span class="line">	e(k) &#x3D; r_in(k) - y_feed;    % 当前时刻偏差</span><br><span class="line"></span><br><span class="line">	delta_u &#x3D; kp*x(1) + ki*x(2) + kd*x(3);</span><br><span class="line">	% 位置式 PID算法</span><br><span class="line">	% u(k) &#x3D; u_prev1 + delta_u;</span><br><span class="line">	% 增量式 PID算法</span><br><span class="line">	u(k) &#x3D; delta_u;</span><br><span class="line"></span><br><span class="line">	% 对输出限幅</span><br><span class="line">	if u(k) &gt;&#x3D; 10</span><br><span class="line">		u(k) &#x3D; 10</span><br><span class="line">	end</span><br><span class="line"></span><br><span class="line">	if u(k) &lt;&#x3D; -10</span><br><span class="line">		u(k) &#x3D; -10</span><br><span class="line">	end</span><br><span class="line">	</span><br><span class="line">	y_out(k) &#x3D; -den(2)*y_prev1- den(3)*y_prev2 + num(2)*u_prev1 + num(3)*u_prev2;  % 系统输出序列</span><br><span class="line">	y_feed &#x3D; y_out(k);	    % 反馈值</span><br><span class="line"></span><br><span class="line">	u_prev2 &#x3D; u_prev1;      % 更新控制器输出</span><br><span class="line">	u_prev1 &#x3D; u(k);</span><br><span class="line">	y_prev2 &#x3D; y_prev1;      % 更新系统输出</span><br><span class="line">	y_prev1 &#x3D; y_out(k);</span><br><span class="line"></span><br><span class="line">	x(1) &#x3D; e(k) - e_prev1;</span><br><span class="line">	x(2) &#x3D; e(k);</span><br><span class="line">	x(3) &#x3D; e(k) - 2*e_prev1 + e_prev2;</span><br><span class="line">	e_prev2 &#x3D; e_prev1;      % 更新偏差</span><br><span class="line">	e_prev1 &#x3D; e(k);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">% 画图</span><br><span class="line">figure(1);</span><br><span class="line">plot(time, r_in, &#39;b&#39;, time, y_out, &#39;r&#39;); </span><br><span class="line">axis([0, 3, 0, 1.5]);                           % 确定坐标轴范围</span><br><span class="line">xlabel(&#39;time(s)&#39;),ylabel(&#39;r_in, y_out&#39;);   		% 系统输出和系统输入的曲线</span><br><span class="line"></span><br><span class="line">figure(2);</span><br><span class="line">plot(time, r_in, &#39;b&#39;, time, u, &#39;--k&#39;); </span><br><span class="line">axis([0, 3, -0.2, 2.5]);                        % 确定坐标轴范围</span><br><span class="line">xlabel(&#39;time(s)&#39;),ylabel(&#39;r_in, u_out&#39;);   		% 控制器输出和系统输入的曲线</span><br></pre></td></tr></table></figure>

<p><strong>仿真结果：</strong></p>
<p>增量式pid——系统食输出和系统输入曲线图</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221745687.png" alt="r&y" title="">
                </div>
                <div class="image-caption">r&y</div>
            </figure>

<p>增量式pid——控制器输出和系统输入曲线图</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221803911.png" alt="r&u" title="">
                </div>
                <div class="image-caption">r&u</div>
            </figure>


<blockquote>
<p>关于位置式pid算法，在代码中也有标注，只需要加前一时刻控制器输出即可，至于参数的整定，在这里不详细说明。</p>
</blockquote>
]]></content>
      <categories>
        <category>控制学科</category>
      </categories>
      <tags>
        <tag>控制学科</tag>
      </tags>
  </entry>
  <entry>
    <title>第一章——操作系统引论</title>
    <url>/2020/07/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%BC%95%E8%AE%BA/</url>
    <content><![CDATA[<h1 id="第一章——操作系统引论"><a href="#第一章——操作系统引论" class="headerlink" title="第一章——操作系统引论"></a>第一章——操作系统引论</h1><blockquote>
<p>搬运文章：<a href="https://blog.csdn.net/qq_41261490/article/details/80872072?utm_source=app" target="_blank" rel="noopener">操作系统（第四版）期末复习总结（上）</a></p>
</blockquote>
<h2 id="1-操作系统是什么？"><a href="#1-操作系统是什么？" class="headerlink" title="1. 操作系统是什么？"></a>1. 操作系统是什么？</h2><blockquote>
<p>操作系统为用户完成所有“硬件相关，应用无关“的工作，以给用户方便、高效、安全的使用环境。</p>
</blockquote>
<h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p>​    操作系统是一个大型的<strong>程序系统</strong>，它负责计算机的<strong>全部软、硬件资源的分配</strong>、<strong>调度</strong>工作，<strong>控制并协调多个任务的活动</strong>，实现<strong>信息的存取和保护</strong>。它提供<strong>用户接口</strong>，使用户获得良好的工作环境。</p>
<h3 id="1-2-目标"><a href="#1-2-目标" class="headerlink" title="1.2 目标"></a>1.2 目标</h3><ul>
<li><strong>方便性：</strong>配置OS后计算机系统更容易使用</li>
<li><strong>有效性：</strong>改善资源利用率；提高系统 吞吐量</li>
<li><strong>可扩充性</strong>：OS的结构（如层次化的结构：无结构发展-&gt;模快化结构-&gt;层次化结构-&gt;<strong>微内核</strong>结构）【微内核后续解释】</li>
<li><strong>开放性：</strong>OS遵循世界标准范围。</li>
</ul>
<h3 id="1-3-作用"><a href="#1-3-作用" class="headerlink" title="1.3 作用"></a>1.3 作用</h3><h4 id="1-3-1-OS作为用户与计算机硬件系统之间的接口"><a href="#1-3-1-OS作为用户与计算机硬件系统之间的接口" class="headerlink" title="1.3.1 OS作为用户与计算机硬件系统之间的接口"></a>1.3.1 OS作为用户与计算机硬件系统之间的接口</h4><p>如API／CUI／GUI</p>
<p>即：OS处于用户与计算机硬件系统之间，用户通过OS来使用计算机系统。</p>
<h4 id="1-3-2-OS是计算机系统资源的管理者"><a href="#1-3-2-OS是计算机系统资源的管理者" class="headerlink" title="1.3.2  OS是计算机系统资源的管理者"></a>1.3.2  OS是计算机系统资源的管理者</h4><ul>
<li><p><strong>处理机</strong>管理是用于分配和控制处理机</p>
</li>
<li><p><strong>存储器</strong>管理是负责内存的分配与回收</p>
</li>
<li><p><strong>I/O设备</strong>管理是负责I/O设备的分配（回收）与操纵</p>
</li>
<li><p><strong>文件</strong>管理是用于实现文件的存取、共享和保护</p>
</li>
</ul>
<h4 id="1-3-3-OS实现了对计算机资源的抽象"><a href="#1-3-3-OS实现了对计算机资源的抽象" class="headerlink" title="1.3.3 OS实现了对计算机资源的抽象"></a>1.3.3 OS实现了对计算机资源的抽象</h4><h2 id="2-操作系统的发展过程"><a href="#2-操作系统的发展过程" class="headerlink" title="2. 操作系统的发展过程"></a>2. 操作系统的发展过程</h2><h3 id="2-1-未配置操作系统的计算机系统（40年代-手工操作阶段）"><a href="#2-1-未配置操作系统的计算机系统（40年代-手工操作阶段）" class="headerlink" title="2.1 未配置操作系统的计算机系统（40年代 手工操作阶段）"></a>2.1 未配置操作系统的计算机系统（40年代 手工操作阶段）</h3><ul>
<li>工作方式：<ul>
<li>用户：用户既是程序员，又是操作员；用户是计算机专业人员</li>
<li>编程语言：为机器语言</li>
<li>输入输出：纸带或卡片</li>
</ul>
</li>
<li>计算机的工作特点：<ul>
<li>用户独占全机：不出现资源被其他用户占用，资源利用率低</li>
<li>CPU等待用户：计算前，手工装入纸带或卡片；计算完成后，手工卸取纸带或卡片；CPU利用率低</li>
</ul>
</li>
<li>缺点：<ul>
<li>手工装卸、人工判断、手工修改与调试内存指令等造成CPU空闲；</li>
<li>提前完成造成剩余预约时间内的CPU完全空闲；</li>
<li>I/O设备的慢速与CPU的速度不匹配造成的CPU空闲等待时间</li>
</ul>
</li>
</ul>
<p><strong>简言之，资源利用率低；CPU利用率低</strong></p>
<h3 id="2-2-单道批处理系统（50年代）"><a href="#2-2-单道批处理系统（50年代）" class="headerlink" title="2.2 单道批处理系统（50年代）"></a>2.2 单道批处理系统（50年代）</h3><blockquote>
<p>单道批处理系统是在<strong>解决人机矛盾和CPU与I/O设备速度不匹配矛盾</strong>的过程中形成的。批处理系统旨在<strong>提高系统资源的利用率和系统的吞吐量</strong>。（但单道批处理系统仍不能充分利用资源，故现在已很少用）</p>
</blockquote>
<h4 id="2-2-1-联机批处理"><a href="#2-2-1-联机批处理" class="headerlink" title="2.2.1 联机批处理"></a>2.2.1 联机批处理</h4><blockquote>
<p>I/O设备与主机直接连接，CPU直接控制作业输入输出</p>
</blockquote>
<ul>
<li><strong>优点：</strong>解决了作业的自动转接，减少了人工操作时间</li>
<li><strong>问题：</strong>作业输入和结果输出过程中，CPU处于等待状态</li>
<li><strong>解决：</strong>增加一台不与主机直接相连而专门与I/O设备交换信息的卫星机（<strong>脱机批处理</strong>）</li>
</ul>
<h4 id="2-2-2-脱机批处理"><a href="#2-2-2-脱机批处理" class="headerlink" title="2.2.2 脱机批处理"></a>2.2.2 脱机批处理</h4><blockquote>
<p>增加一台不与主机直接相连而专门与I/O设备交换信息的卫星机，由卫星机控制作业输入输出</p>
</blockquote>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200706000357598.png" alt="脱机批处理"></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200706000427605.png" alt="indicate" title="">
                </div>
                <div class="image-caption">indicate</div>
            </figure>



<ul>
<li><p>缺点：系统资源利用率低（<strong>因为内存中只存在一道程序，I/O请求成功前CPU都处于空闲状态</strong>）</p>
</li>
<li><p>特征：</p>
<ul>
<li><strong>自动性：</strong>正常情况下，一批作业能自动依次运行，无需人工干预</li>
<li><strong>顺序性：</strong>各道作业是顺序进入内存</li>
<li><strong>单道性：</strong>内存中任何时候只能有一道作业</li>
</ul>
</li>
</ul>
<h3 id="2-3-多道批处理系统（60年代初）"><a href="#2-3-多道批处理系统（60年代初）" class="headerlink" title="2.3 多道批处理系统（60年代初）"></a>2.3 多道批处理系统（60年代初）</h3><blockquote>
<p>单道运行每次只调一个用户作业程序进入内存并运行，CPU利用率低，为了进一步提高资源利用率和系统吞吐量，引入多道批处理</p>
</blockquote>
<p><strong>多道程序</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200706133354742.png" alt="多道批处理" title="">
                </div>
                <div class="image-caption">多道批处理</div>
            </figure> 

<ul>
<li><p>优点：</p>
<ul>
<li><strong>资源利用率高</strong>（资源指CPU、存储器、设备、数据）</li>
<li><strong>系统吞吐量大</strong>（系统吞吐量指系统在单位时间完成的总工作量（作业数量））</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li>平均周转时间长（作业的周转时间是指从作业进入系统开始，直至其完成并退出系统为止所经历的时间），<strong>短作业的周转时间显著增长</strong></li>
<li>无交互能力，<strong>整个作业完成后或中间出错时，才与用户交互，不利于调试和修改</strong></li>
</ul>
</li>
<li><p>特点：</p>
<ul>
<li><strong>多道：</strong>内存同时存在多个作业</li>
<li><strong>宏观上并行：</strong>同时有多道程序在内存运行，某一时间段上，各道程序不同程度地向前推进</li>
<li><strong>微观上串行：</strong>任一时刻最多只有一道作业占用CPU，多道程序交替使用CPU </li>
</ul>
</li>
</ul>
<p><strong>在当前运行的作业需作I/O处理时，CPU转而执行另一个作业</strong></p>
<p><strong>单道批处理系统与多道批处理系统的特点比较：</strong></p>
<table>
<thead>
<tr>
<th></th>
<th><strong>单道批处理系统</strong></th>
<th><strong>多道批处理系统</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>内存中驻留程序数目</strong></td>
<td><strong>一道</strong></td>
<td><strong>多道</strong></td>
</tr>
<tr>
<td><strong>占用CPU的情况</strong></td>
<td><strong>独占</strong></td>
<td><strong>交替占用</strong></td>
</tr>
<tr>
<td><strong>是否需要作业和进程调度</strong></td>
<td><strong>不需要</strong></td>
<td><strong>需要</strong></td>
</tr>
<tr>
<td><strong>程序完成次序与其进入内存次序间的关系</strong></td>
<td><strong>严格对应</strong></td>
<td><strong>不严格对应</strong></td>
</tr>
</tbody></table>
<ul>
<li><p>相关技术问题：</p>
<ul>
<li><strong>处理机管理问题：</strong>如何分配，使CPU满足要求</li>
<li><strong>内存管理问题：</strong>为每道程序分配内存空间</li>
<li><strong>I/O设备管理问题：</strong>如何分配<strong>I/O</strong>设备</li>
<li><strong>文件管理问题：</strong>如何组织程序和数据</li>
<li><strong>作业管理问题：</strong>如何组织作业</li>
</ul>
</li>
</ul>
<h3 id="2-4-分时系统（60年代中）"><a href="#2-4-分时系统（60年代中）" class="headerlink" title="2.4 分时系统（60年代中）"></a>2.4 分时系统（60年代中）</h3><blockquote>
<p>分时系统是指在一台主机上连接多个带有显示器和键盘的终端，同时允许多个用户通过自己的键盘，以交互的方式使用计算机，<strong>分时共享硬件和软件资源。</strong></p>
</blockquote>
<h4 id="2-4-1-分时的定义"><a href="#2-4-1-分时的定义" class="headerlink" title="2.4.1 分时的定义"></a>2.4.1 分时的定义</h4><p><strong>分时的定义：</strong> 把计算机的系统资源（尤其是<strong>CPU时间</strong>）进行时间上的分割，每个时间段称为一个<strong>时间片</strong>（time slice），每个用户依次轮流使用时间片。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200706150632805.png" alt="分时系统" title="">
                </div>
                <div class="image-caption">分时系统</div>
            </figure>

<ul>
<li><p>关键问题：</p>
<ul>
<li><strong>通常按时间片分配：</strong>各个程序在<strong>CPU</strong>上执行的轮换时间。把处理器的运行时间分成很短的时间片，按<strong>时间片</strong>轮流把处理机分配给各作业使用。</li>
<li><strong>多个用户分时：</strong>单个用户使用计算机的效率低，因而允许多个应用程序同时在内存中，分别服务于不同的用户</li>
<li><strong>前台和后台程序分时：</strong>后台程序不占用终端输入输出，不与用户交互——现在的图形用户界面（GUI），除当前交互的程序（输入焦点）之外，其他程序均作为后台</li>
</ul>
</li>
<li><p>特点：</p>
<ul>
<li><strong>人机交互性：</strong>用户可以通过终端与系统进行广泛的对话</li>
<li><strong>多路性：</strong>允许在一台主机上同时连接多台联机终端，系统按分时原则为每个用户服务</li>
<li><strong>用户独立性：</strong>对每个用户而言好像独占主机，每个用户各占一个终端，彼此独立工作</li>
<li><strong>及时性：</strong>用户的请求在很短的时间内能够获得响应</li>
</ul>
</li>
</ul>
<p><strong>现在的许多操作系统都具有分时处理的功能，在分时系统的基础上，操作系统的发展开始分化，如实时系统、通用系统、个人系统等。</strong></p>
<h3 id="2-5-实时操作系统"><a href="#2-5-实时操作系统" class="headerlink" title="2.5 实时操作系统"></a>2.5 实时操作系统</h3><blockquote>
<p> 实时系统（Real－Time System）是指系统能<strong>及时响应外部事件的请求</strong>，在规定的时间内完成对该事件的处理，并控制所有实时任务协调一致地运行。</p>
</blockquote>
<p><strong>实时操作系统有硬实时和软实时之分：</strong></p>
<ul>
<li><p>硬实时要求在规定的时间内必须完成操作，这是在操作系统设计时保证的</p>
</li>
<li><p>软实时则只要按照任务的优先级，尽可能快地完成操作即可</p>
</li>
</ul>
<p><strong>实时系统与分时系统特征的比较：</strong></p>
<ul>
<li><p><strong>设计目标：</strong>分时系统为给多用户提供通用的交互型开发运行环境，实时系统为特殊用途提供专用系统</p>
</li>
<li><p><strong>交互性：</strong>分时系统交互性强，实时系统较弱</p>
</li>
<li><p><strong>响应时间：</strong>分时系统以用户能够接受的响应时间为准，实时系统与受控对象及应用场合有关</p>
</li>
</ul>
<h3 id="2-6-操作系统的进一步发展"><a href="#2-6-操作系统的进一步发展" class="headerlink" title="2.6 操作系统的进一步发展"></a>2.6 操作系统的进一步发展</h3><ul>
<li><p>通用操作系统</p>
<blockquote>
<p>如果一个操作系统兼有批处理、分时或实时处理的全部或两种功能，该操作系统为通用操作系统</p>
</blockquote>
</li>
<li><p>微内核操作系统</p>
<p>采用微内核结构：提供基本支持功能的<strong>内核很小</strong>，大部分功能由内核之外的服务程序完成——<strong>进程（线程）管理</strong>、<strong>低级存储管理</strong>、<strong>中断和陷入管理</strong>、<strong>进程通信</strong></p>
</li>
<li><p>网络操作系统</p>
<blockquote>
<p>能够控制计算机在网络中方便地传送信息和共享资源，并能为网络用户提供各种所需的服务</p>
</blockquote>
<ul>
<li>功能：<ul>
<li><strong>网络通信：</strong>在源计算机和目标计算机之间实现无差错的数据传送</li>
<li><strong>资源管理：</strong>对网络中的硬、软件资源实施管理</li>
<li><strong>网络管理：</strong>安全控制、性能监测、维护功能</li>
<li><strong>网络服务：</strong>如e-mail、文件传输、共享设备服务、远程作业录入等</li>
</ul>
</li>
</ul>
</li>
<li><p>分布式操作系统</p>
<blockquote>
<p><strong>集中式计算机系统：</strong>处理和控制能力都高度集中在一台计算机上，所有任务均由它完成。</p>
<p><strong>分布式计算机系统：</strong>由多台分散的计算机经互联网络连接而成的系统，各台计算机没有主从之分。任何工作都可以分布在几台计算机上，由它们并行工作、协同完成。</p>
</blockquote>
<p><strong>分布式计算机系统与单机集中式操作系统区别：</strong></p>
<ul>
<li><strong>进程通信：</strong>集中式简单，分布式涉及机构、规程和路径算法</li>
<li><strong>资源管理：</strong>集中式，一类资源由一个管理程序管理；分布式，一类资源由多个管理程序管理，这些程序必须协调一致工作</li>
<li><strong>系统结构：</strong>分布式，有若干相对独立的部分，分布在各台计算</li>
</ul>
</li>
<li><p>嵌入式操作系统</p>
<blockquote>
<p>运行在嵌入式（计算机）环境中、对整个系统及所有操作的各种部件、装置等资源进行统一协调、处理、指挥和控制的系统软件</p>
</blockquote>
<p>特点：</p>
<ul>
<li><strong>微型化：</strong>内存少（<strong>1M</strong>以内）、无外存、微处理器字长短（<strong>8b</strong>、<strong>16b</strong>）、运行速度有限、能提供的能源少、外设千变万化</li>
<li><strong>可定制：</strong>能运行在不同微处理器平台上，能针对硬件变化进行结构与功能上的配置</li>
<li><strong>实时性：</strong>硬实时、软实时、非实时</li>
<li><strong>开发环境：</strong>通常提供代码编辑器、编译器和链接器、程序调试器、系统配置器和系统仿真器</li>
</ul>
</li>
<li><p>智能化操作系统</p>
</li>
</ul>
<h2 id="3-操作系统的功能"><a href="#3-操作系统的功能" class="headerlink" title="3. 操作系统的功能"></a>3. 操作系统的功能</h2><h3 id="3-1-处理器管理"><a href="#3-1-处理器管理" class="headerlink" title="3.1 处理器管理"></a>3.1 处理器管理</h3><ul>
<li><p>完成<strong>处理机资源的分配、调度和回收</strong>等功能。处理机调度的单位可为<strong>进程</strong>或<strong>线程</strong>。</p>
</li>
<li><p>由于处理机调度策略不同，出现不同类型的操作系统，如批处理系统、分时系统、实时系统</p>
</li>
</ul>
<h3 id="3-2-存储管理"><a href="#3-2-存储管理" class="headerlink" title="3.2 存储管理"></a>3.2 存储管理</h3><blockquote>
<p><strong>管理目标：</strong>提高利用率、方便用户使用、提供足够的存储空间、方便进程并发运行。内存的分配、保护和扩充。</p>
</blockquote>
<ul>
<li><p><strong>存储器分配与回收</strong></p>
</li>
<li><p><strong>地址映射（变换）：</strong>逻辑地址到内存物理地址映射</p>
</li>
<li><p><strong>存储保护：</strong>保证进程间互不干扰、相互保密</p>
</li>
<li><p><strong>内存扩充（覆盖、交换和虚拟存储）：</strong>提高内存利用率、扩大进程的内存空间</p>
</li>
</ul>
<h3 id="3-3-设备管理"><a href="#3-3-设备管理" class="headerlink" title="3.3 设备管理"></a>3.3 设备管理</h3><blockquote>
<p><strong>管理目标：</strong>方便设备的使用、提高<strong>CPU</strong>与<strong>I/O</strong>设备利用率</p>
</blockquote>
<ul>
<li><p><strong>设备操作：</strong>利用设备驱动程序完成对设备的操作</p>
</li>
<li><p><strong>设备独立性(device independence)：</strong>提供统一的<strong>I/O</strong>设备接口，使应用程序独立于物理设备，提高可适应性；在同样的接口和操作下完成不同的内容</p>
</li>
<li><p><strong>设备分配与回收：</strong>在多用户间共享<strong>I/O</strong>设备资源</p>
</li>
<li><p><strong>缓冲区管理：</strong>匹配<strong>CPU</strong>和外设的速度，提高两者的利用率。主机与外设并行</p>
</li>
</ul>
<h3 id="3-4-信息管理"><a href="#3-4-信息管理" class="headerlink" title="3.4 信息管理"></a>3.4 信息管理</h3><blockquote>
<p><strong>管理目标：</strong>解决软件资源的存储、共享、保密和保护</p>
</blockquote>
<ul>
<li><p><strong>文件存储空间管理：</strong>解决如何存放信息，以提高空间利用率和读写性能</p>
</li>
<li><p><strong>目录管理：</strong>解决信息检索问题。文件的属性（如文件名）、单一副本赋予多文件名</p>
</li>
<li><p><strong>文件的读写管理和存取控制：</strong>解决信息安全问题。系统设口令 “哪个用户”、用户分类 “哪个用户组”、文件权限 “针对用户或用户组的读写权”</p>
</li>
</ul>
<h3 id="3-5-用户接口"><a href="#3-5-用户接口" class="headerlink" title="3.5 用户接口"></a>3.5 用户接口</h3><blockquote>
<p><strong>管理目标：</strong>提供一个友好的用户访问操作系统的接口。操作系统向上提供两种接口</p>
</blockquote>
<ul>
<li><p><strong>系统命令：</strong>供用户用于组织和控制自己的作业运行。命令行、菜单式或<strong>GUI “联机”</strong> ；命令脚本 <strong>“脱机”</strong></p>
</li>
<li><p><strong>编程接口：</strong>供用户程序和系统程序调用操作系统功能。系统调用和高级语言库函数</p>
</li>
<li><p>通过这些命令和调用，向OS提出申请，由OS调用内部功能来完成</p>
</li>
</ul>
<h2 id="4-操作系统的特征"><a href="#4-操作系统的特征" class="headerlink" title="4. 操作系统的特征"></a>4. 操作系统的特征</h2><h3 id="4-1-并发（concurrency）"><a href="#4-1-并发（concurrency）" class="headerlink" title="4.1 并发（concurrency）"></a>4.1 并发（concurrency）</h3><blockquote>
<p><strong>并发性：</strong>并发是指在内存中放多道作业， 在一个时间段上来看，每一道作业都能不同程度地向前推进。但在任何一个时间点上只能有一道占用CPU。</p>
</blockquote>
<ul>
<li><strong>并发：</strong>又称<strong>伪并行</strong>，指多个事件在<strong>同一时间</strong>段内发生。操作系统是一个并发系统，各进程间的并发，系统与应用间的并发。操作系统要完成这些并发过程的管理。</li>
<li><strong>并行：</strong>是指在<strong>同一时刻</strong>发生，指当系统有<strong>一个以上CPU</strong>时，一个CPU执行一个进程，另一个CPU执行另一个进程，两者互不干涉，互不抢占资源，同时进行</li>
</ul>
<hr>
<ul>
<li><strong>串行：</strong>在内存中每次只能放一道作业，只有它完全执行完后别的作业才能进入内存执行。</li>
<li>*<em>并行： *</em>存在于有多个CPU的环境中， 在内存中放多道作业，在任一时间点上都可能有多道作业在不同的CPU上同时执行。 </li>
</ul>
<h3 id="4-2-共享（sharing）"><a href="#4-2-共享（sharing）" class="headerlink" title="4.2 共享（sharing）"></a>4.2 共享（sharing）</h3><blockquote>
<p>多个进程共享有限的计算机系统资源。操作系统要对系统资源进行合理分配和使用。<strong>资源在一个时间段内交替被多个进程所用</strong></p>
</blockquote>
<ul>
<li><p><strong>互斥共享</strong>（如音频设备、打印机）：资源分配后到释放前，不能被其他进程所用</p>
</li>
<li><p><strong>同时访问</strong>（如磁盘文件）：一个时间段内同时资源分配难以达到最优化</p>
</li>
</ul>
<hr>
<p><strong>并发和共享是OS的两个最基本的特性，二者互为条件！</strong></p>
<hr>
<h3 id="4-3-虚拟（virtual）"><a href="#4-3-虚拟（virtual）" class="headerlink" title="4.3 虚拟（virtual）"></a>4.3 虚拟（virtual）</h3><blockquote>
<p>一个物理实体映射为若干个对应的逻辑实体——采用<strong>时分复用（分时使用）</strong>或<strong>空分复用（分空间使用）</strong></p>
</blockquote>
<p><strong>虚拟是操作系统管理系统资源的重要手段，可提高资源利用率：</strong></p>
<ul>
<li><strong>CPU</strong>——每个用户（进程）的“虚处理机”。利用多道处理技术，多道程序并发执行，分时使用一台处理机。</li>
<li><strong>存储器</strong>——每个进程都占有的地址空间（指令＋数据＋堆栈）（空分复用存储器）“虚拟存储器”。虚拟存储技术——内存分时复用，一道程序通过时分复用内存，可以在远小于它的内存空间运行。</li>
<li><strong>显示设备</strong>——多窗口或虚拟终端（virtual terminal）</li>
<li><strong>独享设备</strong>—— 假脱机技术（Spooling），虚设备</li>
</ul>
<h3 id="4-4-异步性（asynchronism）"><a href="#4-4-异步性（asynchronism）" class="headerlink" title="4.4 异步性（asynchronism）"></a>4.4 异步性（asynchronism）</h3><blockquote>
<p>也称<strong>不确定性</strong>：指进程的执行顺序和执行时间的不确定性</p>
</blockquote>
<ul>
<li><p><strong>进程的运行速度不可预知：</strong>分时系统中，多个进程并发执行，“时走时停”，不可预知每个进程的运行推进快慢</p>
</li>
<li><p>难以重现系统在某个时刻的状态（包括重现运行中的错误）</p>
</li>
<li><p>无论快慢，应该结果相同——通过进程互斥和同步手段来保证</p>
</li>
<li><p>因为不确定性，在设计<strong>OS</strong>时，要充分考虑各种<strong>可能性</strong>，以便稳定、安全、高效地达到并发和资源共享</p>
</li>
</ul>
<h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200706170351956.png" alt="summary" title="">
                </div>
                <div class="image-caption">summary</div>
            </figure>



]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>概率论和数理统计</title>
    <url>/2020/06/14/%E8%80%83%E7%A0%94%E7%A7%91%E7%9B%AE/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%92%8C%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="概率论和数理统计"><a href="#概率论和数理统计" class="headerlink" title="概率论和数理统计"></a>概率论和数理统计</h1><h2 id="1-随机事件与概率"><a href="#1-随机事件与概率" class="headerlink" title="1. 随机事件与概率"></a>1. 随机事件与概率</h2><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200816152603592.png" alt="image-20200816152603592"></p>
<h2 id="2-一维随机变量及分布"><a href="#2-一维随机变量及分布" class="headerlink" title="2.一维随机变量及分布"></a>2.一维随机变量及分布</h2><h2 id="3-多维随机变量及分布"><a href="#3-多维随机变量及分布" class="headerlink" title="3. 多维随机变量及分布"></a>3. 多维随机变量及分布</h2><ul>
<li>二维正太</li>
</ul>
<h2 id="4-随机变量的数字特征"><a href="#4-随机变量的数字特征" class="headerlink" title="4. 随机变量的数字特征"></a>4. 随机变量的数字特征</h2><ul>
<li><p>二维正太分布的<strong>不相关和独立对等</strong></p>
<ul>
<li>(X, Y)二维正太分布，则X，Y均正太；反过来不一定</li>
<li>(X, Y)二维正太分布，当 ad≠bc时，则（aX + bY）*（cX + dY）也服从二维正太分布</li>
<li>(X, Y)二维正太分布，当 a^2 + b^2 ≠ 0时，aX + bY必正太</li>
</ul>
</li>
<li><p>协方差公式：</p>
<ul>
<li><p>cov(X, Y) =E{ [X-EX] * [Y-EY] }   【定义式】</p>
</li>
<li><p>cov(X, Y) = E(XY) - EX*EY           【常用计算公式】</p>
</li>
<li><p>cov(X, Y) = cov(Y, X)</p>
</li>
<li><p>cov(X, X) = D(X)</p>
</li>
<li><p>cov(X1 + X2, Y) = cov(X1, Y) + cov(X2, Y)</p>
</li>
<li><p>cov(X1 + c, Y) = cov(X1, Y)     【c 为常数】</p>
</li>
<li><p>cov(aX + c, bY + d) = ab*cov(X, Y)       【a，b，c，d为常数】</p>
</li>
</ul>
</li>
<li><p>常用分布的期望和方差，<strong>一定要会推导，特别是涉及级数的，例如泊松分布</strong></p>
<ul>
<li>0-1分布：</li>
</ul>
</li>
<li><p><strong>奇函数在无穷域积分</strong>：当函数在[0, +∞)收敛，则积分为0；反之积分发散</p>
</li>
</ul>
<h2 id="5-大数定律和中心极限定理"><a href="#5-大数定律和中心极限定理" class="headerlink" title="5. 大数定律和中心极限定理"></a>5. 大数定律和中心极限定理</h2><ul>
<li>切比雪夫不等式</li>
<li>大数定律：<ul>
<li>切比雪夫大数定律：根据切比雪夫不等式证明切比雪夫大数定律</li>
<li>伯努利大数定律</li>
<li>辛钦大数定律</li>
</ul>
</li>
<li>中心极限定理：<ul>
<li>棣莫弗—拉普拉斯中心极限定理</li>
<li>列维—林德伯格中心极限定理</li>
</ul>
</li>
</ul>
<h2 id="6-数理统计"><a href="#6-数理统计" class="headerlink" title="6.  数理统计"></a>6.  数理统计</h2><h3 id="6-1-数理统计知识点"><a href="#6-1-数理统计知识点" class="headerlink" title="6.1 数理统计知识点"></a>6.1 数理统计知识点</h3><ul>
<li><p><strong>伽马函数</strong></p>
</li>
<li><p>统计量是<strong>样本的函数，且函数不含未知参数</strong></p>
</li>
<li><p><strong>常用统计量的数字特征：</strong></p>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200630193815427.png" alt="常用统计量的数字特征"></p>
<ul>
<li>要记住样本方差除以的是 n-1</li>
</ul>
</li>
<li><p><strong>三大抽样分布：</strong></p>
<ul>
<li><p>卡方分布</p>
<ul>
<li>卡方分布是n个<strong>独立</strong>的标准正方分布随机变量的平方和</li>
<li>卡方分布的期望等于自由度n，方差等于两倍自由度2n</li>
<li>卡方分布具有可加性，即X服从自由度为m的卡方分布，Y服从自由度为n的卡方分布，<strong>X和Y独立</strong>，则X+Y服从m+n的卡方分布</li>
<li><strong>标准正太分布</strong>的平方，服从自由度为1的卡方分布，期望为1，方差为2</li>
</ul>
</li>
<li><p>t分布</p>
<ul>
<li><p>X服从标准正太分布，Y服从自由度为n的卡方分布，<strong>且X和Y独立</strong>，则下式服从自由度为n的t分布</p>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200630193834133.png" alt="t分布"></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>t分布的概率密度函数是一个偶函数，即以y轴对称</p>
</li>
<li><p>F分布</p>
<ul>
<li>设U服从自由度为n1的卡方分布，V服从自由度为n2的卡方分布，<strong>且U和V独立</strong>，则</li>
</ul>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200630193853911.png" alt="F分布"></p>
<p>​        服从自由度为(n1, n2)的F分布，记为 F ~ F(n1, n2)</p>
<ul>
<li>F服从F(n1, n2)分布，则1/F则服从F(n2, n1)<ul>
<li>若T服从自由度为n的t分布，则T^2服从F(1, n)分布</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>记住每个分布的形式，凑分布时可以直接写答案：卡方分布是平方和，t分布涉及根号，F分布涉及两个卡方分布</strong></p>
</li>
<li><p>分位点，是<strong>上侧</strong>还是<strong>下侧</strong></p>
</li>
<li><p><strong>单个正太总体的性质</strong></p>
<p>设X1、X2…、Xn是来自总体X~N(μ，σ^2)的样本，样本均值 /X，样本方差S^2（<strong>手写</strong>）</p>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200630183340266.png" alt="image-20200630183340266"></p>
<ul>
<li>3和4区别在于：3是不独立的，所以3服从n-1的卡方分布；而4是独立的，服从n的卡方分布</li>
<li>第5条可以由1，2，3证明</li>
<li>第6条可以由第3证明，【卡方分布的期望和方差】</li>
</ul>
</li>
<li><p>两个正太总体性质</p>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200630192238252.png" alt="两个正太总体性质"></p>
<ul>
<li>第1条就是用单个正太的样本方差性质 -&gt; 卡方分布</li>
<li>第2条就是卡方分布的可加性</li>
<li>第3条就是利用第2条，并将 /X - /Y标准变化；至于分子分母的独立性，运用单个正太的均值和方差独立</li>
</ul>
</li>
</ul>
<h3 id="6-2-做题技巧"><a href="#6-2-做题技巧" class="headerlink" title="6.2 做题技巧"></a>6.2 做题技巧</h3><ul>
<li>两个服从泊松分布的独立变量的叠加也服从泊松分布：<strong>X<del>P(λ)，Y</del>P(λ)，X+Y~P(2*λ)</strong></li>
<li>对于类似指数分布求期望或方差，可以使用定积分求原函数计算；而对于正太分布，<strong>还可以使用提因式凑标准化来求解</strong></li>
<li>复习一遍<strong>单个正太分布</strong>的性质：</li>
</ul>
<h2 id="7-参数估计"><a href="#7-参数估计" class="headerlink" title="7. 参数估计"></a>7. 参数估计</h2><h3 id="7-1-参数估计知识点"><a href="#7-1-参数估计知识点" class="headerlink" title="7.1 参数估计知识点"></a>7.1 参数估计知识点</h3><ul>
<li><p>点估计</p>
<ul>
<li><p>矩估计（很简单的，主要就是求<strong>期望</strong>）</p>
<p><strong>步骤：</strong></p>
<ul>
<li>1  求期望EX</li>
<li>2  令样本均值/X等于期望</li>
<li>3  求出θ，估计量</li>
<li>4  带入/X，得到估计值</li>
</ul>
</li>
<li><p>最大似然估计法</p>
<p>离散型的似然函数为<strong>样本值概率</strong>的乘积；连续性的<strong>似然函数为概率密度函数的乘积</strong>，<strong>而x换成xi</strong></p>
<p><strong>步骤：</strong></p>
<ul>
<li>1  写出似然函数，关于似然函数，分为离散型和连续性，见上。</li>
<li>2  对似然函数取对数</li>
<li>3  对θ求导</li>
<li>4  令导数为0，求出θ；若无解，则说明似然函数单调，根据定义，要求似然函数最大，即在边界取值</li>
</ul>
</li>
<li><p>估计量和估计值的区别：</p>
<ul>
<li>估计量一般用样本表示；估计值用样本值（观察值）表示</li>
<li>一定要注意最后求得是估计量还是估计值</li>
</ul>
</li>
</ul>
</li>
<li><p>估计量的评选标准</p>
<ul>
<li><p>无偏性</p>
<p>估计量/θ的期望 = θ，例如样本均值/X是μ的无偏估计量</p>
</li>
<li><p>有效性</p>
<p>两个无偏估计量，方差较小的有效</p>
</li>
<li><p>相合（一致）性</p>
<p>估计量/θ依概率收敛到θ，一般需要使用<strong>大数定律和切比雪夫不等式</strong>或者<strong>辛钦大数定律</strong></p>
</li>
</ul>
</li>
<li><p><strong>区间估计</strong></p>
<p>大概率只考单个正太总体的均值和方差</p>
</li>
</ul>
<h3 id="7-2-参数估计解题思路及遇到问题"><a href="#7-2-参数估计解题思路及遇到问题" class="headerlink" title="7.2 参数估计解题思路及遇到问题"></a>7.2 参数估计解题思路及遇到问题</h3><ul>
<li><p>几何分布：P(X = k) = (1-p)^k * p，其E(X) = 1/p，D(X) = (1-p^2)/p</p>
</li>
<li><p>关于点估计和最大似然估计的步骤：</p>
<p><strong>点估计：</strong></p>
<ol>
<li>求出E(X)；如果E(X)为0，则继续求E(X^2)；如果依然为0，继续求E(X^3)。一般最大只会求到三阶</li>
<li>根据上式的结果，如果求得E(X)，则让E(X平均) = E(X)；否则让二阶原点矩等于E(X^2)；否则让三阶原点矩等于E(X^3)</li>
<li>根据2的等式，求出参数的估计值或者估计量</li>
</ol>
<p><strong>最大似然估计：</strong></p>
<ol>
<li>假设样本X1，X2，…，Xn，其观察值为x1，x2，…，xn；写出似然函数</li>
<li>对似然函数取对数</li>
<li>对2等式求导</li>
<li>令导数为0，求得估计值</li>
<li>将观察值进行替换为样本，写出估计量</li>
</ol>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/56AF5F22311EE22A1F9F6D24455562DD.jpg" alt="参数估计例题"></p>
</li>
</ul>
<ul>
<li><p>当似然函数求导等于0无解时，即似然函数是单调的；所以<strong>参数估计值在端点取到最大值</strong>。</p>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/BCBEB2755B7001C7C80696AD6F60E463.jpg" alt=""></p>
</li>
</ul>
<ul>
<li><p>写似然函数时，一定要写<strong>Xi</strong></p>
</li>
<li><p>置信区间的做题步骤：</p>
<ol>
<li>根据对谁进行检验，参数是否已知，设出<strong>枢轴量</strong></li>
<li>列出概率表达式，查表得出<strong>分位点</strong></li>
<li>带入<strong>枢轴量</strong>和已知参数，求解出<strong>置信区间</strong></li>
</ol>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200710125407717.png" alt=""></p>
</li>
</ul>
<ul>
<li><strong>对估计量求期望或者方差时，结果需要用该参数表示</strong></li>
<li>矩估计时常用的积分：</li>
</ul>
<ul>
<li>辛钦大数定律的运用：<strong>辅导讲义P136</strong></li>
</ul>
<ul>
<li>求无偏估计的参数</li>
</ul>
<h2 id="8-假设检验"><a href="#8-假设检验" class="headerlink" title="8. 假设检验"></a>8. 假设检验</h2><ul>
<li>显著性检验的一般步骤：<ul>
<li>根据实际问题提出原假设H0和备择假设H1</li>
<li>给出显著检验水平α</li>
<li>确定检验统计量，以及对应的分布表值</li>
<li>根据原假设给出<strong>拒绝域形式</strong>，并求出拒绝域W</li>
<li>根据已知数据求出统计量的观察值w，当k∈W时，拒绝原假设H0；否则接受原假设H0</li>
</ul>
</li>
<li>抽取过程中计算得到的方差是样本方差，不是σ^2，而是<strong>S^2</strong></li>
<li>t分布的概率密度函数是<strong>偶函数</strong></li>
<li>统计量的选择：</li>
<li>拒绝域形式：</li>
</ul>
]]></content>
      <categories>
        <category>考研</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>考研英语单词辨析</title>
    <url>/2020/07/09/%E8%80%83%E7%A0%94%E7%A7%91%E7%9B%AE/%E8%80%83%E7%A0%94%E5%8D%95%E8%AF%8D%E8%BE%A8%E6%9E%90/</url>
    <content><![CDATA[<h1 id="考研英语单词辨析"><a href="#考研英语单词辨析" class="headerlink" title="考研英语单词辨析"></a>考研英语单词辨析</h1><ul>
<li><strong>1.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">compliment 赞美，称赞	</span><br><span class="line">competent 胜任的，足够的，有能力的</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>2.</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">convice	 确信，使确信</span><br><span class="line">convict	 定罪；罪犯</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>3.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">elect	选举</span><br><span class="line">erect	竖直的；创立，建立</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>4.</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">temporary	短暂的，临时的</span><br><span class="line">temperate	温带的，温和的，节制的</span><br><span class="line">temperature	温度，提问</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>5.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">tomb	坟墓</span><br><span class="line">comb	梳子</span><br><span class="line">bomb	爆炸</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>6.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">suspcious		可疑的</span><br><span class="line">conspicuous		</span><br><span class="line">susceptible		易受影响的，易动感情的</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>7.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">inherent	本质的，固有的</span><br><span class="line">inherit		继承，获得</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>8.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">quality	   质量，品性</span><br><span class="line">qualify	   取得资格	</span><br><span class="line">qualification   资格证明，资格，条件</span><br><span class="line">qualitative		性质的，定性的</span><br><span class="line"></span><br><span class="line">quantity   数量</span><br><span class="line">quantify   量化</span><br><span class="line">quantitative	定量的</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>9.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">diversion	n 转移，消遣，娱乐</span><br><span class="line">divorce		n/v 离婚，分开，分离</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>10.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">skip	跳过</span><br><span class="line">slip	滑倒，溜走</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>11.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">scare	惊恐；使害怕</span><br><span class="line">scarf	围巾；嵌接；狼吞虎咽地吃</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>12.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">crash	猛冲直撞；碰撞，崩溃</span><br><span class="line">crush	挤压；碾碎；迷恋；拥挤的人群</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>13.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">expect	期待，期望</span><br><span class="line">expert	专家；内行的</span><br><span class="line">except	除外</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>14.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">staple	主要的；订书钉；主要产品</span><br><span class="line">stable	稳定的，稳固的；组织</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>15.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vesion		视野；想象</span><br><span class="line">version		版本，译本</span><br><span class="line">preversion	预防</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>16.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">distort	扭曲，歪曲</span><br><span class="line">retort	顶嘴，反驳</span><br><span class="line">resort  求助；度假胜地</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>17.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">accident</span><br><span class="line">incident</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>18.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">repel	排斥，驱逐，赶走</span><br><span class="line">rebel	反抗，造反</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>19.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">inhibit	约束，抑制</span><br><span class="line">inhabit	居住，栖息</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>20.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">fertile	肥沃的，多产的</span><br><span class="line">futile	无用的，徒劳的</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>21.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">precede		先于，领先，优于</span><br><span class="line">precise		准确的</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>22.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">irritate	激怒，刺激</span><br><span class="line">irrigate	灌溉，冲洗</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>23.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">emigrate	移居外国</span><br><span class="line">immigrate	移民</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>24.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">kidnap	绑架</span><br><span class="line">kidney	肾，腰子；脾气</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>25.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vocation	职业</span><br><span class="line">vacation	假期</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>26.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">suspect		猜测，怀疑；嫌疑人，可疑的</span><br><span class="line">suspend		吊，悬，暂停</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>27.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">fourth	第四</span><br><span class="line">forth	向前，向外，露出</span><br><span class="line">froth	泡沫</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>28.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cheek	脸颊</span><br><span class="line">check	检查，制止</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>29.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">elephant	大象</span><br><span class="line">elegant		优雅的，讲究的</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>30.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">incur	招致，引起</span><br><span class="line">recur	重现</span><br><span class="line">occur	发生，出现</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>31.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">shutter		百叶窗，快门</span><br><span class="line">shatter		打碎</span><br><span class="line">shuttle		穿梭，梭子</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>32.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">era		时代，纪元</span><br><span class="line">ear		耳朵</span><br><span class="line"><span class="comment">/*	耳朵（ear）听到了时代（era）的召唤	*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>33.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">soap	肥皂</span><br><span class="line">soup	汤</span><br><span class="line">soul	灵魂</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>34.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">despite		尽管</span><br><span class="line">despair		绝望</span><br><span class="line">despise		鄙视，看不起</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>35.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">shallow		浅的，浅薄的</span><br><span class="line">shadow		影子</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>36.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">theater		剧院</span><br><span class="line">threat		威胁</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>37.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">moral		道德的</span><br><span class="line">mortal		凡人；极度的，致命的	（mortality：死亡人数，死亡率）</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>38.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">immense		巨大的</span><br><span class="line">immerse		沉浸于</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>39.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">precede		先于</span><br><span class="line">precise		准确的</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>40.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">angle	角度</span><br><span class="line">angel	天使</span><br><span class="line"><span class="comment">/*	天使是不完美的	*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>41.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">perceive	察觉</span><br><span class="line">conceive	构想；怀孕</span><br><span class="line">deceive		欺骗</span><br><span class="line">receive		接收</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>42.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">instinct	本能，直觉</span><br><span class="line">extinct		灭绝的</span><br><span class="line">distinct	有区别的；清晰的；明显的</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>43.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">adoptive	收养的</span><br><span class="line">adaptive	适应的</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>44.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">posture		姿势；作姿势</span><br><span class="line">pasture		牧场；放牧</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>45.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">never	从不</span><br><span class="line">nerve	勇气，胆量</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>46.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">conservation	保护</span><br><span class="line">conversation	谈话</span><br><span class="line">convenience		方便</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>47.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">break</span>	破坏</span><br><span class="line">brake	刹车</span><br><span class="line">brick	砖块</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>48.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">participant		参加者</span><br><span class="line">anticipate		期望，预料</span><br><span class="line">applicant		申请人</span><br><span class="line">application		应用</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>49.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">persistent	持续的，不断的</span><br><span class="line">president	总统</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>50.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">nation		民族</span><br><span class="line">notion		概念，想法</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>51.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">idea	想法</span><br><span class="line">ideal	理想的</span><br><span class="line">idle	懒惰的</span><br><span class="line">idol	偶像</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>52.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">arrow	箭头</span><br><span class="line">narrow	狭窄的</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>53.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vast	巨大的</span><br><span class="line">vase	花瓶</span><br><span class="line">vest	马甲，背心</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>54.</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">resist	抵抗</span><br><span class="line">assist	援助</span><br><span class="line">insist	坚持</span><br><span class="line">instant 立刻的，紧急的</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>考研</category>
      </categories>
      <tags>
        <tag>英语</tag>
      </tags>
  </entry>
  <entry>
    <title>考研科目/考研政治</title>
    <url>/2020/08/14/%E8%80%83%E7%A0%94%E7%A7%91%E7%9B%AE/%E8%80%83%E7%A0%94%E6%94%BF%E6%B2%BB/</url>
    <content><![CDATA[<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200814101713434.png" alt="image-20200814101713434" title="">
                </div>
                <div class="image-caption">image-20200814101713434</div>
            </figure>



<h3 id=""><a href="#" class="headerlink" title=""></a></h3><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200824103103647.png" alt="image-20200824103103647"></p>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200825104123869.png" alt="image-20200825104123869"></p>
<h3 id="土地改革线索"><a href="#土地改革线索" class="headerlink" title="土地改革线索"></a>土地改革线索</h3><ol>
<li>太平天国的<strong>天朝田亩制度</strong>：耕者有其田</li>
<li>三民主义中的<strong>民生主义</strong>：平均地权</li>
<li>新三民主义：平均地权，节制资本；后期提出 耕者有其田</li>
<li>土地革命（1927-1937兴国土地法）：耕者有其田（限制富农）</li>
<li>抗日战争土地政策：减租减息，<strong>削弱</strong>了封建土地剥削制度（允许富农收租）</li>
<li>土地改革（解放战争）：一般不变动富农或者征收富农多余土地，耕者有其田，<strong>废除</strong>了封建土地剥削制度</li>
</ol>
<h3 id="宪法线索"><a href="#宪法线索" class="headerlink" title="宪法线索"></a>宪法线索</h3><ol>
<li><p>清末新政<strong>钦定宪法大纲</strong></p>
</li>
<li><p>中华民国的<strong>中华民国临时约法</strong></p>
</li>
<li><p>袁世凯炮制的<strong>中华民国约法</strong></p>
</li>
<li><p>土地革命的<strong>中华苏维埃共和国宪法大纲</strong></p>
</li>
<li><p>建国前夕的<strong>中国人民政治协商会议共同纲领</strong>：临时宪法</p>
</li>
</ol>
<h3 id="两次大辩论"><a href="#两次大辩论" class="headerlink" title="两次大辩论"></a>两次大辩论</h3><h3 id="中共会议"><a href="#中共会议" class="headerlink" title="中共会议"></a>中共会议</h3><ol>
<li>中共一大：建党</li>
<li>中共二大：纲领</li>
<li>中共三大：决定联合国民党</li>
<li><strong>八七会议（1927）</strong>：大革命失败，旨在挽救革命挽救党</li>
<li><strong>遵义会议（1935）</strong>：解决了军事问题和组织问题，<strong>（并未解决政治路线和思想路线）</strong></li>
<li><font color = "red"><strong>瓦窑堡会议</strong></font>：抗日民族统一战线</li>
<li>洛川会议：全民族抗战</li>
<li>中共六届六中全会：毛泽东明确提出 “马克思主义的中国化” 命题</li>
<li>中共七大：马克思列宁主义和中国具体实际相结合的第一次飞跃，讲毛泽东思想确定为党的指导思想，写入党章</li>
<li>中共七届二中全会：党的工作重心必须由乡村转移到城市</li>
</ol>
<h3 id="毛泽东文章"><a href="#毛泽东文章" class="headerlink" title="毛泽东文章"></a>毛泽东文章</h3><ol>
<li>大革命时期：“国民革命与农民运动”</li>
<li>土地革命时期：<ol>
<li>《中国的红色政权为什么能够存在》和《井冈山的斗争》：论证了 <strong>红色政权能够长期存在并发展的主客观条件，提出了工农武装割据的思想</strong>。</li>
<li>《星星之火可以燎原》：</li>
<li><font color ="red"><strong>《反对本本主义》</strong></font>：提出“没有调查，没有发言权” 和 “中国革命斗争的胜利要靠中国同志了解中国情况”</li>
<li><font color = "blue"><strong>标志毛泽东思想的初步形成</strong></font>。</li>
</ol>
</li>
<li>长征后期迎接抗日战争：<ol>
<li>《论反对日本帝国主义的策略》：阐明党的抗日民族统战线的新策略,系统地解决了党的政治路线问题</li>
<li>《中国革命战争的战略问题》：总结土地革命战争中党内军事问题的大争论,系统地说明有关中国革命战争战略方面的诸问题</li>
<li><font color = "red"><strong>《矛盾论》《实践论》</strong></font>: 从马克思主义认识论的高论，总结中国共产党的历史经验，揭露了批评党内的主观主义尤其是教条主义错误，论证了马克思列宁主义基本原理同中国具体实际相结合的原则,科学地阐明了<strong>党的马克思主义思想路线</strong>。</li>
</ol>
</li>
<li>《论持久战》：</li>
<li>《中国革命和中国共产党》，《新民主主义论》：新民主主义的系统阐明标志毛泽东思想的成熟</li>
<li>《论人民民主专政》</li>
</ol>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200831095421666.png" alt="image-20200831095421666"></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200831095433475.png" alt="image-20200831095433475" title="">
                </div>
                <div class="image-caption">image-20200831095433475</div>
            </figure>

<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200831095501204.png" alt="image-20200831095501204" title="">
                </div>
                <div class="image-caption">image-20200831095501204</div>
            </figure>

<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200831095604375.png" alt="image-20200831095604375" title="">
                </div>
                <div class="image-caption">image-20200831095604375</div>
            </figure>



<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200903094557069.png" alt="image-20200903094557069"></p>
]]></content>
  </entry>
  <entry>
    <title>线性代数</title>
    <url>/2020/07/07/%E8%80%83%E7%A0%94%E7%A7%91%E7%9B%AE/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/</url>
    <content><![CDATA[<h1 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h1><h2 id="1-行列式"><a href="#1-行列式" class="headerlink" title="1. 行列式"></a>1. 行列式</h2><h3 id="1-1-知识点"><a href="#1-1-知识点" class="headerlink" title="1.1 知识点"></a>1.1 知识点</h3><ul>
<li><p>二阶行列式是由两个2维向量组成的，其（运算规则的）结果为以这两个向量为邻边的平行四边形的面积</p>
</li>
<li><p>三阶行列式是由三个个3维向量组成的，其（运算规则的）结果为以这三个向量为邻边的平行六面体的体积</p>
</li>
<li><p>n阶行列式是由n个n维向量组成的，其（运算规则的）结果为以这n个向量为邻边的n维图形的体积</p>
</li>
<li><p><strong>行列式的单行可拆性：</strong></p>
<ul>
<li>行列式中某行（列）元素均是两个元素之和，则可拆成两个行列式之和</li>
<li>如果两个行列式的其他元素对应相等，只有一行（列）不同时，可以相加，相加时其他元素不变，不同元素的行（列）对象相加即可。</li>
</ul>
</li>
<li><p>余子式和代数余子式的关系：<strong>Aij = （-1）^(i+j) * Mij</strong></p>
</li>
<li><p><strong>几个重要的行列式：</strong></p>
<ul>
<li>主对角线行列式：主对角线元素乘积</li>
<li>副对角线行列式：副对角线元素乘积 * <strong>(-1)^[n(n-1)/2]</strong></li>
<li>拉普拉斯展开式：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">设A为m阶矩阵，B为n阶矩阵：</span><br><span class="line">| A  O |   | A  C |   | A  O |</span><br><span class="line">|      | = |      | = |      | = |A| * |B|</span><br><span class="line">| O  B |   | O  B |   | C  B | </span><br><span class="line">    </span><br><span class="line">| O  A |   | C  A |   | O  A |</span><br><span class="line">|      | = |      | = |      | = <span class="number">-1</span>^(m*n) * |A| * |B|</span><br><span class="line">| B  O |   | B  O |   | B  C |</span><br></pre></td></tr></table></figure>

<ul>
<li><p>范德蒙德行列式：</p>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200716235115866.png" alt="image-20200716235115866"></p>
<p>只需要看第二行，结果等于<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200716235137211.png" alt="image-20200716235137211" title="">
                </div>
                <div class="image-caption">image-20200716235137211</div>
            </figure></p>
<p><strong>巧记：高年级欺负低年级</strong></p>
</li>
</ul>
</li>
</ul>
<h3 id="1-2-相关解题技巧"><a href="#1-2-相关解题技巧" class="headerlink" title="1.2 相关解题技巧"></a>1.2 相关解题技巧</h3><h4 id="1-2-1-具体型行列式的计算"><a href="#1-2-1-具体型行列式的计算" class="headerlink" title="1.2.1 具体型行列式的计算"></a>1.2.1 具体型行列式的计算</h4><ul>
<li><p>化为基本型：</p>
<ul>
<li><p>直接展开：矩阵中含有足够多的0，或者矩阵阶数较低可以直接展开</p>
</li>
<li><p><strong>爪形：</strong></p>
<p>只有第一列，第一行及主对角线元素不为0，其余元素全为0的行列式为<strong>爪形行列式</strong></p>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/1B38EC7D02D8BDF2392B3BD32FD5125B.jpg" alt="A3300B061C5119D40ACF0219198B578D"></p>
<p><strong>做法：将对角线元素提取出来，使对角线元素为全为1，然后化为上三角或者下三角，即可</strong></p>
<p>本例题是左上爪形，对于其他方向的，操作类似。</p>
</li>
<li><p><strong>异爪形：</strong></p>
<p>非规则的爪形为<strong>异爪形行列式</strong></p>
<p><strong>异爪形式1：</strong>（<strong>按非零元素行进行展开</strong>）</p>
<ul>
<li><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/1B38EC7D02D8BDF2392B3BD32FD5125B.jpg" alt="1B38EC7D02D8BDF2392B3BD32FD5125B" title="">
                </div>
                <div class="image-caption">1B38EC7D02D8BDF2392B3BD32FD5125B</div>
            </figure>



</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre><code>**异爪形式2：**

![image-20200717231617467](https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200717231617467.png)

+ 方法1：看行与行之间是否存在关系，如果有，则利用倍加性质消0
+ 方法2：对行列式进行展开，**建立Dn和低阶行列式的关系**，如Dn和Dn-1的关系等等</code></pre><ul>
<li><p><strong>行（列）和相等：所有行（列）可加到第一列（行），提取公因式</strong></p>
</li>
<li><p>消零化基本形：消零化三角形</p>
</li>
<li><p>拉普拉斯展开</p>
<p><strong>做法：将大部分0放一堆，构成分块矩阵，根据拉普拉斯展开式原则计算</strong></p>
<p>![1B38EC7D02D8BDF2392B3BD32FD5125B - 副本](<a href="https://gitee.com/BambooWine/MyPhotos/raw/master/img/1B38EC7D02D8BDF2392B3BD32FD5125B" target="_blank" rel="noopener">https://gitee.com/BambooWine/MyPhotos/raw/master/img/1B38EC7D02D8BDF2392B3BD32FD5125B</a> - 副本.jpg)</p>
</li>
<li><p>范德蒙德行列式</p>
</li>
</ul>
<ul>
<li><p><strong>递推法（难点）</strong></p>
<ul>
<li>递推法主要运用于<strong>异爪形式2</strong>，建立Dn与Dn-1或者Dn-2等关系</li>
<li>对行列式进行展开，<strong>建立Dn和低阶行列式的关系</strong>，如Dn和Dn-1的关系等等 ，张宇36讲 <strong>P299</strong></li>
</ul>
</li>
<li><p>行列式表示的函数和方程：这个直接计算行列式，再根据题计算就好，一般会分析<strong>方程的根或重根</strong></p>
</li>
</ul>
<h4 id="1-2-2-抽象行列式的计算"><a href="#1-2-2-抽象行列式的计算" class="headerlink" title="1.2.2 抽象行列式的计算"></a>1.2.2 抽象行列式的计算</h4><ul>
<li>利用行列式的性质将未知行列式化成行列式是解决此问题的关键</li>
<li>常用方法：<ol>
<li><strong>熟练将线性组合表示成矩阵乘积的形式</strong>，|AB| = |A| * |B|</li>
<li>用行列式的<strong>倍加性质</strong>将未知行列式化成已知行列式的关系式</li>
</ol>
</li>
</ul>
<h4 id="1-2-3-余子式和代数余子式的线性组合计算"><a href="#1-2-3-余子式和代数余子式的线性组合计算" class="headerlink" title="1.2.3 余子式和代数余子式的线性组合计算"></a>1.2.3 余子式和代数余子式的线性组合计算</h4><ul>
<li><p>余子式和代数余子式的关系：<strong>Aij = （-1）^(i+j) * Mij</strong></p>
</li>
<li><pre><code class="cpp">K1*Ai1 + K2*Ai2 + ... + Kn*Ain = 
    |      *     |
    |             |
    |K1 K2 ... Kn|
    |             |
    |       *     |

<span class="comment">// 第i行的元素换成K1，K2，...，Kn，再计算行列式 </span>
&lt;!--￼<span class="number">1</span>--&gt;
Aη = λη, η为非零列向量</code></pre>
</li>
<li><p>特征矩阵：λE - A</p>
</li>
<li><p><strong>特征多项式</strong>：|λE - A|</p>
</li>
</ul>
<h4 id="5-1-2-基本性质"><a href="#5-1-2-基本性质" class="headerlink" title="5.1.2 基本性质"></a>5.1.2 基本性质</h4><ul>
<li><font color = "oran"><strong>特征值的和</strong> = <strong>矩阵主对角线元素之和</strong></font> ，也叫矩阵的<font color = "red" size = "3"><strong>迹</strong></font>，tr(A)</li>
<li><font color = "oran"><strong>特征值的乘积</strong> = <strong>矩阵的行列式</strong></font></li>
<li>k重特征值至多有k个线性无关的特征向量</li>
<li><strong>属于不同特征值的特征向量线性无关</strong></li>
</ul>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200802170549599.png" alt="image-20200802170549599" style="zoom: 67%;" />

<ul>
<li>同一特征值的特征向量的线性组合仍然是该特征值的特征向量</li>
</ul>
<h4 id="5-1-3-矩阵的相似"><a href="#5-1-3-矩阵的相似" class="headerlink" title="5.1.3 矩阵的相似"></a>5.1.3 矩阵的相似</h4><ul>
<li><p>定义：<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200802175114951.png" alt="image-20200802175114951"  /></p>
</li>
<li><p>相似矩阵的性质：</p>
<p>若A ~ B：</p>
<ol>
<li><strong>r(A) = r(B)；|A| = |B|；|λE - A| = |λE - B|；A,B有相同的特征值</strong></li>
<li>A^m ~ B^m，A的多项式 ~ B的多项式</li>
<li>A的逆 ~ B的逆，A逆的多项式 ~ B逆的多项式</li>
<li>A的转置 ~ B的转置</li>
<li>A的伴随 ~ B的伴随</li>
</ol>
</li>
</ul>
<h4 id="5-1-4-矩阵的相似对角化"><a href="#5-1-4-矩阵的相似对角化" class="headerlink" title="5.1.4 矩阵的相似对角化"></a>5.1.4 矩阵的相似对角化</h4><ul>
<li>定义：<img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200802175453263.png" alt="image-20200802175453263" style="zoom:67%;" /></li>
<li><strong>矩阵可相似对角化的条件：</strong><ol>
<li>充要条件：A有n个线性无关的特征向量</li>
<li>充要条件：A对应每个k重特征值都有k个线性无关的特征向量</li>
<li>A有n个特征值  =&gt;  A可相似对角化</li>
<li>实对称矩阵A =&gt; A可相似对角化</li>
</ol>
</li>
</ul>
<h4 id="5-1-5-实对称矩阵"><a href="#5-1-5-实对称矩阵" class="headerlink" title="5.1.5 实对称矩阵"></a>5.1.5 实对称矩阵</h4><ul>
<li><font color = "red"><strong>实对称矩阵A属于不同特征值的特征向量必正交</strong></font></li>
<li>对于实对称矩阵A，必存在正交矩阵Q使得A正交相似于对角矩阵</li>
</ul>
<h3 id="5-2-相关解题技巧"><a href="#5-2-相关解题技巧" class="headerlink" title="5.2 相关解题技巧"></a>5.2 相关解题技巧</h3><ul>
<li><p>具体型矩阵的特征值特征向量计算</p>
<p>关于特征方程的根求解问题，需要用到<font color = "red"><strong>试根法</strong></font>，常用的根一般是：0，±1，±2</p>
</li>
<li><p>抽象型矩阵的特征值特征向量计算</p>
<ol>
<li>若有 (λE-A)ξ = 0，则λ为A的特征值，ξ为其对应的特征向量</li>
<li>|A| = 特征值乘积</li>
<li>常用矩阵特征值和特征向量</li>
</ol>
<table>
<thead>
<tr>
<th align="center"><strong>矩阵</strong></th>
<th align="center">A</th>
<th align="center">kA</th>
<th align="center">A^k</th>
<th align="center">f(A)</th>
<th align="center">A逆</th>
<th align="center">A*</th>
<th align="center">P逆AP</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>特征值</strong></td>
<td align="center">λ</td>
<td align="center">kλ</td>
<td align="center">λ^k</td>
<td align="center">f(λ)</td>
<td align="center">1/λ</td>
<td align="center">|A|/λ</td>
<td align="center">λ</td>
</tr>
<tr>
<td align="center"><strong>特征向量</strong></td>
<td align="center">ξ</td>
<td align="center">ξ</td>
<td align="center">ξ</td>
<td align="center">ξ</td>
<td align="center">ξ</td>
<td align="center">ξ</td>
<td align="center">P逆ξ</td>
</tr>
</tbody></table>
</li>
</ul>
<ul>
<li><p>矩阵能否相似对角化</p>
<ol>
<li>是否为实对称矩阵</li>
<li>求特征值，是否为单实根</li>
<li>求k重根特征向量，是否有k个线性无关解向量</li>
</ol>
</li>
<li><p>两个矩阵是否相似</p>
<ol>
<li>两个矩阵A，B相似 =&gt; <strong>r(A) = r(B)；|A| = |B|；|λE - A| = |λE - B|；A,B有相同的特征值</strong></li>
<li>判别相似：<strong>A，B是否可相似于同一对角矩阵</strong></li>
</ol>
<p>经典例题：</p>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200802183631301.png" alt="image-20200802183631301"></p>
<p>A和B特征值相同，但是A不可相似对角化，即A,B不相似</p>
</li>
<li><p>求相似对角化的可逆矩阵P</p>
<ol>
<li>写特征多项式，求出λ</li>
<li>对每一个特征值λ，求出对应的特征向量ξ</li>
<li>P矩阵为特征向量的组合</li>
</ol>
</li>
<li><p>实对称矩阵的相似对角化</p>
<p>雷同于相似对角化的求法</p>
<ol>
<li>写特征多项式，求出λ</li>
<li>对每一个特征值λ，求出对应的特征向量ξ</li>
<li>将特征向量正交化（如果需要的话: 不同特征值的特征向量必正交）<font color = "red"><strong>施密特正交化</strong></font></li>
<li>Q为正交向量的组合</li>
</ol>
<p><strong>实对称矩阵不同特征值的特征向量正交：</strong></p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200802201144908.png" alt="image-20200802201144908" style="zoom:67%;" />



</li>
</ul>
<ul>
<li><p>反求参数</p>
<p>根据相似的性质： <strong>r(A) = r(B)；|A| = |B|；|λE - A| = |λE - B|；A,B有相同的特征值</strong> 求参数</p>
</li>
<li><p>由特征值、特征向量反求A</p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200802202452396.png" alt="image-20200802202452396" style="zoom: 67%;" />
</li>
<li><p>求A的k次幂以及f(A)</p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200802203244828.png" alt="image-20200802203244828" style="zoom: 67%;" />



</li>
</ul>
<h2 id="6-二次型"><a href="#6-二次型" class="headerlink" title="6. 二次型"></a>6. 二次型</h2><h3 id="6-1-知识点"><a href="#6-1-知识点" class="headerlink" title="6.1 知识点"></a>6.1 知识点</h3><h4 id="6-1-1-合同变换，标准形和规范形"><a href="#6-1-1-合同变换，标准形和规范形" class="headerlink" title="6.1.1 合同变换，标准形和规范形"></a>6.1.1 合同变换，标准形和规范形</h4><ul>
<li><p><strong>线性变换：</strong>x = Cy；若矩阵C可逆，则称为<strong>可逆线性变换</strong></p>
<ol>
<li>A，B为实对称矩阵，存在<font color = "red"><strong>可逆矩阵C</strong></font>，使得<img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200804180434469.png" alt="image-20200804180434469" style="zoom:67%;" />，称为A与B<strong>合同</strong></li>
<li>可逆线性变换不会改变二次型的秩</li>
</ol>
</li>
<li><p>二次型的标准型和规范形</p>
<ol>
<li>标准型：二次型中只含有平方项</li>
<li>规范形：标准型中二次型的系数仅为 1，-1，0</li>
</ol>
<p>化为标准型的方法：</p>
<ol>
<li>配方法：任何二次型均可通过<strong>配方法（作可逆线性变换）</strong>化成标准型及规范形</li>
<li>正交变换：任何二次型均可以通过<strong>正交变换</strong>化成标准型</li>
</ol>
</li>
</ul>
<h4 id="6-1-2-惯性定理"><a href="#6-1-2-惯性定理" class="headerlink" title="6.1.2 惯性定理"></a>6.1.2 惯性定理</h4><p>无论选取什么样的<strong>可逆线性变换</strong>，将二次型化成标准形和规范形，其<font color = "red"><strong>正项个数p,负数个数q都是不变的，p为正惯性指数，q为负惯性指数</strong></font></p>
<h4 id="6-1-3-正定二次型的判别"><a href="#6-1-3-正定二次型的判别" class="headerlink" title="6.1.3 正定二次型的判别"></a>6.1.3 正定二次型的判别</h4><ul>
<li><p>正定矩阵：</p>
<img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200804182018057.png" alt="image-20200804182018057" style="zoom: 67%;" />



</li>
</ul>
<ul>
<li><p>二次型正定的充要条件：</p>
<p><font color = "orag"><strong>讨论二次型正定或者合同的前提是：</strong></font><font color = "blue"><strong>A是实对称矩阵</strong></font></p>
<ol>
<li>对于任意的非0向量x，f(x)均大于0</li>
<li>f 的正惯性指数等于n</li>
<li>系数矩阵A合同于单位矩阵E</li>
<li>存在可逆矩阵D，使得<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200804175313965.png" alt="image-20200804175313965" style="zoom: 67%;" /></li>
<li>A的特征值全部大于0</li>
<li>A的全部顺序主子式大于0</li>
</ol>
</li>
<li><p>二次型正定的必要条件：</p>
<ol>
<li>|A| &gt; 0；系数矩阵A的特征值全部为正数，即A的行列式大于0</li>
<li><strong>A的主对角线元素全部大于0</strong>；简单证明：如果A的主对角线元素出现小于等于0的值，则二次型表达式中会出现aX^2的项，此时a的值小于等于0，则会出现非0的x向量使得二次型f(x) &lt;= 0</li>
</ol>
</li>
</ul>
<h3 id="6-2-相关解题技巧"><a href="#6-2-相关解题技巧" class="headerlink" title="6.2 相关解题技巧"></a>6.2 相关解题技巧</h3><h4 id="6-2-1-用配方法化二次型"><a href="#6-2-1-用配方法化二次型" class="headerlink" title="6.2.1 用配方法化二次型"></a>6.2.1 用配方法化二次型</h4><ul>
<li>没有平方项时，作可逆线性变换<strong>x1 = y1 + y2，x2 = y1 - y2，x3 = y3</strong> 使得出现平方项</li>
<li>有平方项时，按照每一个分量配方即可</li>
<li>写出可逆线性变换</li>
</ul>
<h4 id="6-2-2-用正交变换化二次型"><a href="#6-2-2-用正交变换化二次型" class="headerlink" title="6.2.2 用正交变换化二次型"></a>6.2.2 用正交变换化二次型</h4><ul>
<li>关于正交变换的步骤和第五章的<strong>实对称矩阵的相似对角化</strong>步骤相同</li>
<li>正交变换只能化二次型为标准型，不能化为规范形（除非特征值都是1，-1，0）</li>
<li>正交变化得到的标准型的平方系数是矩阵A的特征值，但是配方法得到的标准型的平方系数不唯一</li>
<li><strong>实对称矩阵正交化的技巧：</strong><ol>
<li>如果 λ 是单根，但是由于矩阵A必可相似对角化，则求特征向量时可以随意去掉矩阵A的一行</li>
<li>如果 λ 是k重根，但是由于矩阵A必可相似对角化，则求特征向量时可以随意去掉矩阵A的k行</li>
<li>验算：特征值之和等于主对角元素之和；特征值之和等于A的行列式；不同特征值的特征向量正交</li>
</ol>
</li>
</ul>
<h4 id="6-2-3-合同矩阵和合同二次型"><a href="#6-2-3-合同矩阵和合同二次型" class="headerlink" title="6.2.3 合同矩阵和合同二次型"></a>6.2.3 合同矩阵和合同二次型</h4><p>​    两个矩阵合同：正负惯性指数相同</p>
<h4 id="6-2-4-二次型的正定问题"><a href="#6-2-4-二次型的正定问题" class="headerlink" title="6.2.4 二次型的正定问题"></a>6.2.4 二次型的正定问题</h4><ul>
<li><p>具体二次型的正定问题</p>
<ol>
<li>求所有顺序主子式，判断是否全部大于0</li>
<li>写特征方程，求出特征值，判断是否全部大于0</li>
<li>利用配方法化为标准型，判别其正惯性指数是否等于n</li>
<li>可以运用正定矩阵的必要条件来否定</li>
</ol>
</li>
<li><p>抽象型二次型的正定问题</p>
<p>证明矩阵A正定的常用步骤：</p>
<ol>
<li>A对称</li>
<li>A的所有特征值均大于0</li>
</ol>
<p>常用的正定推导：</p>
</li>
</ul>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200731154330869.png" alt="image-20200731154330869" style="zoom: 80%;" />]]></content>
      <categories>
        <category>考研</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>高等数学</title>
    <url>/2020/09/01/%E8%80%83%E7%A0%94%E7%A7%91%E7%9B%AE/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E5%BC%BA%E5%8C%96/</url>
    <content><![CDATA[<h1 id="高等数学强化"><a href="#高等数学强化" class="headerlink" title="高等数学强化"></a>高等数学强化</h1><h2 id="1-函数极限与连续"><a href="#1-函数极限与连续" class="headerlink" title="1. 函数极限与连续"></a>1. 函数极限与连续</h2><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200901122759227.png" alt="image-20200901122759227"></p>
]]></content>
      <categories>
        <category>考研</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>考研英语写作</title>
    <url>/2020/07/14/%E8%80%83%E7%A0%94%E7%A7%91%E7%9B%AE/%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD%E5%86%99%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="考研英语写作"><a href="#考研英语写作" class="headerlink" title="考研英语写作"></a>考研英语写作</h1><h2 id="1-基础篇"><a href="#1-基础篇" class="headerlink" title="1. 基础篇"></a>1. 基础篇</h2><h3 id="1-1-关联词"><a href="#1-1-关联词" class="headerlink" title="1.1 关联词"></a>1.1 关联词</h3><p><strong>启：</strong>启动观点，开篇点题</p>
<blockquote>
<p>第一段和每一段第一句话是启</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nowadays, at present</span><br></pre></td></tr></table></figure>

<p><strong>承：</strong>观点承接，正面论证</p>
<blockquote>
<p>第二段和每段中间是承</p>
</blockquote>
<ul>
<li>分类论证</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">first(ly), in the first place, first <span class="keyword">and</span> foremost, above all, to begin with</span><br><span class="line">    </span><br><span class="line">on the one hand, <span class="keyword">for</span> one thing, second(ly), in the second place,</span><br><span class="line"></span><br><span class="line">besides, furthermore(而且此外), moreover(而且), in addition, what<span class="number">'</span>s more, </span><br><span class="line">    </span><br><span class="line">on the other hand, <span class="keyword">for</span> another, last(ly), last but <span class="keyword">not</span> least, <span class="function">even <span class="title">worse</span><span class="params">(更糟糕的是)</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>举例论证：<code>for example, for instance, a case in point is</code></li>
<li>解释论证：<code>indeed, in fact, certainly, obviously, truely, in other words(换句话说)</code></li>
</ul>
<p><strong>转：</strong>观点转折，反面论证</p>
<blockquote>
<p> 第二段和每段中间也可以是启</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">yet, instead, whereas, otherwise(不然，否则), by contrast, conversely, nevertheless(仍然)</span><br><span class="line"></span><br><span class="line">unfortunately, on the contrary</span><br></pre></td></tr></table></figure>

<p><strong>合：</strong>文章结尾，合并归纳</p>
<blockquote>
<p>第三段和每段最后一句是合</p>
</blockquote>
<ul>
<li>因此：<code>thus, hence, therefore, consequently, as a result/consequence</code></li>
<li>总之：<code>in conclusion, in general, generally speaking, on the whole</code></li>
<li>简言之：<code>in short/brief, briefly speaking, in a word</code></li>
</ul>
<h3 id="1-2-同义词替换"><a href="#1-2-同义词替换" class="headerlink" title="1.2 同义词替换"></a>1.2 同义词替换</h3><p><font size = "5"><strong>写作技巧</strong></font></p>
<img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200809224426688.png" alt="image-20200809224426688" style="zoom:67%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">It is believed that the Internet has been changed.</span><br></pre></td></tr></table></figure>



<img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200809225003194.png" alt="image-20200809225003194" style="zoom: 67%;" />]]></content>
      <categories>
        <category>考研</category>
      </categories>
      <tags>
        <tag>英语</tag>
      </tags>
  </entry>
  <entry>
    <title>考研英语同义词</title>
    <url>/2020/07/09/%E8%80%83%E7%A0%94%E7%A7%91%E7%9B%AE/%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD%E5%90%8C%E4%B9%89%E8%AF%8D/</url>
    <content><![CDATA[<h1 id="考研英语同义词"><a href="#考研英语同义词" class="headerlink" title="考研英语同义词"></a>考研英语同义词</h1><ul>
<li><p><strong>1. 重要的</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">important, vital, significant, leading, essential, crucial, consequential;</span><br><span class="line">foremost</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>2. 不重要的</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">unimportant, trivial, marginal, insignificant</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>3. 困难的，难以应付的</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">difficult, hard, tough, formidable, troublesome</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>4. 个人的，私人的</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">personal, <span class="keyword">private</span>, individual</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>5. 遥远的</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">remote, distant</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>6. 主要的</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">chief, primary, main, principal, prime, head, staple</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>7. 降低</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">decrease, decline, reduce, lower, fall</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>8. 热情的，热烈的</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">passionate, enthusiastic</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>9. 巨大的，庞大的</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">big, large, huge, giant, immense, enormous, gigantic, vast</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>10. 结果</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">result, consequence</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>11. 娱乐，消遣</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">pastime, entertainment, recreation, amusement, diversion</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>12. 宣告，声称</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">assert, allege, contend, announce</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>13. 可疑的，有问题的</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">questionable, doubtful, suspicious, dubious, skeptical</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>14. 仅仅，只</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">just, only, merely, barely</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>15. 问题，错误</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">error, mistake, problem, trouble, question, issue, slipup</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>16. 完全的</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">utter, complete</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>17. 轻视，看不起</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">despise, underestimate, slight</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>18. 认为</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">think, reckon</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>19. 使惊叹，使惊讶</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">startle, shock, surprise, stun</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>20. 促进，增进</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">boost, further, foster, promote</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>21. 称赞，恭维，赞美</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">admire, compliment, adore, favor, praise</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>22. 令人赞叹的，令人敬畏的</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">impressive,</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>23. 提供，供应</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">provide, offer, give, supply, furnish</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>24. 风景，景色</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">landscape, scenery</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>25. 不利条件，缺点</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">disadvantage, shortcoming, drawback, defect, downside</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>26. 主要地，大部分地，通常</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">mostly, typically, commonly, usually, generally, ordinary, routinely,</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>27. 抑制，压抑</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">repress, restrain, inhibit</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>28. 考虑，沉思</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">meditate, deliberate, ponder</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>29. 必要的，必须的</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">necessary,</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>30. 冷漠的，不关心的</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">unconcerned, carefree, indifferent, uninterested</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>31. 清楚地，明显地</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">distinctly, explicitly, conspicuously</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>32. 正直的，竖直的</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">upright, straight</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>33. 应付，处理</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cope with, deal with,</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>34. 引人注目的， 显著的</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">striking, notably, conspicuous, manifest, remarkable,</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>35. 临时的，暂时的</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">temporary, interim</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>36. 阻碍，妨碍</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">hamper, hinder, disturb,</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>37. 恢复</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">restore, recover</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>37. 精美的，精致的</strong></p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">exquisite, delicate, refined</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>38. 理所应当地</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">naturally, take <span class="keyword">for</span> granted</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>39. 卓越的，优秀的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">exceptional, extraordinary, outstanding, distinguished, remarkable, excellent;</span><br><span class="line">eminent, prominent, superb</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>40. 保证</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">assure, ensure, insure <span class="comment">/***** 需要辨析 *****/</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>41. 而且，此外</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">furthermore, moreover, additionally, also, besides;</span><br><span class="line"><span class="comment">/*-- 例句 --*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>42. 企业，公司</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">corporation, company, enterprise, firm</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>43. 完成，实现</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">accomplish, complete, finish, go through with,</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>44. 非常地</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">extremely</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>45. 绝对地，完全地</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">completely, utterly, totally, entirely, fully, thoroughly</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>46. 使气馁</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">discourage, daunt</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>47. 侮辱</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">insult, brand</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>48. 激烈的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">furious</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>49. 激励，促进</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">stimulate, inspire</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>50. 痛苦的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">sore, agony, torment(名词或动词), anguish(痛苦)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>51. 腐败的，腐烂的</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rotten, corrupt</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>52. 抑制，压抑</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">restrain, repress</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>53. 懒散的，松弛的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">slack, loose</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>54. 易受影响的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">impressionable, susceptible</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>55. 执行，实施</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">execute, administer</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>56.  更加</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">all the more,</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>57. 相反的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">contrary, converse</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>58. 充分的，足够的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">adequate, sufficient, competent</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>59. 由于</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">owing to,</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>60. 无可匹敌的，未被超越的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">unsurpassed,</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>61. 痛苦</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">anguish, misery</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>62. 干扰，干预</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">intervene, interfere</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>63. 献身于</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">be devoted to,  be committed to</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>64. 永久地</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> good, forever, permanently</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>65. 大体上，总之</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">on the whole, 	in general;</span><br><span class="line">in balance, 	in short;</span><br><span class="line">all in all,		in summary;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>66. 普遍的， 流行的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">popular, prevalent, prevailing</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>67. 欺骗</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">deceive,  rip sb. off, trick</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>68. 微不足道</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">trivial, marginal, nominal</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>69. 基本上的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">inherent, fundamental, essential, radical</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>70. 立即的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">instant, immediate</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>71. 几乎不</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">hardly, scarcely, barely</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>72. 讨厌的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">tiresome, troublesome, rank</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>73. 相当大的，可观的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">fair, considerable</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>74. 体贴的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">considerate, thoughtful, sensitive</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>75. 过剩的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">surplus, redundant</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>76. 虚弱的，微弱的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">weak, faint, feeble</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>77. 评估</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">assess, estimate, evaluation</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>78. 最后的，最终的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ultimate</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>79. 极端的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">rank, ultimate, extreme</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>80. 不顾的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">regardless, irrespective</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>81. 履行</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">perform, discharge, fulfillment</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>82. 令人钦佩的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">admirable,</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>83. 合理的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">reasonable, sensible, reasonable, rational, defensible</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>84. 明智的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">sensible, intelligent, intellectual</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>85. 有重大意义的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">significant, landmark</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>86. 使人困惑的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">perplexing, confused</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>87. 不礼貌的，粗鲁的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">rude, impolite, coarse, crude</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>88. 招致</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">incur, spell</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>89. 合理的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">sensible, reasonable, rational, defensible</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>90. 声望，威望</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">repulation, prestige, fame</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>91. 坚持到底</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">stick it out,</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>92. 易变的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">variable, <span class="keyword">mutable</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>93. 抵制</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">resist, boycott,</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>94. 夸大，夸张</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">exaggerate, overstate</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>95. 确实地，肯定地</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">positively, <span class="keyword">for</span> sure,</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>96. 合理性</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">valid, legitimate</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>97. 合作</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">collaborate, cooperate</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>98. 同情</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">sympathy (sympathetic), compassion</span><br><span class="line">be sympathetic to/with = show sympathy <span class="keyword">for</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>99. 大约，粗略地</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">roughly, approximately</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>100. 容忍</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">tolerate, abide, bear</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>101. 平庸的，无特色的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">unimpressive</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>102. 超过，胜过</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">surpass, transcend</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>103. 独特的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">peculiar, distinctive</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>104. 古老的，过时的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">antique, ancient, outdated</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>105. 污染</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">pollute, contaminate</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>106. 精确的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">accurate, refined</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>107. 完美的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">perfect, flawless</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>108. 不相干的，不相关的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">irrelevant, unrelated</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>109. 丢脸，不光彩</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">disgrace，humiliate</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>110. 巧妙的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">skillful, ingenious</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>111. 笨拙的，不灵巧的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">awkward, clumsy</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>112. 天堂</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">heaven, paradise</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>113. 激怒，刺激</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">irritate, aggravate, incense</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>114. 津贴</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">subsidy, allowance</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>115. 目的，意图</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">intention, purpose</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>116. 确定的，肯定的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">definite, certain</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>117. 注视</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">fix one<span class="number">'</span>s eyes on</span><br><span class="line">contemplate, gaze</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>118. 根本上，根本地</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">radically, essentially, fundamentally, ultimately</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>119. 微不足道</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">trivial, marginal, nominal</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>120. 宣告</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">proclaim, announce</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>121. 可怕的，恐怖的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">afraid, horrible, terrible, fearsome, scared</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>122. 收缩，缩小</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">contraction, shrinkage</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>113. 熟练的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">expert, proficient, skillful, skilled</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>114. 回答，应答</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">reply, respond</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>115. 准确的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">accurate, percise</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>116. 误导</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">misguide, mislead</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>117. 腐烂</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">rot, decay,</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>118. 值得，应得</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">deserve, merit</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>119. 阴谋</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">scheme, conspiracy</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>120. 恶作剧</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">trick, mischief</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>121. 培养</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">foster, nurture</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>122. 潮湿的，湿润的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">moist, humid</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>123. 多产的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">productive, fertile，fruitful</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>124. 无用的，徒劳的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">in vain, futile</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>125. 领域，领土</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">realm, territory, field</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>126. 先进的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">developed, advanced</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>127. 模糊的，费解的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ambiguous, obscure</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>128. 不可避免的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">unavoidable, inevitable</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>129. 渴望的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">eager, anxious</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>130. 次要的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">subordinate, secondary</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>131. 稳定的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">steady, stable</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>132. 复杂的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">complex</span>, complicated, intricate</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>133. 威胁，胁迫</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">menace, intimidate</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>134. 违背</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">violate, deviate</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>135. 碰撞</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">bump, crash, hit, impact</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>136. 沮丧</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">frustration, dismay, depression</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>137. 合适的，适当的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">appropriate, proper</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>138. 无价的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">invaluable, inestimable, costly</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>139. 没有价值的，不值钱的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">valueless, worthless, unworthy</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>140. 展望</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">prospect, envisage</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>141. 预知，预料</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">predict, foresee, forekonw</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>142. 雕刻</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">sculpt, engrave</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>143. 对手</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">opponent, competitor, rival</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>144. 责任</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">duty, liability, responsibility, obligation</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>145. 笨拙的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">clumsy, awkward</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>146. 差异</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">discrepancy, difference</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>147. 勇气</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">bravery, nerve, courage</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>148. 粗鲁的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">rude, coarse, crude</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>149. 无关紧要的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">insignificant, irrelevant</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>150. 潮湿的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">moist, humid</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>151. 减轻</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">moderate, alleviate, diminish</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>152. 充分的，足够的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">adequate, sufficient</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>153. 无法避免的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">unavoidable, inevitable</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>154. 繁荣</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">thrive, flourish</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>155. 数字的</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">digital		<span class="comment">// 数值的，用数字表示的</span></span><br><span class="line">numerical	<span class="comment">// 数码的，数字信息的</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>156. 木材</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">timber, lumber, word</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>157. 估价，评价</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">assess, appraise, estimate, evaluate</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>考研</category>
      </categories>
      <tags>
        <tag>英语</tag>
      </tags>
  </entry>
  <entry>
    <title>英语语法及长难句分析</title>
    <url>/2020/07/11/%E8%80%83%E7%A0%94%E7%A7%91%E7%9B%AE/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E5%8F%8A%E9%95%BF%E9%9A%BE%E5%8F%A5%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="英语语法及长难句分析"><a href="#英语语法及长难句分析" class="headerlink" title="英语语法及长难句分析"></a>英语语法及长难句分析</h1><h2 id="1-简单句"><a href="#1-简单句" class="headerlink" title="1. 简单句"></a>1. 简单句</h2><h3 id="1-1-简单句的核心"><a href="#1-1-简单句的核心" class="headerlink" title="1.1 简单句的核心"></a>1.1 简单句的核心</h3><h4 id="1-1-1-简单句的核心构成"><a href="#1-1-1-简单句的核心构成" class="headerlink" title="1.1.1 简单句的核心构成"></a>1.1.1 简单句的核心构成</h4><blockquote>
<p>简单句的五类核心构成：主谓，主谓宾，主谓双宾，主谓宾补，主系表</p>
</blockquote>
<ul>
<li>谓语动词<ul>
<li>实义动词：swim、dance<ul>
<li>及物动词：lose(失败)，survive(幸存)</li>
<li>非及物动词：love(喜爱)，need(需要)</li>
<li>两者区别：<strong>是否后接宾语</strong>，或者说<strong>是否可以由主语独立完成</strong></li>
</ul>
</li>
<li>非实义动词：be、seem</li>
</ul>
</li>
</ul>
<hr>
<ol>
<li><p><strong>主谓 = 主语 + 不及物动词（vi.）</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> Everybody <span class="keyword">else</span> loses.        <span class="comment">// 其余的每个人都失败了</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> Smaller species survived.    <span class="comment">// 较小的物种存活下来了</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>主谓宾 = 主语 + 及物动词（vt.）+ 宾语</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> Everybody loves a fat pay rise.    <span class="comment">// 每个人都喜欢丰厚的加薪</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> In both cases, we need a rebalancing of power.   <span class="comment">// 在这两种情况下，我们需要权力的再平衡</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> Yet science has cultural history.  <span class="comment">// 然而科学也有文化历史</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> Several of his staff members have military-intelligence backgrounds.  <span class="comment">// 他的一些职员有军事情报工作的背景</span></span><br></pre></td></tr></table></figure>

<p><strong>组成句子的单词无论如何变换，结构都是万变不离其宗的！</strong></p>
</li>
</ol>
<ol start="3">
<li><p><strong>主谓双宾 = 主语 + 及物动词（vt.）+ 两个宾语（人+物）</strong></p>
<blockquote>
<p>及物动词有时需要涉及两个对象，就需要后接两个宾语（通常双宾语是 “人 + 物”）</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> They gave jutices permanent positions.    <span class="comment">// 他们给予法官们终身任期</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> Railroads charged all customers the same average rate.  <span class="comment">// 铁路公司向所有顾客收取同样的平均费率</span></span><br></pre></td></tr></table></figure>

<p><strong>补充：</strong></p>
<p>主谓双宾的两个宾语的前后顺序可以是调换的，既可以是 “ 人+物 ”，也可以是 “ 物+人”，因此<strong>主谓双宾结构的句子有两种写法，且表意相同</strong>。如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">They gave justices permanent positions...</span><br><span class="line"></span><br><span class="line">&#x3D; They gave permanent positions to justices...</span><br></pre></td></tr></table></figure>

<p><strong>注意在” 物+人 “的情况下，中间要加介词，通常为to或者for，to强调动作的方向，for强调动作的目的</strong></p>
<p>无论是“ 人+物 ”，还是 “ 物+人”，“物”永远都是直接宾语，“人“永远是间接宾语。</p>
</li>
</ol>
<ol start="4">
<li><p><strong>主谓宾补 = 主语 + 及物动词（vt.）+ 宾语 + 宾语补足语</strong></p>
<blockquote>
<p>有时 ”主谓宾“ 结构完整了，但是意思有残缺，就需要加入补充的成分。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> You always keep your eyes open.   <span class="comment">// 你总要保持你的眼睛睁开，open就是补足语</span></span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span> The spooks call it <span class="string">"open source intelligence"</span>.   <span class="comment">// 间谍们称它为“公开来源的情报”</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> ...changes in the economy...make gainful employment increasingly difficult.</span><br><span class="line"><span class="comment">// ...经济变化...使找到薪水丰厚的工作越来越困难，difficult就是补足语</span></span><br></pre></td></tr></table></figure>

<p>可以作宾补的词有：形容词，名词，介词短语，doing或to do等</p>
</li>
</ol>
<ol start="5">
<li><p><strong>主系表 = 主语 + 系动词+ 表语</strong></p>
<blockquote>
<p>无实义，但是可以把句子前后 “连系” 起来——这类动词简称 “系动词”。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> This is a dangerous game.    <span class="comment">// 这是一个危险的游戏</span></span><br></pre></td></tr></table></figure>

<p>考研真题中常出现的系动词：</p>
<ul>
<li>be：是</li>
<li>get、become、turn、go、grow：变得，成为</li>
<li>look、sound、smell、taste、feel：看/听/闻/尝/感觉起来…（感官动词）</li>
<li>seem、appear、keep、remain、prove：似乎、保持、证明</li>
</ul>
</li>
</ol>
<p><strong>内容小结：</strong></p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/C0C1DF1DB111581D96242324EDFE01F3.jpg" alt="内容小结" style="zoom: 50%;" />

<p><strong>真题演练</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> These views of arguments also undermine reason. <span class="comment">// undermine 及物动词 主谓宾</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> More apparent reasonableness followed. <span class="comment">// followed 不及物动词 主谓</span></span><br><span class="line"> </span><br><span class="line"><span class="number">3.</span> ...even the word <span class="string">"habit"</span> carries a negative implication. <span class="comment">// carried 及物动词 主谓宾</span></span><br><span class="line">    </span><br><span class="line"><span class="number">4.</span> The humiliation continues. <span class="comment">// continues 不及物动词 主谓</span></span><br><span class="line">    </span><br><span class="line"><span class="number">5.</span> ...they suddenly become extinct. <span class="comment">// become 系动词 主系表</span></span><br><span class="line">    </span><br><span class="line"><span class="number">6.</span> ...poetry of many kinds gave him great pleasure. <span class="comment">// gave 及物动词 主谓双宾</span></span><br><span class="line">    </span><br><span class="line"><span class="number">7.</span> ...our president calls himself <span class="string">"the Decider"</span>. <span class="comment">// calls 及物动词 主谓宾补</span></span><br><span class="line">    </span><br><span class="line"><span class="number">8.</span> The computer is the <span class="number">21</span>st century<span class="number">'</span>s culture machine. <span class="comment">// is 系动词 主系表</span></span><br><span class="line">    </span><br><span class="line"><span class="number">9.</span> Such characteristics make them perfect candidates. <span class="comment">// make 及物动词 主谓宾补</span></span><br><span class="line">    </span><br><span class="line"><span class="number">10.</span> Such advances offer the aging population a quality of life. <span class="comment">// offer 及物动词 主谓双宾</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="1-1-2-简单句的核心变化"><a href="#1-1-2-简单句的核心变化" class="headerlink" title="1.1.2 简单句的核心变化"></a>1.1.2 简单句的核心变化</h4><blockquote>
<p>谓语动词的变化共有四种——“三态加一否”，其中 “三态” 指的是时态、情态、语态，“一否”指的是否定。</p>
</blockquote>
<h5 id="1-1-2-1-谓语动词的时态"><a href="#1-1-2-1-谓语动词的时态" class="headerlink" title="1.1.2.1 谓语动词的时态"></a>1.1.2.1 谓语动词的时态</h5><blockquote>
<p>时态是表达事情发生的 “时间” 和 “状态”，通过把谓语动词变成不同形式来体现。谓语动词的四种变化中，<strong>只有时态是每一个谓语动词必有的</strong>。</p>
</blockquote>
<p><strong>时态的划分：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">四种时间：过去、现在、将来、过去将来</span><br><span class="line">四种状态：一般、进行、完成、完成进行</span><br><span class="line">四种时间 * 四种状态 = <span class="number">16</span>种时态</span><br></pre></td></tr></table></figure>

<p><strong>一般时态</strong></p>
<blockquote>
<p>一般，指不特殊，没有任何的特殊强调；只表达事情发生在这个时间段内。</p>
</blockquote>
<ul>
<li>一般过去时：<strong>谓语动词 = did</strong></li>
</ul>
<blockquote>
<p>表示发生在过去的事情（通常表示<strong>完全发生在过去的事</strong>）</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> India released its AI ethics strategy <span class="keyword">this</span> spring.   <span class="comment">// released </span></span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span> This scale gave numerous factors into consideration.    <span class="comment">// gave</span></span><br><span class="line">    </span><br><span class="line"><span class="number">3.</span> ...<span class="keyword">this</span> city was one of the largest human settlements in the world.    <span class="comment">// was</span></span><br></pre></td></tr></table></figure>

<p><strong>注：一般过去时的句子不一定非要搭配明确的过去的时间，只要动作时过去发生即可</strong></p>
<ul>
<li>一般现在时：<strong>谓语动词 = do/does</strong></li>
</ul>
<blockquote>
<p>可以表示现在的状态，也可以表示<strong>现在经常性，习惯性发生的事</strong>。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> So far the results are inconclusive.	<span class="comment">// are 迄今为止没有确定的答案</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> The goal is <span class="keyword">new</span>-search,<span class="keyword">not</span> re-search.	<span class="comment">// is 科学的目标是新研究而不是重复研究</span></span><br><span class="line">    </span><br><span class="line"><span class="number">3.</span> But most law graduates never get a big-firm job.	<span class="comment">// get 表示现在经常性的</span></span><br><span class="line">    </span><br><span class="line"><span class="number">4.</span> Today it makes almost no difference.	<span class="comment">// makes 第三人称单数形式</span></span><br></pre></td></tr></table></figure>

<p><strong>注：小心第三人称单数形式</strong></p>
<ul>
<li>一般将来时：<strong>谓语动词 = will + do 或 am/is/are going to + do</strong></li>
</ul>
<blockquote>
<p>表示发生在将来的事，注意是<strong>现在的将来</strong>，即现在的之后</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> We will have a less civil society.	<span class="comment">// will have 我们将有一个文明程度降低的社会</span></span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span> I don<span class="number">'</span>t konw <span class="keyword">if</span> other clients are going to abandon me.	<span class="comment">// are going to abandon</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> The problems will be differernt.		<span class="comment">// will be</span></span><br></pre></td></tr></table></figure>

<p><strong>注：如果谓语动词是be动词，那么放在will或者am/is/were going to后面，则用动词原形be</strong></p>
<ul>
<li>一般过去将来时：<strong>谓语动词 = would + do 或 was/were going to + do</strong></li>
</ul>
<blockquote>
<p>表示事情发生在过去的将来，即过去的之后。此时态通常与上下文的一般过去时搭配，表示在其之后发生的事情。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> They gave justices permenant positions so they would be <span class="built_in">free</span> to upset those in power.</span><br><span class="line"><span class="comment">// 他们（过去）给予法官们终身任期，以便法官（之后）将可以自由打击当权者  would be为过去将来时</span></span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span> it simply didn<span class="number">'</span>t foresee what would happen next.	<span class="comment">// would happen</span></span><br></pre></td></tr></table></figure>

<p><strong>注：过去将来时可以用 “would + 动词原形” 或者 “was/were going to + 动词原形”；一般将来时和过去将来时的差别在于出发点不同。</strong></p>
<p><strong>进行时态：</strong></p>
<blockquote>
<p>进行时态强调在某个时间段内正在进行或持续进行的事情，有统一的谓语动词公式 “be going”</p>
</blockquote>
<ul>
<li>过去进行时：<strong>谓语动词 = was/were + doing</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> He was searching <span class="keyword">for</span> tiny engraved seals...</span><br></pre></td></tr></table></figure>

<ul>
<li>现在进行时：<strong>谓语动词 = am/is/are + doing</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> Home prices are holding steady in most regions.</span><br></pre></td></tr></table></figure>

<ul>
<li>将来进行时：<strong>谓语动词 = will be+ doing</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Now, rivals will be charging sales tax.</span><br></pre></td></tr></table></figure>



<p><strong>完成时态：</strong></p>
<h5 id="1-1-2-2-谓语动词的情态"><a href="#1-1-2-2-谓语动词的情态" class="headerlink" title="1.1.2.2 谓语动词的情态"></a>1.1.2.2 谓语动词的情态</h5><h5 id="1-1-2-3-谓语动词的语态"><a href="#1-1-2-3-谓语动词的语态" class="headerlink" title="1.1.2.3 谓语动词的语态"></a>1.1.2.3 谓语动词的语态</h5><h5 id="1-1-2-4-谓语动词的否定"><a href="#1-1-2-4-谓语动词的否定" class="headerlink" title="1.1.2.4 谓语动词的否定"></a>1.1.2.4 谓语动词的否定</h5><h5 id="1-1-2-5-谓语动词的强调"><a href="#1-1-2-5-谓语动词的强调" class="headerlink" title="1.1.2.5 谓语动词的强调"></a>1.1.2.5 谓语动词的强调</h5>]]></content>
      <categories>
        <category>考研</category>
      </categories>
      <tags>
        <tag>英语</tag>
      </tags>
  </entry>
  <entry>
    <title>高等数学</title>
    <url>/2020/06/12/%E8%80%83%E7%A0%94%E7%A7%91%E7%9B%AE/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/</url>
    <content><![CDATA[<h1 id="高等数学"><a href="#高等数学" class="headerlink" title="高等数学"></a>高等数学</h1><h2 id="1-数列极限"><a href="#1-数列极限" class="headerlink" title="1. 数列极限"></a>1. 数列极限</h2><ul>
<li>脱帽法和戴帽法：<ul>
<li>戴帽法：数列（函数）&gt; 0，则极限存在时极限 ≥ 0</li>
<li>脱帽法：极限 &gt; 0，则从某项开始（函数领域内）&gt; 0</li>
</ul>
</li>
</ul>
<h2 id="2-函数极限与连续"><a href="#2-函数极限与连续" class="headerlink" title="2. 函数极限与连续"></a>2. 函数极限与连续</h2><h3 id="2-1-函数极限与连续的知识点"><a href="#2-1-函数极限与连续的知识点" class="headerlink" title="2.1 函数极限与连续的知识点"></a>2.1 函数极限与连续的知识点</h3><ul>
<li>局部保号性：第34页</li>
</ul>
<h3 id="2-2-常用极限求解的技巧"><a href="#2-2-常用极限求解的技巧" class="headerlink" title="2.2 常用极限求解的技巧"></a>2.2 常用极限求解的技巧</h3><ul>
<li><p>遇到三角函数求极限，并且趋于pi/2，pi这种的，大概率会使用<strong>诱导公式</strong>，使其简化：</p>
<ul>
<li>sin(π/2+α) = cosα；  cos(π/2+α) = -sinα；  sin(π/2-α) = cosα；  cos(π/2-α) =sinα；</li>
<li>sin(π+α) = -sinα；  cos(π+α) = -cosα；  sin(π-α) = sinα；  cos(π-α) = -cosα；</li>
<li>tan A= sin A/cos A；</li>
<li>tan（π/2＋α）＝－cotα；    tan（π/2－α）＝cotα；</li>
<li>tan（π－α）＝－tanα；       tan（π＋α）＝tanα；</li>
</ul>
</li>
<li><p>遇到<code>arctant-pi/2</code>在无穷处取极限时，一般多用<strong>洛必达</strong>。</p>
</li>
<li><p>遇到cotx一般使用诱导公式转化为tanx</p>
</li>
<li><p>与积分项无关的可以进行<strong>提取无关项</strong></p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/88376151BD1E18A107886CDBFBD2401B.jpg" style="zoom: 50%;" />
</li>
<li><p>遇到分式中带有<code>tan(tanx)</code> 或者 <code>sin(sinx)</code> 的情况求极限，解题方法一般是<strong><code>- tanx + tanx</code></strong>凑分式：</p>
</li>
</ul>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/CBCCF2B46C35AFDA6CE82CEE02E9300D.jpg" style="zoom: 50%;" />



<h3 id="2-3-n项之积或和的极限的求解"><a href="#2-3-n项之积或和的极限的求解" class="headerlink" title="2.3 n项之积或和的极限的求解"></a>2.3 n项之积或和的极限的求解</h3><ul>
<li><p>求n项之积或和的极限的常用方法有：<strong>1. 先计算和或积，再求极限</strong>， <strong>2. 夹逼定理</strong>，<strong>3. 定积分</strong></p>
<ul>
<li>分子从1到n这种形式的，多用夹逼准则</li>
<li>分子一样，且可以明显凑出（1+1/n）这种形式的，多用定积分</li>
<li>形如n次开根，多凑积分</li>
<li>什么时候考虑放缩（夹逼准则），什么时候用定积分 ——》分子不同用放缩</li>
</ul>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/DA2D5CC1A673590C56EFE1E8F5F006EC.jpg" style="zoom: 50%;" />

<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/3B5EA3738E0189E90799964D0217B9A6.jpg" style="zoom: 50%;" />

<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/B05D3E765EDBD1CB33AC9E16F133D504.jpg" style="zoom: 50%;" />



</li>
</ul>
<h3 id="2-4-单调有界准则的应用"><a href="#2-4-单调有界准则的应用" class="headerlink" title="2.4 单调有界准则的应用"></a>2.4 单调有界准则的应用</h3><p>求解步骤：</p>
<ul>
<li>可以先假设极限存在，求极限（当然这一步不需要写卷纸上）；再猜测数列是单调递减还是单挑递增</li>
<li>有界性证明：<ul>
<li>用<strong>数学归纳法</strong>证明数列有界</li>
<li><strong>不等式放缩</strong></li>
<li>函数有界性</li>
</ul>
</li>
<li>对于<strong>单调性</strong>的证明：<ul>
<li>利用<code>αn+1 - αn</code> 的正负来直接证明数列的单调性</li>
<li>假如上述的<code>αn+1 - αn</code> 不能直接看出正负，则有以下两种方法：<ul>
<li>对于<code>αn+1 - αn</code> 建立函数，求导，分析正负</li>
<li>或者使用<strong>中值定理</strong>，来判断αn+1 和 α 的大小</li>
</ul>
</li>
</ul>
</li>
<li>最后再设极限为A，根据数列递推式，求极限</li>
</ul>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/D4BEF271ACF23770E53203C98C0BBD69.jpg" style="zoom: 50%;" />

<h2 id="3-一元函数微分学"><a href="#3-一元函数微分学" class="headerlink" title="3 . 一元函数微分学"></a>3 . 一元函数微分学</h2><h3 id="3-1-知识点"><a href="#3-1-知识点" class="headerlink" title="3.1 知识点"></a>3.1 知识点</h3><ul>
<li><p>导数定义，以及<strong>证明：</strong>偶函数的导数是奇函数；奇函数的导数是偶函数；周期函数的导函数是周期函数。</p>
</li>
<li><p><strong>证明</strong>：(uv)’ = u’v + uv’  【凑】</p>
</li>
<li><p>分步积分法的由来：(uv)’ = u’v + uv’     -&gt;    d(uv) = vdu + udv</p>
</li>
<li><p><strong>ln|u(x)| = u’(x)/u(x)</strong>，视绝对值而不见</p>
</li>
<li><p>一阶微分形式不变，<strong>df(u) = f’(u)du</strong></p>
</li>
<li><p>单调必有反函数，反函数不一定单调</p>
<p>f’(x) ≠ 0   =&gt;   f(x)必然单调（单增或单减）；运用第五讲的<strong>导数零点定理</strong></p>
</li>
<li><p><font size = "5" color = "red"><strong>反函数求导：</strong></font></p>
<ul>
<li><strong>一阶导数：</strong></li>
<li><strong>二阶导数：</strong></li>
</ul>
</li>
<li><p>参数方程求导：</p>
<ul>
<li><strong>一阶导数：</strong></li>
<li><strong>二阶导数：</strong></li>
</ul>
</li>
<li><p>常用函数的麦克劳林展开式：</p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200704104842957.png" alt="麦克劳林展开" style="zoom: 67%;" />



</li>
</ul>
<ul>
<li>基本求导公式：<ul>
<li>待完成</li>
</ul>
</li>
</ul>
<h3 id="3-2-相关解题技巧"><a href="#3-2-相关解题技巧" class="headerlink" title="3.2 相关解题技巧"></a>3.2 相关解题技巧</h3><h2 id="4-一元函数微分学的几何应用"><a href="#4-一元函数微分学的几何应用" class="headerlink" title="4. 一元函数微分学的几何应用"></a>4. 一元函数微分学的几何应用</h2><h3 id="4-1-知识点"><a href="#4-1-知识点" class="headerlink" title="4.1 知识点"></a>4.1 知识点</h3><ul>
<li><p><strong>极值与最值</strong></p>
<p>在x0的某个邻域内：</p>
<ul>
<li>f(x) ≥ f(x0)，f(x0)为广义极小值点</li>
<li>f(x) &gt; f(x0)，f(x0)为真正极小值点</li>
<li>f(x) ≤ f(x0)，f(x0)为广义极大值点</li>
<li>f(x) &lt; f(x0)，f(x0)为真正极大值点</li>
</ul>
<p>对于f(x)的定义域：</p>
<ul>
<li>f(x) ≥ f(x0)（f(x) ≤ f(x0)），f(x0)为广义最小值点（或最大值）</li>
<li>f(x) &gt; f(x0)（f(x) &lt; f(x0)），f(x0)为真正最小值点（或最大值）</li>
</ul>
<p><strong>注意事项：</strong></p>
<ul>
<li>极值点并不一定是最值点，最值点也不一定是极值点</li>
<li>如果最值点x0不是定义域区间的端点值，那么x0必然是f(x)的一个极值点</li>
<li>强调一下：<strong>间断点可以是极值点</strong>，因为极值点的定义不要求连续，只讨论在一个点的邻域内的取值</li>
</ul>
</li>
<li><p><strong>单调性与极值的判别</strong></p>
<blockquote>
<p>f’(x) &gt; 0，则函数严格单调递增；f’(x) &lt; 0，则函数严格单调递减</p>
</blockquote>
<p><strong>一阶可导点是极值点的必要条件：</strong>f(x) 在 x = x0处可导，且在x0处取得极值，则必有f’(x0) = 0</p>
<ul>
<li>判别极值的第一充分条件：f(x) 在x0连续，<strong>左邻域和右邻域可导</strong>，且<strong>导数变号</strong></li>
<li>判别极值的第二充分条件：一阶导为0，二阶导不为0；二阶导大于0，极小值点；反之极大值点</li>
<li>判别极值的第三充分条件：1到n-1阶导为0，n阶导不为0；当n为偶数时，n阶导大于0，极小值点；反之极大值点</li>
</ul>
</li>
</ul>
<ul>
<li><p>凹凸性与拐点的概念</p>
<ul>
<li><p>凹弧：<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200720161932159.png" alt="image-20200720161932159" style="zoom:50%;" /></p>
</li>
<li><p>凸弧：<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200720162258791.png" alt="image-20200720162258791" style="zoom: 50%;" /></p>
</li>
<li><p>拐点：连续曲线的凹弧和凸弧的分界点，且<strong>拐点一定要是横纵坐标的集合：（x0，f(x0)）</strong></p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>凹凸性与拐点的判别：</p>
<blockquote>
<p>二阶导大于0，凹区间；二阶导小于0，凸区间</p>
</blockquote>
<p><strong>二阶可导点是拐点的必要条件：</strong>二阶导为0</p>
<ul>
<li>第一充分条件：f(x) 在x0连续，<strong>左邻域和右邻域二阶可导</strong>，且<strong>导数变号</strong></li>
<li>第二充分条件：二阶导为0，三阶导不为0</li>
<li>第三充分条件：2到n-1阶导为0，n阶导不为0；当n为奇数时，(x0, f(x0))为拐点，<strong>不需要一阶导为0</strong></li>
</ul>
</li>
</ul>
<ul>
<li><p>渐近线</p>
<ul>
<li>铅锤渐近线：在函数的<strong>无定义点</strong>取函数极限等于<strong>无穷</strong></li>
<li>水平渐近线：当x趋向于无穷时取函数极限等于<strong>常值</strong></li>
<li>斜渐近线：<strong>当x趋向于无穷时取函数极限等于无穷</strong>时，求<strong>f(x)/x</strong>趋向于无穷时的极限值k，再求<strong>f(x) - kx</strong>趋向于无穷时的极限值b，得斜渐进线为<strong>y = kx + b</strong></li>
</ul>
</li>
</ul>
<ul>
<li>作函数图形<ol>
<li>确定函数定义域，考察函数的奇偶对称性</li>
<li>求出f’(x)，f’’(x)，用f(x)的无定义点，f’(x) = 0和不存在的点，f’’(x = 0和不存在的点，将定义域划分为若干个子区间，确定函数在各个区间上的单调性和凹凸性；确定函数的极值点和拐点</li>
<li>确定函数渐进线</li>
<li>做出函数图形</li>
</ol>
</li>
</ul>
<h3 id="4-2-一元函数微分学的几何应用的解题技巧"><a href="#4-2-一元函数微分学的几何应用的解题技巧" class="headerlink" title="4.2 一元函数微分学的几何应用的解题技巧"></a>4.2 一元函数微分学的几何应用的解题技巧</h3><ul>
<li><p>求函数的极值点，先求一阶导数，令其为0，求解参数；再求<strong>二阶导检查不为0</strong>；根据一阶导数，分析极小还是极大值点。</p>
</li>
<li><p>对于求解函数某一点附近的凹凸性，求解其二阶导数在该点的值，根据<strong>局部保号性</strong>，判断凹凸性。</p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/FD8E8CA4CD648F783FCFB032B249B46C.jpg" style="zoom: 50%;" />



</li>
</ul>
<ul>
<li><p>关于<strong>函数图像的绘制步骤</strong>：</p>
<ol>
<li>求解函数的定义域，判断奇偶性</li>
<li>求解f’(x) = 0，f’’(x) = 0，绘制表格，写出单调区间和凹凸区间及拐点</li>
<li>求解渐进线 ：铅锤渐进线，水平渐进线，斜渐近线</li>
<li>绘制函数图像</li>
</ol>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/B9A2BC07985CD05CA1ED404FA1666410.jpg" style="zoom: 50%;" />



</li>
</ul>
<h2 id="5-中值定理"><a href="#5-中值定理" class="headerlink" title="5. 中值定理"></a>5. 中值定理</h2><h3 id="5-1-知识点"><a href="#5-1-知识点" class="headerlink" title="5.1 知识点"></a>5.1 知识点</h3><h4 id="5-1-1-有界与最值定理"><a href="#5-1-1-有界与最值定理" class="headerlink" title="5.1.1 有界与最值定理"></a>5.1.1 有界与最值定理</h4><blockquote>
<p>函数f(x)在[a,b]连续</p>
</blockquote>
<p>m ≤ f(x) ≤ M，其中m，M分别为f(x)在[a,b]上的最小值和最大值</p>
<h4 id="5-1-2-介值定理"><a href="#5-1-2-介值定理" class="headerlink" title="5.1.2 介值定理"></a>5.1.2 介值定理</h4><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/1.jpg" style="zoom: 50%;" />

<h4 id="5-1-3-平均值定理"><a href="#5-1-3-平均值定理" class="headerlink" title="5.1.3 平均值定理"></a>5.1.3 平均值定理</h4><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/0A5886715743C4068577EBEBD3F14449.jpg" style="zoom: 50%;" />

<h4 id="5-1-4-零点定理"><a href="#5-1-4-零点定理" class="headerlink" title="5.1.4 零点定理"></a>5.1.4 零点定理</h4><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200711131621895.png" alt="image-20200711131621895" style="zoom: 80%;" />

<h4 id="5-1-5-费马定理（很重要）"><a href="#5-1-5-费马定理（很重要）" class="headerlink" title="5.1.5 费马定理（很重要）"></a>5.1.5 费马定理（很重要）</h4><blockquote>
<p>费马定理的使用：需要说明<strong>可导函数的最值在区间内部取到</strong>，即端点非最值点</p>
</blockquote>
<p><strong>设f(x)满足在x0点处 ①可导 ②取极值，则f’(x0) = 0</strong></p>
<p><strong>费马定理的证明：</strong></p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200711131723058.png" style="zoom:67%;" />

<p><strong>导数零点定理：</strong></p>
<blockquote>
<p>和零点定理不同的是：零点定理要求函数连续，但是导数零点定理不需要；只要可导函数的导函数可以找到乘积为负数的两点，即可说明导数存在零点；也就是说导函数的性质包含了函数平常的 <strong>“连续性”</strong>，在下面的介值定理证明。</p>
</blockquote>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/5F95877A4A88771FBDEFCCB2FFF4289A.jpg" alt="5F95877A4A88771FBDEFCCB2FFF4289A" style="zoom: 50%;" />



<p><strong>导数介值定理：</strong></p>
<blockquote>
<p>可导函数的导函数，只要取两点的导数f’(a)和f’(b)，对于在 [f’(a), f’(b)]之间任意的值，都是可以取到的。这也可以说明，<strong>可导函数的导函数一定是连续或者存在振荡间断点</strong>。</p>
</blockquote>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/5C50BD13ED5A86207E22300A4F4A92EF.jpg" alt="5C50BD13ED5A86207E22300A4F4A92EF" style="zoom:50%;" />

<p>上述两个证明本质都是一样的，都是证明在断点处取不到最值点，也就是说<strong>最值点在区间内部取得</strong>，正好符合罗尔定理的条件。</p>
<p><strong>极限保号性（极其重要）</strong></p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/B1251706E1FACAA3EC6BA15FCD756CD4.jpg" alt="极限保号性" style="zoom: 33%;" />



<h4 id="5-1-6-罗尔定理（很重要）"><a href="#5-1-6-罗尔定理（很重要）" class="headerlink" title="5.1.6 罗尔定理（很重要）"></a>5.1.6 罗尔定理（很重要）</h4><ul>
<li><p>罗尔定理</p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200711131813025.png" style="zoom:80%;" />

<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200711131927518.png" style="zoom:80%;" />


</li>
</ul>
<p><strong>罗尔定理的使用重点在于证明端点值相等</strong></p>
<h4 id="5-1-7-拉格朗日中值定理（极其重要）"><a href="#5-1-7-拉格朗日中值定理（极其重要）" class="headerlink" title="5.1.7 拉格朗日中值定理（极其重要）"></a>5.1.7 拉格朗日中值定理（极其重要）</h4><ul>
<li>拉格朗日中值定理</li>
</ul>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200711132009385.png" style="zoom: 67%;" />

<ul>
<li><p>拉格朗日中值定理的证明</p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/D2BD81541485F90A30C2854154EB5AD8.jpg" alt="D2BD81541485F90A30C2854154EB5AD8" style="zoom:50%;" />



</li>
</ul>
<h4 id="5-1-8-柯西中值定理"><a href="#5-1-8-柯西中值定理" class="headerlink" title="5.1.8 柯西中值定理"></a>5.1.8 柯西中值定理</h4><ul>
<li>注意不能使用两个拉格朗日定理相除证明柯西中值定理，因为两个（kesai）不一样</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200815174400768.png" alt="image-20200815174400768" title="">
                </div>
                <div class="image-caption">image-20200815174400768</div>
            </figure>



<h4 id="5-1-9-泰勒公式"><a href="#5-1-9-泰勒公式" class="headerlink" title="5.1.9 泰勒公式"></a>5.1.9 泰勒公式</h4><ul>
<li><p>带拉格朗日余项的n阶泰勒公式</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">f(x) = f(x0) + f<span class="number">'</span>(x0)(x - x0) +...+ <span class="number">1</span>/n! * fn(x0)(x - x0)^n + </span><br><span class="line">			fn+<span class="number">1</span>(η)/(n+<span class="number">1</span>)! * (x - x0)^(n + <span class="number">1</span>)	</span><br><span class="line"><span class="comment">// η介于x，x0之间</span></span><br><span class="line"><span class="comment">// 该余项称为n阶拉格朗日余项</span></span><br></pre></td></tr></table></figure>

<p>带拉格朗日余项的n阶泰勒公式是<strong>一个区间的过程</strong>，x - x0并非是无穷小</p>
</li>
</ul>
<ul>
<li><p>带佩亚诺余项的n阶泰勒公式</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">f(x) = f(x0) + f<span class="number">'</span>(x0)(x - x0) +...+ <span class="number">1</span>/n! * fn(x0)(x - x0)^n + O((x - x0)^n)</span><br><span class="line"><span class="comment">// n阶皮亚诺余项</span></span><br></pre></td></tr></table></figure>

<p>带佩亚诺余项的n阶泰勒公式是在<strong>x -&gt; x0</strong>的过程进行展开的，是一个<strong>局部的过程</strong>，x - x0是无穷小</p>
</li>
</ul>
<ul>
<li><p>常用的重要函数的麦克劳林展开式：</p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/039C02DB1E22F226EDAFF40F7D2C8B60.jpg" alt="039C02DB1E22F226EDAFF40F7D2C8B60" style="zoom: 50%;" />



</li>
</ul>
<h4 id="5-1-10-积分中值定理"><a href="#5-1-10-积分中值定理" class="headerlink" title="5.1.10 积分中值定理"></a>5.1.10 积分中值定理</h4><p>积分中值定理分为闭区间和开区间两种，闭区间使用介值定理证明，开区间使用拉格朗日中值定理证明；既然开区间可使用，自然可以推出闭区间。</p>
<ul>
<li>开区间证明：</li>
</ul>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/30F07526C10914338D262161606F2562.jpg" alt="30F07526C10914338D262161606F2562" style="zoom:50%;" />



<ul>
<li>闭区间证明：</li>
</ul>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/8D6A82AA73C7C193A4F54477E8138664.jpg" alt="8D6A82AA73C7C193A4F54477E8138664" style="zoom:50%;" />



<h3 id="5-2-中值定理解题技巧"><a href="#5-2-中值定理解题技巧" class="headerlink" title="5.2 中值定理解题技巧"></a>5.2 中值定理解题技巧</h3><ul>
<li>证明存在存在导数为0的点：<ol>
<li>费马定理：可导且区间内取到极值，而对于区间内取到极值的证明：<strong>端点处不为最值</strong></li>
<li>罗尔定理：连续可导，f(a) = f(b)</li>
</ol>
</li>
<li>一般遇到一阶连续导函数或者二阶连续导函数，要想到对一阶导数或二阶导数使用<strong>介值定理</strong></li>
<li>对于f(x)和f’(x)的关系，要想到使用<strong>拉格朗日中值定理</strong></li>
<li>遇到f(0) = 0，优先想到<strong>拉格朗日中值定理：</strong>f(x) - f(0) = f‘(η)*x </li>
<li>对于罗尔定理的使用，大部分需要构造辅助函数，常使用<em>(uv)’ = u’v + uv’</em>来构造<ul>
<li>见到<strong>f(x)f’(x)</strong>，做<strong>F(x) = f²(x)</strong></li>
<li>见到<strong>[f’(x)]² + f(x)f’’(x)</strong>，做<strong>F(x) = f(x)f’(x)</strong></li>
<li>见到<strong>f’(x) + f(x)Φ’(x)</strong>，做<strong>F(x) = f(x)exp{Φ(x)}</strong>，关于这一点有以下几种常考情形：<ul>
<li>见到<strong>f’(x) + f(x)</strong>，做<strong>F(x) = f(x)exp{x}</strong></li>
<li>见到<strong>f’(x) - f(x)</strong>，做<strong>F(x) = f(x)exp{-x}</strong></li>
<li>见到<strong>f’(x) + kf(x)</strong>，做<strong>F(x) = f(x)exp{kx}</strong></li>
</ul>
</li>
<li>还有其他的几种情况：<ul>
<li>见到<strong>f(η) = η</strong>，多想到做<strong>F(x) = f(x) - x</strong></li>
</ul>
</li>
</ul>
</li>
<li>注意<strong>区间的划分</strong>，需要多次使用<strong>罗尔定理</strong>或<strong>拉格朗日中值定理</strong>：<ul>
<li>特别是两个不同的参数之间的函数关系，常用的做法就是<strong>假定一个分界</strong>，在<strong>左区间和右区间分别使用拉格朗日中值定理</strong>，然后根据题目已知的函数关系，<strong>设置初始假定的分界</strong></li>
</ul>
</li>
<li>证明二阶导为0，常用的做法有：分区间使用多次<strong>罗尔定理</strong>和<strong>泰勒公式</strong></li>
<li>证明积分和二阶导的关系要想到<strong>泰勒公式</strong></li>
</ul>
<h2 id="6-零点问题和微分不等式"><a href="#6-零点问题和微分不等式" class="headerlink" title="6. 零点问题和微分不等式"></a>6. 零点问题和微分不等式</h2><h3 id="6-1-知识点"><a href="#6-1-知识点" class="headerlink" title="6.1 知识点"></a>6.1 知识点</h3><ul>
<li>罗尔原话：<strong>若f(x)的n阶导 = 0至多有k个根，则f(x) = 0至多有k + n个根</strong></li>
<li><strong>实系数奇次方程至少有一个实根</strong></li>
</ul>
<h3 id="6-2-解题技巧"><a href="#6-2-解题技巧" class="headerlink" title="6.2 解题技巧"></a>6.2 解题技巧</h3><ol>
<li><p>含参数的零点问题：</p>
<ul>
<li>导数参数不含参数：在结果中讨论参数（曲线与x轴的位置关系）</li>
<li>导数中含有参数：在求导过程中讨论参数的取值（确定函数性态，包括单调性凹凸性）</li>
</ul>
<p><strong>优秀例题：</strong></p>
</li>
</ol>
<ol start="2">
<li>拉格朗日中值定理使用证明不等式</li>
</ol>
<p>​        <strong>优秀例题：</strong></p>
<h2 id="7-一元函数积分学的概念与计算"><a href="#7-一元函数积分学的概念与计算" class="headerlink" title="7. 一元函数积分学的概念与计算"></a>7. 一元函数积分学的概念与计算</h2><h3 id="7-1-知识点"><a href="#7-1-知识点" class="headerlink" title="7.1 知识点"></a>7.1 知识点</h3><h4 id="7-1-1-不定积分"><a href="#7-1-1-不定积分" class="headerlink" title="7.1.1 不定积分"></a>7.1.1 不定积分</h4><ul>
<li>论述函数f(x)的原函数和不定积分，必须指明f(x)的定义区间</li>
<li>不定积分存在定理：<ul>
<li>连续函数f(x)必有原函数F(x)</li>
<li>含有第一类间断点和无穷间断点的函数在该区间必没有原函数F(x)</li>
<li>根据前面学到的<strong>导数介值定理</strong>，可导函数的导函数必然连续或者含有振荡间断点</li>
</ul>
</li>
</ul>
<h4 id="7-1-2-定积分"><a href="#7-1-2-定积分" class="headerlink" title="7.1.2 定积分"></a>7.1.2 定积分</h4><ul>
<li><p>定积分的精确定义，见张宇36讲 P105</p>
</li>
<li><p>定积分存在定理：</p>
<p><strong>充分条件：</strong></p>
<ul>
<li>f(x)在[a, b]连续，则f(x)在[a, b]的定积分一定存在</li>
<li>f(x)在[a, b]单调，则f(x)在[a, b]的定积分一定存在</li>
<li>f(x)在[a, b]上<strong>有界</strong>，且存在有限个间断点，则f(x)在[a, b]的定积分一定存在</li>
</ul>
<p><strong>必要条件：</strong></p>
<ul>
<li>如果在[a, b]上定积分存在，则f(x)必然有界</li>
</ul>
<p><font color = "red"><strong>定积分和不定积分存在的区别：</strong></font></p>
<ol>
<li>不定积分的存在：连续函数必有原函数，不定积分的存在强调的是<strong>函数可导</strong></li>
<li>定积分存在：<strong>定积分强调可积，所以连续、单调、有界的函数必然可积</strong>；这里要区分反常积分</li>
</ol>
</li>
<li><p>定积分的性质：</p>
<ol>
<li>对1积分 = 区间长度</li>
<li>积分的线性叠加性</li>
<li>积分的可拆性：对[a,c]积分 = a到b积分 + b到c积分</li>
<li><font color ="red"><strong>积分的保号性：</strong></font><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200806003339824.png" alt="image-20200806003339824" style="zoom:67%;" /></li>
<li>估值定理：<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200806002839382.png" alt="image-20200806002839382" style="zoom:67%;" /></li>
<li>中值定理：<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200806003053523.png" alt="image-20200806003053523" style="zoom:67%;" /> 证明：构建变限积分原函数，使用拉格朗日中值定理</li>
</ol>
</li>
</ul>
<h4 id="7-1-3-变限积分"><a href="#7-1-3-变限积分" class="headerlink" title="7.1.3 变限积分"></a>7.1.3 变限积分</h4><ul>
<li><p>变限积分的概念</p>
<p>变限积分<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200806120557655.png" alt="image-20200806120557655" style="zoom:67%;" />，是函数f(x)在区间[a,b]上的一个原函数</p>
</li>
<li><p>变限积分的性质</p>
<ol>
<li>f(x)在[a, b]上可积，则F(x)【f(x)的变上限积分】连续</li>
<li>f(x)在[a, b]上连续，则F(x)【f(x)的变上限积分】可导</li>
<li>只要变限积分F(x)存在，就必然是连续的</li>
</ol>
</li>
<li><p>变现积分的求导</p>
<ol>
<li>上限求导 * 上限带入f(x) - 下限求导 * 下限带入f(x)</li>
<li>如果积分函数f的自变量为x-t形式，则需要<strong>换元：令x-t = u</strong></li>
</ol>
</li>
</ul>
<h4 id="7-1-4-反常积分"><a href="#7-1-4-反常积分" class="headerlink" title="7.1.4 反常积分"></a>7.1.4 反常积分</h4><p>反常积分一定要区分与定积分，定积分的两个必要条件：<strong>1.积分区间有限 2.被积函数有界</strong></p>
<p>一般来说，<strong>f(x)越小，则在a到无穷积分越容易收敛</strong></p>
<p>注意：</p>
<ol>
<li>f(x)在a到无穷积分收敛不能推出f(x)以0为极限，例如f(x)不连续，只在某几段区间存在值</li>
<li>个人看法：若f(x)连续，a到无穷积分收敛可以推出f(x)以0为极限</li>
</ol>
<p><font color = "red" size = "4"><strong>无穷区间</strong></font> <font color = "blue" size = "4"><strong>反常积分敛散性判别</strong></font> <font size = "6" color = "ligreen"><strong>复习薄弱的知识点</strong></font></p>
<ul>
<li><p>收敛概念</p>
<ol>
<li><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200806131047335.png" alt="image-20200806131047335" style="zoom:50%;" />；极限存在，则该反常积分收敛</li>
<li><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200806131126490.png" alt="image-20200806131126490" style="zoom:50%;" />；极限存在，则该反常积分收敛</li>
<li><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200806131200791.png" alt="image-20200806131200791" style="zoom:50%;" />；极限存在，则该反常积分收敛</li>
</ol>
</li>
<li><p>判别方法</p>
<ol>
<li>比较审敛原理：小的发散，大的发散；大的收敛，小的收敛</li>
<li>类比p级数，当p&gt;1时，x^p无穷积分收敛；p&lt;=1，x^p无穷积分发散</li>
<li>结合1和2，有一个比较审敛法</li>
<li><font color = "#FF3399"><strong>极限审敛法：</strong></font> </li>
</ol>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200806135634913.png" alt="image-20200806135634913" style="zoom:67%;" />



</li>
</ul>
<p><font color = "red" size = "4"><strong>无界函数</strong></font> <font color = "blue" size = "4"><strong>反常积分敛散性判别</strong></font></p>
<ul>
<li><p>收敛概念</p>
<p>如果积分区间存在瑕点（无定义点），则对该瑕点左右取极限，极限存在则反常积分存在</p>
</li>
<li><p>判别方法</p>
<ol>
<li>比较审敛法：小的发散，大的发散；大的收敛，小的收敛</li>
<li><font color = "#FF3399"><strong>极限审敛法：</strong></font> </li>
</ol>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200806140948504.png" alt="image-20200806140948504" style="zoom:67%;" />

</li>
</ul>
<p><font color= "red" size =  "4"><strong>𝛤 函数</strong></font></p>
<ul>
<li>定义：<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200806133006126.png" alt="image-20200806133006126" style="zoom:67%;" /></li>
<li>基本性质和常用函数值：<ol>
<li><font size = "4">𝛤(s + 1) = s𝛤(s) （s &gt; 0）</font></li>
<li><font size = "4">𝛤(1) = 1    𝛤(2) = 1    𝛤(3) = 2   …    𝛤(n+1) = n! </font></li>
<li>.<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200806132625559.png" alt="image-20200806132625559" style="zoom:67%;" /></li>
</ol>
</li>
</ul>
<h4 id="7-1-5-不定积分的计算"><a href="#7-1-5-不定积分的计算" class="headerlink" title="7.1.5 不定积分的计算"></a>7.1.5 不定积分的计算</h4><ol>
<li><p>基本积分公式</p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200806142846443.png" alt="image-20200806142846443"  />
</li>
<li><p>凑微分法</p>
<p>凑微分法需要有眼力劲，比较简单的比如 (1/x)dx = d(lnx)</p>
</li>
</ol>
<ol start="3">
<li><p><font color = "red" size = "3"><strong>换元法</strong></font></p>
<p>这个方法是比较常用的；<strong>x = g(u)须是单调可导函数，且计算结束后需要回带</strong>，<font color = "#FF00FF" size = "3"><strong>换元过程中，需要注意是否存在瑕点</strong></font></p>
<ol>
<li><pre><code>三角代换：x = a * sint, x = a * tant, x = a * sect
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2.</span><br></pre></td></tr></table></figure>
遇到根号的，可以先做恒等变形，在进行三角代换
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3.</span><br></pre></td></tr></table></figure>
遇到根号的，除了三角代换，还可以令整个根号等于 t</code></pre></li>
<li><p><strong>倒代换：</strong>被积函数分母的幂次比分子高两次，做倒代换，x = 1/t</p>
</li>
</ol>
</li>
</ol>
<ol start="4">
<li><p><strong>分部积分法</strong></p>
<ul>
<li><p>基本思想：<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200806174239207.png" alt="image-20200806174239207" style="zoom:80%;" /></p>
</li>
<li><p><font color = "blue" size = "4"><strong>反对幂三指，谁在前谁做u</strong></font></p>
</li>
<li><p>e^x和三角函数的乘积，例如 e^x * sinx 使用分部积分会出现<font color = "red"><strong>积分循环，进而积分抵消</strong></font></p>
</li>
<li><p><font color = "red" size = "4"><strong>分部积分打表法：</strong></font></p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200806203549432.png" alt="image-20200806203549432" style="zoom:80%;" />
</li>
</ul>
</li>
<li><p>有理函数的积分</p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200806175522093.png" alt="image-20200806175522093" style="zoom: 80%;" />



</li>
</ol>
<h4 id="7-1-6-定积分的计算"><a href="#7-1-6-定积分的计算" class="headerlink" title="7.1.6 定积分的计算"></a>7.1.6 定积分的计算</h4><ul>
<li>关于定积分的计算，就是不定积分 + 上下限</li>
</ul>
<p><font color = "blue" ><strong>定积分计算相关结论：</strong></font></p>
<ol>
<li><p>f(x)为偶函数，则在对称区间的积分 = 2 * 单侧区间的积分；<strong>扩展：f(x)以x = a对称，若积分区间以x=a对称，则该积分 = 2 * 单侧区间的积分</strong></p>
</li>
<li><p>f(x)为积函数，则在对称区间的积分 = 0；<strong>扩展：f(x)以 (a, 0) 对称，若积分区间以x=a对称，则该积分 = 0</strong></p>
</li>
<li><p>f(x)是以T为周期的连续函数，则<font color = "red"><strong>一个周期的积分与积分起点无关（如下图）</strong></font></p>
<p>f(x)以T为周期函数，则 f(x)的一切原函数也以T为周期 &lt; == &gt; f(x)在一个周期的积分为 0</p>
</li>
</ol>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200806204314696.png" alt="image-20200806204314696" style="zoom: 67%;" />



<ol start="4">
<li><p><font color = "#FF00FF" size = "4"><strong>区间再现公式：</strong></font></p>
<p>区间再现公式经常结合三角函数使用，<strong>三角函数诱导公式：奇变偶不变，符号看象限</strong></p>
</li>
</ol>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200806212125459.png" alt="image-20200806212125459" style="zoom:67%;" />

<p>​        区间在线公式的使用标志：<font color = "#059"><strong>x * 三角函数、tanx</strong></font>；使用之后可能会出现<strong>积分抵消</strong></p>
<ol start="5">
<li><p><font color = "#BD2D30" size = "4"><strong>华里士公式：</strong></font></p>
<p><strong>公式的使用：</strong></p>
</li>
</ol>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200806214215468.png" alt="image-20200806214215468" style="zoom: 67%;" />

<p>​        <strong>公式的证明：</strong></p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200806214833848.png" alt="image-20200806214833848" style="zoom:67%;" />



<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200806214856505.png" alt="image-20200806214856505" style="zoom:67%;" />



<h3 id="7-2-相关解题技巧"><a href="#7-2-相关解题技巧" class="headerlink" title="7.2 相关解题技巧"></a>7.2 相关解题技巧</h3><ul>
<li>遇到夹逼准则失效时，可以考虑使用定积分，其关键是凑出 <font color = "red"><strong>i/n 以及无穷项的和</strong></font></li>
<li><font color = "orag" size = "5"><strong>定积分中换元法的注意事项，很重要！！！</strong></font><ol>
<li>换元法中的 x = g(u) 必须是<strong>单调函数</strong></li>
<li>如果在换元过程中出现 <font color = "red"><strong>无穷间断点</strong></font> 或者  <font color = "red"><strong>分段单调</strong></font> 的情况，则<strong>需要将积分区间分为若干个小区间</strong></li>
<li>换元时，还可以考虑被积函数的<strong>奇偶性</strong> 和 <strong>周期性</strong></li>
</ol>
</li>
<li>有时候定积分<strong>区间内部本身存在瑕点</strong>，需要使用叠加性分区间讨论</li>
</ul>
<h2 id="8-一元函数积分学的几何应用"><a href="#8-一元函数积分学的几何应用" class="headerlink" title="8. 一元函数积分学的几何应用"></a>8. 一元函数积分学的几何应用</h2><h3 id="8-1-知识点"><a href="#8-1-知识点" class="headerlink" title="8.1 知识点"></a>8.1 知识点</h3><h4 id="8-1-1-平面图形的面积"><a href="#8-1-1-平面图形的面积" class="headerlink" title="8.1.1 平面图形的面积"></a>8.1.1 平面图形的面积</h4><p>函数定积分，确定上下限</p>
<h4 id="8-1-2-旋转体的体积"><a href="#8-1-2-旋转体的体积" class="headerlink" title="8.1.2 旋转体的体积"></a>8.1.2 旋转体的体积</h4><ul>
<li><p>绕x轴旋转：</p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200806195842128.png" alt="image-20200806195842128" style="zoom:80%;" />
</li>
<li><p>绕y轴旋转：</p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200806195751510.png" alt="image-20200806195751510" style="zoom:80%;" />

<p><strong>推导：体积微元 dV = 2 * Pi * x * |y(x)|dx</strong></p>
</li>
</ul>
<ul>
<li><p>绕自定义轴 y = a 或 x = b旋转：</p>
<p>只要确定<strong>体积微元中圆的半径</strong>即可</p>
</li>
</ul>
<h4 id="8-1-3-函数的平均值"><a href="#8-1-3-函数的平均值" class="headerlink" title="8.1.3 函数的平均值"></a>8.1.3 函数的平均值</h4><p>函数平均值 = 函数积分 / 积分区间</p>
<h3 id="8-2-相关解题技巧"><a href="#8-2-相关解题技巧" class="headerlink" title="8.2 相关解题技巧"></a>8.2 相关解题技巧</h3><ul>
<li>直角坐标系：直角坐标系比较简单，确定上下限和曲线方程即可</li>
<li>参数方程：参数方程可以看作是直角坐标的换元，<font color = "red"><strong>换元要三环：积分上下限，被积函数，dx；</strong></font><font color = "blue"><strong>值得注意的是，这里的被积函数直接换成参数方程的 y 表达式即可</strong></font></li>
<li>极坐标：扇形面积的微元是 <figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200806200931716.png" alt="image-20200806200931716" title="">
                </div>
                <div class="image-caption">image-20200806200931716</div>
            </figure></li>
</ul>
<p><strong>重要的曲线：</strong></p>
<ol>
<li>摆线</li>
<li>心形线</li>
<li>双扭线</li>
<li>星形线</li>
</ol>
<h2 id="9-积分等式与积分不等式"><a href="#9-积分等式与积分不等式" class="headerlink" title="9. 积分等式与积分不等式"></a>9. 积分等式与积分不等式</h2><h3 id="9-1-知识点"><a href="#9-1-知识点" class="headerlink" title="9.1 知识点"></a>9.1 知识点</h3><h4 id="9-1-1-积分等式"><a href="#9-1-1-积分等式" class="headerlink" title="9.1.1 积分等式"></a>9.1.1 积分等式</h4><ul>
<li><p>手段1—中值定理</p>
<p>常用的就是罗尔定理、拉格朗日中值定理、柯西中值定理</p>
<ol>
<li>关键的就是构造变上限函数，进而<strong>构造所求原函数</strong></li>
<li><strong>零点问题</strong></li>
</ol>
</li>
<li><p>手段2—夹逼准则</p>
<p>见到<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200807124357325.png" alt="image-20200807124357325" style="zoom: 80%;" />类似的，需要想到使用<font color = "red"><strong>夹逼准则</strong></font></p>
<p>因此需要掌握必要的放缩不等式：</p>
</li>
</ul>
<ul>
<li><p>手段3—积分法</p>
<p>这里出题的话，主要还是定积分，因此需要掌握定积分的基本方法：除了四大积分法——凑微分、换元法、分部积分法、有理函数积分法之外，最最重要的就是<font size = "4" color = "purple"><strong>区间再现公式，以及被积函数的奇偶性、周期性、对称性</strong></font>。</p>
</li>
</ul>
<p>  其中<strong>区间再现积分法</strong>经常结合 <font color = "red"><strong>x * 三角函数 或者 x * 周期函数</strong></font> 而使用</p>
<ul>
<li><p>手段4—泰勒公式</p>
<p><font color = "blue"><strong>使用标志：题目所给条件为 “f(x)二阶可导”</strong></font></p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200807140356662.png" alt="image-20200807140356662" style="zoom:80%;" />



</li>
</ul>
<h4 id="9-1-2-积分不等式"><a href="#9-1-2-积分不等式" class="headerlink" title="9.1.2 积分不等式"></a>9.1.2 积分不等式</h4><ul>
<li><p>手段1—函数单调性</p>
<ol>
<li>函数积分的估值定理</li>
<li>构造<strong>变上限原函数</strong>，接着求导，该过程中可能需要借助基本不等式。</li>
</ol>
</li>
<li><p>手段2—中值定理</p>
<p><font color = "blue"><strong>使用标志：题目所给条件为 “f(x)一阶可导且某一端点值简单(为0)”</strong></font></p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200807140058204.png" alt="image-20200807140058204" style="zoom:80%;" />



</li>
</ul>
<ul>
<li><p>手段3—泰勒公式</p>
<p><font color = "blue"><strong>使用标志：题目所给条件为 “f(x)二阶可导且某一端点值简单(为0)”</strong></font></p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200807140135006.png" alt="image-20200807140135006" style="zoom:80%;" />



</li>
</ul>
<ul>
<li><p>手段4—积分法</p>
<p>不等式采用积分法主要还是定积分</p>
</li>
</ul>
<h3 id="9-2-相关解题技巧"><a href="#9-2-相关解题技巧" class="headerlink" title="9.2 相关解题技巧"></a>9.2 相关解题技巧</h3><ul>
<li>有时候需要使用拉格朗日中值定理，但是f(x)并未指明是否可导，这个时候可以借助<strong>f(x)的变上限函数</strong></li>
<li>f(x)一阶可导，则f(x)变限积分二阶可导；f(x)二阶可导，则f(x)变限积分三阶可导</li>
</ul>
<h2 id="10-多元函数微分学"><a href="#10-多元函数微分学" class="headerlink" title="10. 多元函数微分学"></a>10. 多元函数微分学</h2><h3 id="10-1-知识点"><a href="#10-1-知识点" class="headerlink" title="10.1 知识点"></a>10.1 知识点</h3><ul>
<li><p>极限：</p>
<p>对于一元函数来说，极限的趋近方式只有一种，也就是直线趋近；</p>
<p>但是对于二元函数来说，某一个点的领域是一个圆，所以极限的趋近方式有很多，例如以<strong>y = x、y = -x、y = x^2</strong>等等，只有每一种趋近方式的结果都相同，该点处的极限才存在</p>
</li>
<li><p>连续：</p>
<p><font color = "red"><strong>二元函数的连续是需要按照不同的趋近方式来看的</strong></font></p>
</li>
<li><p>偏导数：</p>
<p><strong>偏导的定义：</strong><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200807193432155.png" alt="image-20200807193432155" style="zoom: 50%;" /></p>
<p><font color = "blue"><strong>二元函数的连续和可偏导没有必要联系，即  连续 &lt;=≠=&gt; 偏导存在</strong></font></p>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200807231525415.png" alt="image-20200807231525415"></p>
</li>
</ul>
<ul>
<li><p>可微：</p>
<p>可微的判断：</p>
<ol>
<li>写出全增量：<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200807193630883.png" alt="image-20200807193630883" style="zoom:80%;" /></li>
<li>写出线性增量：<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200807193826331.png" alt="image-20200807193826331" style="zoom:80%;" /></li>
<li>做极限：<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200807194135857.png" alt="image-20200807194135857" style="zoom:80%;" /></li>
<li>如果该极限为0，则可微</li>
</ol>
</li>
<li><p>偏导数连续：</p>
<ol>
<li>用定义法求出：<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200807194233066.png" alt="image-20200807194233066" style="zoom: 67%;" /></li>
<li>用公式法求出：<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200807194348610.png" alt="image-20200807194348610" style="zoom:67%;" /></li>
<li>对公式法求出的偏导取极限，与定义法求出的进行比较，相等则偏导连续。</li>
</ol>
</li>
<li><p><strong>链式求导：</strong><font color = "red"><strong>求导后的新函数仍然具有与原函数完全相同的复合结构</strong></font></p>
<p>遇到比较复杂的函数关联，可以<strong>作图</strong>，绘制相关的变量依存关系</p>
</li>
<li><p><strong>隐函数求导：</strong></p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200807200003815.png" alt="image-20200807200003815" style="zoom:80%;" />
</li>
<li><p>无条件极值：</p>
<ol>
<li>求出可疑点，即导数为0的点</li>
<li>求二阶偏导，即 A、B、C</li>
<li>B^2 - AC &lt; 0，则该点为极值；此时A大于0，为极小值；A小于0，为极大值</li>
<li>B^2 - AC &gt; 0，则该点非极值</li>
<li>B^2 - AC = 0，该方法失效</li>
</ol>
</li>
<li><p>有条件极值：</p>
<p><font color = "blue"><strong>拉格朗日数乘法：</strong></font></p>
<ol>
<li>目标函数 u = f(x,y,z)，约束条件 φ(x,y,z) = 0 和 ψ(x,y,z)</li>
<li>构造辅助函数 F(x,y,z,λ,μ) = f(x,y,z) + λφ(x,y,z) + μψ(x,y,z)</li>
<li>辅助函数对每一个变量求偏导且等于0</li>
<li>求解方程，得到若干备选点</li>
<li>在这些点中得到最大最小值</li>
</ol>
</li>
</ul>
<h3 id="10-2-相关解题技巧"><a href="#10-2-相关解题技巧" class="headerlink" title="10.2 相关解题技巧"></a>10.2 相关解题技巧</h3><ul>
<li>求函数 f(x,y) 在某区域D上的最值的步骤<ol>
<li>求出 f(x,y) 在D内的所有可疑点处的函数值</li>
<li>求出 f(x,y) 在D的边界上的最值：使用<font color = "red"><strong>拉格朗日数乘法</strong></font></li>
<li>在得到的所有函数值中找最大值和最小值</li>
</ol>
</li>
</ul>
<h2 id="11-二重积分"><a href="#11-二重积分" class="headerlink" title="11. 二重积分"></a>11. 二重积分</h2><h3 id="11-1-知识点"><a href="#11-1-知识点" class="headerlink" title="11.1 知识点"></a>11.1 知识点</h3><h4 id="11-1-1-二重积分的性质"><a href="#11-1-1-二重积分的性质" class="headerlink" title="11.1.1 二重积分的性质"></a>11.1.1 二重积分的性质</h4><ul>
<li><p>性质1：求区域面积，对1积分</p>
</li>
<li><p>性质2：可积函数必有界</p>
</li>
<li><p>性质3：积分的线性性质，函数可加</p>
</li>
<li><p>性质4：积分区域的可加性质</p>
</li>
<li><p>性质5：<strong>积分的保号性</strong>，f(x,y) ≤ g(x,y)，则f的积分 ≤ g的积分；特别的是<font color = "red"><strong>积分的绝对值 ≤ 函数绝对值的积分</strong></font></p>
</li>
<li><p>性质6：估值定理</p>
</li>
<li><p>性质7：中值定理</p>
</li>
<li><p><font color = "blue" size = "4"><strong>普通对称性和轮换对称性：</strong></font></p>
<ol>
<li><p>普通对称性</p>
<p>简单概括为<strong>偶倍奇零</strong>，关键看被积函数在积分区域上的奇偶性</p>
</li>
<li><p><font color = "red"><strong>轮换对称性：</strong></font></p>
<p>这是很重要的性质！！！ 若把 x 与 y 对调后，区域D不变，则说明此时积分具有<strong>轮换对称性</strong>，通过轮换对称性可以很容易解决一些棘手的问题。</p>
</li>
</ol>
</li>
</ul>
<h4 id="11-1-2-二重积分的计算"><a href="#11-1-2-二重积分的计算" class="headerlink" title="11.1.2 二重积分的计算"></a>11.1.2 二重积分的计算</h4><ul>
<li><p>直角坐标系</p>
<ol>
<li>先积y再积x</li>
<li>先积x再积y</li>
</ol>
</li>
<li><p>极坐标系</p>
<p><strong>极坐标系下的面积微分为 r * dθ * dr</strong></p>
<p>x = r * cosθ，y = r * sinθ</p>
</li>
<li><p>极坐标系和直角坐标系的选择</p>
<ol>
<li>被积函数为 f(x^2 + y^2)，f(y/x)，f(x/y)</li>
<li>积分区域为圆或者圆的一部分</li>
</ol>
<p>则 <strong>优先选择</strong> 极坐标系</p>
</li>
<li><p><font color = "red"><strong>直角坐标系和极坐标系的互相转换</strong></font></p>
<p>x = r * cosθ，y = r * sinθ</p>
<p>转换过程中的重点是：<strong>积分的上下限</strong></p>
</li>
</ul>
<h3 id="11-2-相关解题技巧"><a href="#11-2-相关解题技巧" class="headerlink" title="11.2 相关解题技巧"></a>11.2 相关解题技巧</h3><h4 id="11-2-1-改变积分次序"><a href="#11-2-1-改变积分次序" class="headerlink" title="11.2.1 改变积分次序"></a>11.2.1 改变积分次序</h4><p>有时候被积函数积分写出原函数比较困难，这个时候需要改变积分次序来使得积分计算简化</p>
<p><strong>以下函数直接积分困难：</strong></p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200809144109705.png" alt="image-20200809144109705" style="zoom:80%;" />

<p>因此可以通过改变积分次序来简化计算：（如下题）</p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200809163441561.png" alt="image-20200809163441561" style="zoom:67%;" />



<h4 id="11-2-2-轮换对称性的应用"><a href="#11-2-2-轮换对称性的应用" class="headerlink" title="11.2.2 轮换对称性的应用"></a>11.2.2 轮换对称性的应用</h4><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200809151843896.png" alt="image-20200809151843896" style="zoom: 67%;" />

<h4 id="11-2-3-直角坐标系和极坐标系的转换"><a href="#11-2-3-直角坐标系和极坐标系的转换" class="headerlink" title="11.2.3 直角坐标系和极坐标系的转换"></a>11.2.3 直角坐标系和极坐标系的转换</h4><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200809152045419.png" alt="image-20200809152045419" style="zoom:67%;" />

<p>​    一般都是直角坐标向极坐标系转换，但是有时候也会出现<strong>极坐标向直角坐标系的转换</strong></p>
<h4 id="11-2-4-用二重积分解决一元积分问题"><a href="#11-2-4-用二重积分解决一元积分问题" class="headerlink" title="11.2.4 用二重积分解决一元积分问题"></a>11.2.4 用二重积分解决一元积分问题</h4><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200809152000843.png" alt="image-20200809152000843" style="zoom:67%;" />



<h4 id="11-2-5-其他例题"><a href="#11-2-5-其他例题" class="headerlink" title="11.2.5 其他例题"></a>11.2.5 其他例题</h4><ul>
<li><p>二重积分结合取极限，可以考虑使用<strong>积分中值定理</strong></p>
</li>
<li><p>二重积分中的参数方程的使用：这里一般的做法是将二重积分将为参数方程的定积分</p>
</li>
<li><p><font color = "red"><strong>值得注意的是：</strong></font></p>
<p>极坐标系中 x = r * cosθ，y = r * sinθ；即使圆的圆心不在原点</p>
</li>
</ul>
<h2 id="12-常微分方程"><a href="#12-常微分方程" class="headerlink" title="12. 常微分方程"></a>12. 常微分方程</h2><h3 id="12-1-知识点"><a href="#12-1-知识点" class="headerlink" title="12.1 知识点"></a>12.1 知识点</h3><h4 id="12-1-1-微分方程的重要概念"><a href="#12-1-1-微分方程的重要概念" class="headerlink" title="12.1.1 微分方程的重要概念"></a>12.1.1 微分方程的重要概念</h4><ul>
<li>微分方程的阶：方程中未知函数导数的最高阶数</li>
<li>微分方程的通解：微分方程的解中含有的<strong>独立常数的个数等于微分方程的阶数</strong>，则为通解</li>
<li>初始条件与特解：根据解的初始条件确定常数，也就成了特解</li>
</ul>
<h4 id="12-1-2-一阶微分方程求解"><a href="#12-1-2-一阶微分方程求解" class="headerlink" title="12.1.2 一阶微分方程求解"></a>12.1.2 一阶微分方程求解</h4><ul>
<li><p>变量可分离型</p>
<p>这一类简单，可以直接将微分方程y和x的项全部分开，然后直接对等式两边求不定积分即可</p>
</li>
<li><p>可化为变量可分离型</p>
<ol>
<li>可以化成 dy / dx = f(ax + by + c)，这时候设 <font color = "red"><strong>u = ax + by + c</strong></font>，求解</li>
<li>可以化为 dy / dx = φ(y/x)类型的，这时候设 <font color = "blue"><strong>u = y / x</strong></font>，带入求解</li>
</ol>
</li>
<li><p>一阶线性微分方程</p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200814220019057.png" alt="image-20200814220019057" style="zoom: 80%;" />

<p>它的解为：                       <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200814220142728.png" alt="image-20200814220142728" style="zoom:80%;" /></p>
<p><font color ="orange" size = "4"><strong>注意事项：！！！</strong></font></p>
<p>这里的<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200814220416273.png" alt="image-20200814220416273" title="">
                </div>
                <div class="image-caption">image-20200814220416273</div>
            </figure>，<font color = "red"><strong>积分结果可以不加绝对值</strong></font></p>
</li>
<li><p>伯努利方程</p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200814220711367.png" alt="image-20200814220711367" style="zoom:67%;" />

<ol>
<li>两端分别除 y^n：<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200814220810152.png" alt="image-20200814220810152" style="zoom:50%;" /></li>
<li>做个变量代换：z=y^(1-n)：<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200814220850146.png" alt="image-20200814220850146" style="zoom:50%;" />          <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200814220926440.png" alt="image-20200814220926440" style="zoom:50%;" /></li>
<li>解一阶线性微分方程，再回带</li>
</ol>
</li>
</ul>
<h4 id="12-1-3-二阶可降阶方程求解"><a href="#12-1-3-二阶可降阶方程求解" class="headerlink" title="12.1.3 二阶可降阶方程求解"></a>12.1.3 二阶可降阶方程求解</h4><ul>
<li><p>方程中不显含未知函数y</p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200814221321136.png" alt="image-20200814221321136" style="zoom:100%;" />

<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200814221852619.png" alt="image-20200814221852619"></p>
</li>
</ul>
<ul>
<li><p>方程中不显含自变量x</p>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200814221455919.png" alt="image-20200814221455919"></p>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200814222604767.png" alt="image-20200814222604767"></p>
</li>
</ul>
<h4 id="12-1-4-二阶常系数方程求解"><a href="#12-1-4-二阶常系数方程求解" class="headerlink" title="12.1.4 二阶常系数方程求解"></a>12.1.4 二阶常系数方程求解</h4><ul>
<li><p><font color = "red"><strong>解的结构：</strong></font>线性方程的通解 + 非齐次的一个特解 = 非齐次的通解</p>
</li>
<li><p><font color = "red"><strong>叠加原理：</strong></font></p>
<p> <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200814224553156.png" alt="image-20200814224553156"></p>
</li>
</ul>
<ul>
<li><p>二阶常系数<strong>齐次微分方程</strong>的通解</p>
</li>
<li><p>二阶常系数<strong>非齐次微分方程</strong>的特解</p>
</li>
</ul>
<h4 id="12-1-5-n阶常系数齐次方程求解"><a href="#12-1-5-n阶常系数齐次方程求解" class="headerlink" title="12.1.5 n阶常系数齐次方程求解"></a>12.1.5 n阶常系数齐次方程求解</h4><p>高阶常系数齐次方程也是写特征方程，求特征根。</p>
<ul>
<li>单实根</li>
<li>k重实根</li>
<li>单复根</li>
<li>k重复根</li>
</ul>
<h3 id="12-2-相关解题技巧"><a href="#12-2-相关解题技巧" class="headerlink" title="12.2 相关解题技巧"></a>12.2 相关解题技巧</h3><ul>
<li><p><font color = "blue"><strong>x和y换位思考</strong></font></p>
<p>这是一种很重要的思维！！！</p>
<img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200815160044347.png" alt="image-20200815160044347" style="zoom:67%;" />



</li>
</ul>
<ul>
<li><p>根据微分方程考虑是否存在<font color = "red"><strong>初值条件</strong></font></p>
<img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200815160135552.png" alt="image-20200815160135552" style="zoom:67%;" />



</li>
</ul>
<ul>
<li><p>微分方程的<font color = "orag"><strong>叠加原理</strong></font></p>
<img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200815160211285.png" alt="image-20200815160211285" style="zoom:67%;" />



</li>
</ul>
<ul>
<li><p><font color = "purple"><strong>根据特解推断微分方程</strong></font></p>
<img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200815160238665.png" alt="image-20200815160238665" style="zoom:67%;" />



</li>
</ul>
<ul>
<li><p>x(或者y)<strong>进入根号一定要加正负号</strong></p>
<img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200815160316041.png" alt="image-20200815160316041" style="zoom:67%;" />



</li>
</ul>
<ul>
<li><p><font color = "red" size = 4><strong>全微分方程</strong></font></p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200815165006184.png" alt="image-20200815165006184" style="zoom:67%;" />



</li>
</ul>
<ul>
<li><p><font color = "blue" size = "4"><strong>变系数微分方程(包括高阶变系数微分方程)</strong></font></p>
<ol>
<li><p>变系数中含有e^x</p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200815170839959.png" alt="image-20200815170839959" style="zoom:75%;" />



</li>
</ol>
</li>
</ul>
<ol start="2">
<li><p>变系数中函数有1 - x^2</p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200815171039401.png" alt="image-20200815171039401" style="zoom:80%;" />



</li>
</ol>
<ol start="3">
<li><p>变系数中函数有x的多项式</p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200815170946055.png" alt="image-20200815170946055" style="zoom:80%;" />



</li>
</ol>
<h2 id="13-无穷级数"><a href="#13-无穷级数" class="headerlink" title="13. 无穷级数"></a>13. 无穷级数</h2><h3 id="13-1-知识点"><a href="#13-1-知识点" class="headerlink" title="13.1 知识点"></a>13.1 知识点</h3><h4 id="13-1-2-积分审敛法"><a href="#13-1-2-积分审敛法" class="headerlink" title="13.1.2 积分审敛法"></a>13.1.2 积分审敛法</h4><p><a href="https://zhuanlan.zhihu.com/p/136620760" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/136620760</a></p>
<h3 id="13-2-相关解题技巧"><a href="#13-2-相关解题技巧" class="headerlink" title="13.2 相关解题技巧"></a>13.2 相关解题技巧</h3><p><strong>开根证明单调性</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200801192816539.png" alt="image-20200801192816539" title="">
                </div>
                <div class="image-caption">image-20200801192816539</div>
            </figure>



<h3 id="13-1-知识点-1"><a href="#13-1-知识点-1" class="headerlink" title="13.1 知识点"></a>13.1 知识点</h3><ul>
<li>正项级数（5种）</li>
<li>交错级数（1种）</li>
<li>任意项级数</li>
</ul>
<h3 id="13-2-相关解题技巧-1"><a href="#13-2-相关解题技巧-1" class="headerlink" title="13.2 相关解题技巧"></a>13.2 相关解题技巧</h3><h2 id="14-数学一专题"><a href="#14-数学一专题" class="headerlink" title="14. 数学一专题"></a>14. 数学一专题</h2><p>拿1000题当练习 </p>
<h3 id="14-1-知识点"><a href="#14-1-知识点" class="headerlink" title="14.1 知识点"></a>14.1 知识点</h3><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200803164428606.png" alt="image-20200803164428606"></p>
<h2 id="16-多元函数积分学及空间解析几何"><a href="#16-多元函数积分学及空间解析几何" class="headerlink" title="16.多元函数积分学及空间解析几何"></a>16.多元函数积分学及空间解析几何</h2><p>拿1000题当练习 </p>
<h3 id="16-1-知识点"><a href="#16-1-知识点" class="headerlink" title="16.1 知识点"></a>16.1 知识点</h3><h4 id="16-1-1-向量代数"><a href="#16-1-1-向量代数" class="headerlink" title="16.1.1 向量代数"></a>16.1.1 向量代数</h4><ul>
<li><p>数量积，向量夹角，向量垂直，向量投影</p>
</li>
<li><p><font color = "red"><strong>向量积（叉乘）</strong></font>，a * b的方向是垂直于a和b的方向，|a * b|=|a| * |b| * sinθ</p>
</li>
<li><p><font color = "blue"><strong>混合积</strong></font>：[abc] = (a * b) · c；如果结果为0，说明三向量共面</p>
</li>
<li><p>方向角，方向余弦</p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200814123249544.png" alt="image-20200814123249544" style="zoom:67%;" />

</li>
</ul>
<h4 id="16-1-2-空间平面与直线"><a href="#16-1-2-空间平面与直线" class="headerlink" title="16.1.2 空间平面与直线"></a>16.1.2 空间平面与直线</h4><ul>
<li>平面方程<ol>
<li>一般式</li>
<li>点法式</li>
<li>截距式</li>
</ol>
</li>
<li>直线方程<ol>
<li>一般式：两平面交线</li>
<li>点向式</li>
<li>参数式</li>
<li>两点式</li>
</ol>
</li>
</ul>
<h4 id="16-1-3-空间曲线与曲面"><a href="#16-1-3-空间曲线与曲面" class="headerlink" title="16.1.3 空间曲线与曲面"></a>16.1.3 空间曲线与曲面</h4><ul>
<li><p>空间曲线</p>
<ol>
<li>一般式方程</li>
<li>参数式方程</li>
<li><font color = "red"><strong>空间曲面的投影！！！</strong></font><ol>
<li>向哪个坐标平面投影，就将另一个坐标轴字母消去（向XOY平面投影，则将曲面方程中的z字母消去）</li>
<li>再加上 z = 0，得到投影平面方程</li>
<li><font color = "blue"><strong>注意定义域</strong></font></li>
</ol>
</li>
</ol>
</li>
<li><p>空间曲面</p>
<ol>
<li>椭球面</li>
<li>椭圆抛物面：z = x^2 + y^2</li>
<li>椭圆锥面：z = √(x^2 + y^2)</li>
<li>马鞍面：z = xy</li>
<li>椭圆柱面，双曲柱面，抛物柱面，<strong>在空间解析几何中，一般认为缺少变量的方程为柱面</strong></li>
</ol>
<p><font color = "orag" size = "4"><strong>旋转曲面！！！</strong></font></p>
<p>曲线绕着一条定直线旋转一周所形成的曲面，步骤如下：</p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200814153051174.png" alt="image-20200814153051174" style="zoom: 80%;" />



</li>
</ul>
  <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200814160616168.png" alt="image-20200814160616168" style="zoom:70%;" />



<h4 id="16-1-4-多元函数微分学的应用"><a href="#16-1-4-多元函数微分学的应用" class="headerlink" title="16.1.4 多元函数微分学的应用"></a>16.1.4 多元函数微分学的应用</h4><ul>
<li><p>空间曲线的切向量，如果曲线是由<strong>参数方程</strong>表示的</p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200814155235622.png" alt="image-20200814155235622" style="zoom:80%;" />



</li>
</ul>
<ul>
<li><p>空间曲线的切向量，如果曲线是由<strong>交面式方程</strong>表示的</p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200814155259733.png" alt="image-20200814155259733" style="zoom: 80%;" />



</li>
</ul>
<ul>
<li>空间曲面的法向量：n = 曲面方程对x，y，z求偏导</li>
</ul>
<h4 id="16-1-5-场论"><a href="#16-1-5-场论" class="headerlink" title="16.1.5 场论"></a>16.1.5 场论</h4><ul>
<li>方向导数：<strong>梯度 点乘 方向余弦</strong></li>
<li>梯度：三元函数分别对x，y，z求偏导得到的向量</li>
<li>方向导数与梯度关系：<font color = "red"><strong>梯度是变化率最大的方向导数</strong></font></li>
<li>散度和旋度</li>
</ul>
<h3 id="16-2-相关解题技巧"><a href="#16-2-相关解题技巧" class="headerlink" title="16.2 相关解题技巧"></a>16.2 相关解题技巧</h3><h4 id="16-2-1-求解距离"><a href="#16-2-1-求解距离" class="headerlink" title="16.2.1 求解距离"></a>16.2.1 求解距离</h4><ul>
<li><p>点A到直线距离</p>
<ul>
<li>方法1：在直线上找一点M，使得AM垂直于直线，线段AM的长度即为点到直线的距离</li>
<li>方法2：直线的方向向量s，在直线上找一点M，|AM * s| = |AM| * |s| * sinθ，而|AM|*sinθ即为点到直线的距离</li>
</ul>
</li>
</ul>
<ul>
<li><p>点到平面距离</p>
<p>点M(x0,y0,z0)，平面Ax + By + Cz + D = 0</p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200813231805584.png" alt="image-20200813231805584" style="zoom: 67%;" />
</li>
<li><p>平行平面距离</p>
<p>平面1: Ax + By + Cz + D1 = 0，平面2: Ax + By + Cz + D2 = 0</p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200813232129240.png" alt="image-20200813232129240" style="zoom:67%;" />
</li>
<li><p>平行直线A，B距离：</p>
<ol>
<li>可在直线A上任找一点，再B找找一点使得AB垂直于直线</li>
<li>线段AB的距离即为直线间的距离</li>
</ol>
</li>
</ul>
<ul>
<li>异面直线A，B距离：</li>
</ul>
  <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200814112257911.png" alt="image-20200814112257911" style="zoom:67%;" />



<p>  类比计算点到直线距离、点到平面距离的方法</p>
<ol>
<li>根据两直线A，B的方向向量叉乘得出所设平面的<strong>法向量</strong></li>
<li>在直线B中任取一点（A也可），写出平面的<strong>点法式方程</strong></li>
<li>再在直线A中任取一点，根据 <font color = "purple"><strong>点到平面距离公式</strong></font> 得出异面直线的距离</li>
</ol>
  <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200814114522102.png" alt="image-20200814114522102" style="zoom:67%;" />



<h4 id="16-2-2-直线在平面投影"><a href="#16-2-2-直线在平面投影" class="headerlink" title="16.2.2 直线在平面投影"></a>16.2.2 直线在平面投影</h4><ul>
<li><p>一般式直线方程：</p>
<ol>
<li>设出平面束，写出其法向量n</li>
<li>该法向量n与已知平面法向量垂直，解出未知数</li>
<li>写出投影直线的一般方程</li>
</ol>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200814104445680.png" alt="image-20200814104445680" style="zoom: 67%;" />
</li>
<li><p>点向式直线方程：</p>
<p>可将点向式方程转换为一般式方程，然后再求解，例如：</p>
<img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200814104724288.png" alt="image-20200814104724288" style="zoom:67%;" />



</li>
</ul>
<h4 id="16-2-3-其他"><a href="#16-2-3-其他" class="headerlink" title="16.2.3 其他"></a>16.2.3 其他</h4><ul>
<li>*<em>三角形的面积 *</em>：S = |a 叉乘 b| / 2 = |a| * |b| * sinθ / 2</li>
</ul>
<ul>
<li><p>验证两条直线共面：</p>
<p><font color = "blue"><strong>混合积可验证三向量共面</strong></font></p>
<ol>
<li>写出两条直线的方向向量s1，s2</li>
<li>根据两条的两个点，求出其向量n</li>
<li>求<strong>混合积[s1, s2, n] = (s1 * s2) · n</strong>，等于0则共面；不等于0则不共面</li>
</ol>
</li>
</ul>
<ul>
<li><p>点M关于平面的对称点的坐标</p>
<ol>
<li>根据已知平面和已知点M可以解出<font color = "red"><strong>过点M且垂直于平面的直线的点向式方程</strong></font></li>
<li>根据点向式方程，求出直线和平面的<strong>交点</strong></li>
<li>根据已知点M和交点，求出对称点（坐标和相加÷2 = 交点坐标）</li>
</ol>
</li>
</ul>
<h2 id="17-三重积分、曲线曲面积分-重点！！！"><a href="#17-三重积分、曲线曲面积分-重点！！！" class="headerlink" title="17. 三重积分、曲线曲面积分 (重点！！！)"></a><font color = "red">17. 三重积分、曲线曲面积分 (重点！！！)</font></h2><p><strong>形心公式的逆用</strong></p>
<p>二型积分的对称性，从物理意义——变力做功 理解</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200810203732018.png" alt="image-20200810203732018" title="">
                </div>
                <div class="image-caption">image-20200810203732018</div>
            </figure>



<img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200810204133754.png" alt="image-20200810204133754" style="zoom:67%;" />



<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200810205202395.png" alt="image-20200810205202395"></p>
<p><strong>不可以交叉重合</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200810210754213.png" alt="image-20200810210754213" title="">
                </div>
                <div class="image-caption">image-20200810210754213</div>
            </figure>]]></content>
      <categories>
        <category>考研</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>第三章——进程管理</title>
    <url>/2020/07/06/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="第三章——进程管理"><a href="#第三章——进程管理" class="headerlink" title="第三章——进程管理"></a>第三章——进程管理</h1><blockquote>
<p>搬运文章：<a href="https://blog.csdn.net/qq_41261490/article/details/80872072?utm_source=app" target="_blank" rel="noopener">操作系统（第四版）期末复习总结（上）</a></p>
</blockquote>
<h2 id="1-进程的概述"><a href="#1-进程的概述" class="headerlink" title="1. 进程的概述"></a>1. 进程的概述</h2><h3 id="1-1-程序的顺序执行和并发执行"><a href="#1-1-程序的顺序执行和并发执行" class="headerlink" title="1.1 程序的顺序执行和并发执行"></a>1.1 程序的顺序执行和并发执行</h3><blockquote>
<p>程序的执行有两种方式：<strong>顺序执行</strong>和<strong>并发执行</strong>。</p>
</blockquote>
<h4 id="1-1-顺序执行"><a href="#1-1-顺序执行" class="headerlink" title="1.1 顺序执行"></a>1.1 顺序执行</h4><ul>
<li><strong>顺序执行</strong>是<strong>单道</strong>批处理系统的执行方式，也用于<strong>简单的单片机</strong>系统<ul>
<li><strong>程序：</strong>完成所要求的功能时，所应采取的顺序步骤，是执行指令的有序集合。</li>
<li><strong>程序的顺序执行：</strong>具有独立功能的程序<strong>独占CPU</strong>直至得到最终结果的过程</li>
<li><strong>特征1—顺序性：</strong>按照程序结构所指定的次序（可能有分支或循环）</li>
<li><strong>特征2—封闭性：</strong>独占全部资源，计算机的状态只由该程序的控制逻辑所决定</li>
<li><strong>特征3—可再现性：</strong>初始条件相同则结果相同</li>
</ul>
</li>
</ul>
<h4 id="1-2-异步执行"><a href="#1-2-异步执行" class="headerlink" title="1.2 异步执行"></a>1.2 异步执行</h4><blockquote>
<p><strong>定义：</strong>程序的并发执行是指一组在逻辑上互相独立的程序或程序段在<strong>执行时间上客观上互相重叠</strong>，即一个程序或程序段的执行尚未结束，另一个程序（段）的执行已经开始的执行方式</p>
<p><strong>并发：</strong>在一段时间内的同时并行</p>
<p><strong>并行：</strong>在同一物理时刻的同时</p>
</blockquote>
<ul>
<li><p>现在的操作系统多为<strong>并发执行</strong>，具有许多新的特征。引入并发执行的目的是为了提高<strong>资源利用率</strong></p>
<ul>
<li>并发目的1：<strong>提高计算机的处理能力</strong></li>
<li>并发目的2：<strong>提高资源利用率</strong></li>
<li>并发形式1：<strong>多道程序环境下的多道程序的并发执行</strong></li>
<li>并发形式2：<strong>在某道程序的几个程序段中，包含可同时执行或可颠倒顺序执行的代码</strong></li>
</ul>
</li>
<li><p>并发执行特征：</p>
<ul>
<li><strong>间断(异步)性：</strong>“走走停停”，一个程序可能走到中途停下来，失去原有的时序关系</li>
<li><strong>失去封闭性：</strong>共享资源，受其他程序的控制逻辑的影响。如：一个程序写到存储器中的数据可能被另一个程序修改，失去原有的不变特征</li>
<li><strong>失去可再现性：</strong>失去封闭性 -&gt; 失去可再现性；外界环境在程序的两次执行期间发生变化，失去原有的可重复特征</li>
</ul>
</li>
<li><p><strong>不加控制的并发执行所带来的影响：</strong></p>
<p>例：利用堆栈管理一块内存区中各数据块的使用情况。</p>
<ul>
<li><p>用<strong>getaddr(top)</strong> 从栈顶取出相应的内存块的地址。</p>
</li>
<li><p>用<strong>reladdr(blk)</strong>将数据块的地址（以<strong>bkl</strong>为地址）放入堆栈中。</p>
</li>
</ul>
<p>例子的说明：</p>
<ul>
<li><strong>getaddr()</strong>和<strong>reladdr()</strong>的并发执行，产生了错误的结果，不同执行顺序得到不同的结果，程序的执行<strong>不再具有封闭性和结果的可再现性</strong>。</li>
<li><strong>原因：</strong>对公共变量（堆栈或堆栈指针）的共享引起的。</li>
<li>为了获得结果的可再现性，程序的并发执行是<strong>需要条件的</strong>。</li>
</ul>
</li>
<li><p>并发执行的条件：<strong>达到封闭性和可再现性</strong></p>
<p><strong>并发执行失去封闭性的原因是共享资源的影响，去掉这种影响即可。</strong></p>
</li>
</ul>
<h3 id="1-2-进程的定义"><a href="#1-2-进程的定义" class="headerlink" title="1.2 进程的定义"></a>1.2 进程的定义</h3><blockquote>
<p>一个具有一定独立功能的<strong>程序</strong>在一个<strong>数据集合</strong>上的一次<strong>动态执行</strong>过程。简言之，进程是程序的一次执行活动。</p>
</blockquote>
<ul>
<li><p>进程描述了程序的<strong>动态执行过程</strong></p>
</li>
<li><p>它对应虚拟处理机、虚拟存储器和虚拟外设等<strong>资源的分配和回收</strong></p>
</li>
<li><p>反映系统中程序执行的<strong>并发性、随机性和资源共享</strong></p>
</li>
<li><p>引入多进程，提高了对硬件资源的<strong>利用率</strong>，但又带来额外的<strong>空间和时间开销</strong>，增加了<strong>OS的复杂性</strong></p>
</li>
</ul>
<h4 id="1-2-1-进程的特征"><a href="#1-2-1-进程的特征" class="headerlink" title="1.2.1 进程的特征"></a>1.2.1 进程的特征</h4><ul>
<li><p><strong>动态性：</strong></p>
<ul>
<li><p><strong>进程对应程序的执行</strong></p>
</li>
<li><p><strong>进程是动态产生：创建</strong> -&gt; <strong>运行</strong> -&gt; <strong>消亡</strong></p>
</li>
<li><p><strong>进程在其生命周期内，在三种基本状态之间转换</strong></p>
</li>
</ul>
</li>
<li><p><strong>独立性：</strong>各进程的<strong>地址空间相互独立</strong>，除非采用进程间通信手段</p>
</li>
<li><p><strong>并发性：</strong>任何进程都可以同其他进程一起向前推进</p>
</li>
<li><p><strong>异步性：</strong>每个进程都以其相对独立的不可预知的速度向前推进</p>
</li>
<li><p><strong>结构化：</strong> <strong>进程</strong> <strong>=</strong> <strong>代码段</strong> <strong>+</strong> <strong>数据段</strong> <strong>+ PCB</strong></p>
</li>
</ul>
<h4 id="1-2-2-进程与程序的区别"><a href="#1-2-2-进程与程序的区别" class="headerlink" title="1.2.2 进程与程序的区别"></a>1.2.2 进程与程序的区别</h4><ul>
<li><p><strong>进程是动态的</strong>，<strong>程序是静态的</strong>：<strong>炒菜</strong> &lt;——&gt;<strong>菜谱</strong></p>
</li>
<li><p><strong>进程是暂时的</strong>，<strong>程序的永久的</strong>：进程是一个状态变化的过程，程序可长久保存</p>
</li>
<li><p>进程与程序的<strong>组成不同</strong>：进程的组成包括<strong>程序</strong>、<strong>数据</strong>和<strong>进程控制块</strong>（即进程状态信息）</p>
</li>
<li><p>进程与程序的<strong>对应关系</strong>：通过多次执行，一个程序可对应多个进程；通过调用关系，一个进程可包括多个程序</p>
</li>
<li><p>进程具有<strong>并行特征</strong>，<strong>程序没有</strong>。<strong>进程具有独立性和异步性</strong></p>
</li>
<li><p>进程是<strong>竞争计算机资源的基本单位</strong></p>
</li>
</ul>
<p><strong>举例：</strong></p>
<ul>
<li>正在运行的<strong>Web</strong>浏览器是一个进程，正在运行的<strong>Windows</strong>资源管理器是一个进程，正在运行的<strong>Visual C++</strong>编程环境也是一个进程</li>
<li>在计算机中处于运行状态的任何一个程序都是一个进程，一个进程拥有内存、CPU时间等一系列资源</li>
</ul>
<h2 id="2-进程的描述"><a href="#2-进程的描述" class="headerlink" title="2. 进程的描述"></a>2. 进程的描述</h2><h3 id="2-1-进程的组成"><a href="#2-1-进程的组成" class="headerlink" title="2.1 进程的组成"></a>2.1 进程的组成</h3><blockquote>
<p><strong>进程</strong> <strong>=</strong> <strong>程序</strong> <strong>+</strong> <strong>数据</strong> <strong>+</strong> <strong>进程控制块PCB</strong></p>
</blockquote>
<ul>
<li><strong>程序</strong>是进程的不可缺少的组成部分；如果一个程序段允许被共享，则它应该是<strong>可重入的</strong>，或<strong>纯代码段</strong></li>
<li><strong>数据</strong>是进程处理的对象</li>
<li><strong>进程控制块</strong>是进程的控制结构，包含了进程的<strong>描述信息</strong>、<strong>控制信息</strong>和<strong>资源信息</strong>以及<strong>现场保护区</strong>，是进程的唯一标识，系统通过<strong>PCB</strong>管理和控制进程。</li>
</ul>
<h3 id="2-2-进程控制块PCB（Process-Control-Block）"><a href="#2-2-进程控制块PCB（Process-Control-Block）" class="headerlink" title="2.2 进程控制块PCB（Process Control Block）"></a>2.2 进程控制块PCB（Process Control Block）</h3><ul>
<li><p>进程控制块是由<strong>OS维护</strong>的用来记录<strong>进程相关信息和管理进程</strong>而设置的一个专门的数据结构</p>
<blockquote>
<p>包含了进程的描述信息、控制信息和资源信息以及现场保护区</p>
</blockquote>
</li>
<li><p>PCB是进程动态特性的集中反映</p>
<blockquote>
<p>系统通过PCB感知进程的存在，通过PCB中所包含的各项变量的变化，掌握进程的状态以达到控制进程活动的目的</p>
</blockquote>
</li>
</ul>
<h4 id="2-2-1-进程控制块PCB的特点"><a href="#2-2-1-进程控制块PCB的特点" class="headerlink" title="2.2.1  进程控制块PCB的特点"></a>2.2.1  进程控制块PCB的特点</h4><ul>
<li><p>PCB结构的全部或部分常驻内存</p>
</li>
<li><p>PCB随进程的创建而填写，随进程的撤消而释放</p>
</li>
<li><p>系统利用PCB来控制和管理进程，所以PCB是系统感知进程存在的唯一标志</p>
</li>
<li><p>进程与PCB是一一对应的</p>
</li>
</ul>
<h4 id="2-2-2-进程控制块PCB的内容"><a href="#2-2-2-进程控制块PCB的内容" class="headerlink" title="2.2.2 进程控制块PCB的内容"></a>2.2.2 进程控制块PCB的内容</h4><ul>
<li><strong>进程描述信息：</strong><ul>
<li><strong>进程标识符</strong>(process ID)，唯一，通常是一个整数</li>
<li><strong>进程名</strong>，通常基于可执行文件名</li>
<li><strong>用户标识符</strong> (user ID)—属于哪个用户</li>
<li><strong>进程组关系</strong> (process group)–父进程标识和子进程标识</li>
</ul>
</li>
<li><strong>进程控制信息：</strong><ul>
<li><strong>当前状态</strong>–就绪、运行、阻塞</li>
<li><strong>优先级</strong>(priority)</li>
<li><strong>代码执行入口地址</strong>–进程的程序和数据所在内存中的首地址</li>
<li><strong>程序的外存地址</strong>–进程的程序和数据所在外存中的首地址</li>
<li><strong>运行统计信息</strong>–进程等待时间、进程已经获得处理器的总时间和进程占用内存的时间等。（执行时间、页面调度）</li>
<li><strong>进程间同步和通信机制</strong>–指实现进程同步和通信时所采取的机制，如消息队列指针和信号量等，他们可以全部或部分存在PCB中</li>
<li><strong>事件</strong>–进程由某一状态转变为另一状态所等待发生的事件</li>
</ul>
</li>
<li><strong>资源占用信息：</strong>虚拟地址空间的现状、打开文件列表</li>
<li><strong>CPU现场保护结构：</strong>寄存器值（通用、程序计数器<strong>PC</strong>、状态<strong>PSW</strong>，地址包括栈指针）</li>
</ul>
<h3 id="2-3-进程上下文"><a href="#2-3-进程上下文" class="headerlink" title="2.3 进程上下文"></a>2.3 进程上下文</h3><h4 id="2-3-1-进程上下文概述"><a href="#2-3-1-进程上下文概述" class="headerlink" title="2.3.1 进程上下文概述"></a>2.3.1 进程上下文概述</h4><blockquote>
<p><strong>进程上下文</strong>是对<strong>进程执行活动全过程</strong>的<strong>静态描述</strong>。进程上下文由进程的用户地址空间内容、硬件寄存器内容及与该进程相关的核心数据结构组成（正文段、数据集、堆栈）。</p>
</blockquote>
<p><strong>上文： 把已执行的进程指令和数据在相关寄存器与堆栈中的内容。</strong> </p>
<p><strong>正文： 把正在执行的进程指令和数据在相关寄存器与堆栈中的内容。</strong> </p>
<p><strong>下文： 把待执行的进程指令和数据在相关寄存器与堆栈中的内容。</strong> </p>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200707125235684.png" alt="进程调度"></p>
<ul>
<li><p><strong>用户级上下文：</strong>进程的用户地址空间（包括用户栈各层次），包括用户正文段、用户数据段和用户栈</p>
</li>
<li><p><strong>寄存器级上下文：</strong>程序寄存器、处理机状态寄存器、栈指针、通用寄存器的值</p>
</li>
<li><p><strong>系统级上下文：</strong></p>
<ul>
<li>静态部分（PCB和资源表格）</li>
<li>动态部分：核心栈（核心过程的栈结构，不同进程在调用相同核心过程时有不同核心栈）</li>
</ul>
</li>
</ul>
<h4 id="2-3-2-进程上下文结构"><a href="#2-3-2-进程上下文结构" class="headerlink" title="2.3.2 进程上下文结构"></a>2.3.2 进程上下文结构</h4><blockquote>
<p><strong>进程的物理实体与支持进程执行的物理环境合称为进程上下文</strong></p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200707124553693.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>



<h3 id="2-4-PCB的组织方式"><a href="#2-4-PCB的组织方式" class="headerlink" title="2.4 PCB的组织方式"></a>2.4 PCB的组织方式</h3><h4 id="2-4-1-PCB表"><a href="#2-4-1-PCB表" class="headerlink" title="2.4.1 PCB表"></a>2.4.1 PCB表</h4><ul>
<li>系统把<strong>所有PCB</strong>组织在一起，并把它们放在内存的固定区域，就构成了<strong>PCB表</strong></li>
<li><strong>PCB表的大小</strong>决定了系统中最多可同时存在的进程个数，称为<strong>系统的并发度</strong>。、</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200707125638411.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>

<h4 id="2-4-2-组织方式"><a href="#2-4-2-组织方式" class="headerlink" title="2.4.2 组织方式"></a>2.4.2 组织方式</h4><ul>
<li><p>链表方式</p>
<ul>
<li><p>同一状态的进程其PCB成一链表，多个状态对应多个不同的链表</p>
</li>
<li><p>各状态的进程形成不同的链表：<strong>就绪链表、阻塞链表</strong></p>
</li>
</ul>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200707130020684.png" alt="链表方式"></p>
</li>
</ul>
<ul>
<li><p>索引表方式</p>
<ul>
<li>同一状态的进程归入一个index表（由index指向PCB），多个状态对应多个不同的index表</li>
<li>各状态的进程形成不同的索引表：<strong>就绪索引表</strong>、<strong>阻塞索引表</strong></li>
</ul>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200707130215046.png" alt="索引表方式"></p>
</li>
</ul>
<h3 id="2-5-进程状态及转换"><a href="#2-5-进程状态及转换" class="headerlink" title="2.5 进程状态及转换"></a>2.5 进程状态及转换</h3><h4 id="2-5-1-进程的执行状态"><a href="#2-5-1-进程的执行状态" class="headerlink" title="2.5.1 进程的执行状态"></a>2.5.1 进程的执行状态</h4><blockquote>
<p>进程的执行状态可分为<strong>用户执行状态</strong>和<strong>系统执行状态</strong></p>
</blockquote>
<ul>
<li><p><strong>用户执行状态</strong>，又称<strong>用户态</strong>，进程的用户程序段执行时，该程序处于用户态。用户态时不可直接访问受保护的OS代码</p>
</li>
<li><p><strong>系统执行状态</strong>，又称<strong>系统态，核心态，</strong>进程的系统程序执行时，该进程处于系统态。核心态时可以执行OS代码，可以访问全部进程空间</p>
</li>
<li><p>划分用户态和系统态的<strong>原因：</strong></p>
<ul>
<li><p>把用户程序和系统程序分开，以利程序的<strong>保护和共享</strong></p>
</li>
<li><p>但增加了系统复杂度和系统开销</p>
</li>
</ul>
</li>
</ul>
<h4 id="2-5-2-进程的三种基本状态"><a href="#2-5-2-进程的三种基本状态" class="headerlink" title="2.5.2 进程的三种基本状态"></a>2.5.2 进程的三种基本状态</h4><blockquote>
<p>就绪态，执行态，等待态</p>
</blockquote>
<ul>
<li><p><strong>就绪态（Ready）：</strong>一个进程已经具备运行条件，但由于无CPU暂时不能运行的状态（当调度给其CPU时，立即可以运行。“万事俱备，只欠东风”。位于 <strong>“就绪队列”</strong> 中</p>
</li>
<li><p><strong>执行态（Running）：</strong>进程占有了包括CPU在内的全部资源，并在CPU上运行</p>
</li>
<li><p><strong>等待态（Blocked）：</strong>阻塞态、挂起态、封锁态、冻结态、睡眠态。指进程因等待某种事件的发生而暂时不能运行的状态（<strong>即使CPU空闲，该进程也不可运行</strong>）。处于等待态的进程位于<strong>等待队列</strong>中</p>
</li>
</ul>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200707134512096.png" alt="基本状态的转换"></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200707134553699.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>

<ul>
<li><p><strong>就绪 -&gt; 运行：</strong>调度程序选择一个新的进程运行</p>
</li>
<li><p><strong>运行 -&gt; 就绪：</strong></p>
<ul>
<li><p>运行进程用完了时间片</p>
</li>
<li><p>运行进程被中断，因为一个高优先级进程处于就绪状态</p>
</li>
</ul>
</li>
<li><p><strong>运行 -&gt; 等待：</strong>当一进程等待某一事件的发生时，如：</p>
<ul>
<li><p>请求系统服务</p>
</li>
<li><p>无新工作可做</p>
</li>
<li><p>初始化I/O且必须等待结果</p>
</li>
<li><p>等待某一进程提供输入(IPC)</p>
</li>
</ul>
</li>
<li><p><strong>等待 -&gt; 就绪：</strong>当所等待的事件发生时（例如IO读写完成等）</p>
</li>
</ul>
<h4 id="2-5-3-进程的其他状态"><a href="#2-5-3-进程的其他状态" class="headerlink" title="2.5.3 进程的其他状态"></a>2.5.3 进程的其他状态</h4><ul>
<li><p><strong>创建状态：</strong>创建（新new）状态</p>
<ul>
<li><p>OS已完成为创建一进程所必要的工作</p>
<ul>
<li><p>已构造了进程标识符；</p>
</li>
<li><p>已创建了管理进程所需的表格、PCB</p>
</li>
</ul>
</li>
<li><p>但还没有允许执行该进程 （尚未同意）</p>
<ul>
<li><p>因为资源有限，OS所需的关于该进程的信息保存在主存中的进程表中，但进程自身还未进入主存，也没有为与这个程序相关的数据分配空间，程序保留在辅存中</p>
</li>
<li><p>在批处理系统中，提交新作业；为新登录用户创建进程</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>引入创建状态，保证进程的调度必须在进程创建后进行，确保对PCB操作的完整性；OS可以根据系统性能或主存容量的限制，推迟 创建进程的提交，增加管理的灵活性</p>
</blockquote>
<ul>
<li>导致<strong>进程创建</strong>的原因：<ul>
<li>批处理环境中，选择一新作业即将进入内存执行</li>
<li>交互环境中，新用户登录到系统</li>
<li>操作系统因提供一项服务而创建。如：用户请求打印一个文件，OS可创建严格管理打印的进程，使请求进程可继续执行，与完成打印任务的时间无关</li>
<li>由现有进程生成，父进程—-子进程</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>终止状态（Exit）</strong></p>
<ul>
<li>终止后进程移入该状态</li>
<li>它不再有执行资格——PCB清空并将PCB返还系统</li>
<li>表格和其它信息暂时保留——状态码和统计数据</li>
<li>实用程序为了分析性能和利用率，可能要提取程序的历史信息</li>
</ul>
<p><strong>导致终止进程的原因：</strong></p>
<ul>
<li>含一个HALT指令或用于终止的OS显式服务调用</li>
<li>分时系统中，用户的行为可指示终止，如：用户退出系统或关闭自己的终端，该用户的进程将被终止</li>
<li>PC机环境中，用户结束一应用程序</li>
<li>出现某些错误时，如：I/O失败，无效指令等</li>
<li>父进程可请求它的某个子进程终止</li>
<li>父进程终止，OS自动终止所有后代进程</li>
</ul>
</li>
</ul>
<ul>
<li><strong>挂起状态：</strong>把一个进程从内存转到外存</li>
</ul>
<h4 id="2-5-3-五状态进程模型"><a href="#2-5-3-五状态进程模型" class="headerlink" title="2.5.3 五状态进程模型"></a>2.5.3 五状态进程模型</h4><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200707135631519.png" alt="五状态进程模型" title="">
                </div>
                <div class="image-caption">五状态进程模型</div>
            </figure>



<h4 id="2-5-3-1-单队列结构"><a href="#2-5-3-1-单队列结构" class="headerlink" title="2.5.3.1 单队列结构"></a>2.5.3.1 单队列结构</h4><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200708235804787.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>

<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200709000049595.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>

<blockquote>
<p>时间片超时也会导致进程状态转换</p>
</blockquote>
<h4 id="2-5-3-2-多队列结构"><a href="#2-5-3-2-多队列结构" class="headerlink" title="2.5.3.2 多队列结构"></a>2.5.3.2 多队列结构</h4><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200709000417137.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>



<h4 id="2-5-4-挂起进程模型"><a href="#2-5-4-挂起进程模型" class="headerlink" title="2.5.4 挂起进程模型"></a>2.5.4 挂起进程模型</h4><p>  由于进程优先级的引入，一些低优先级进程可能等待较长时间，从而被对换至外存。目的是：</p>
<ul>
<li><strong>提高处理机效率：</strong>就绪进程表为空时，OS将阻塞进程从内存中 “驱逐” 到磁盘的 “挂起队列”，再从该队列选另一进程进入内存，或接受一个新进程的请求。</li>
<li><strong>为运行进程提供足够内存：</strong>资源紧张时，暂停某些进程，如：CPU繁忙（或实时任务执行），内存紧张</li>
</ul>
<p><strong>单挂起进程模型</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200709000737957.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>



<p><strong>双挂起进程模型</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200709000956350.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>



<h4 id="2-5-5-练习题"><a href="#2-5-5-练习题" class="headerlink" title="2.5.5 练习题"></a>2.5.5 练习题</h4><ol>
<li><p>如果系统中有N个进程，运行的进程最多几个，最少几个；就绪进程最多几个最少几个；等待进程最多几个，最少几个？</p>
<p>答：考虑<strong>单CPU</strong>的情况，运行的进程最多有1个，最少0个。就绪进程最多N-1个，最少0个。等待进程最多N个，最少0个。</p>
</li>
</ol>
<h2 id="3-进程控制"><a href="#3-进程控制" class="headerlink" title="3. 进程控制"></a>3. 进程控制</h2><h3 id="3-1-进程控制的功能"><a href="#3-1-进程控制的功能" class="headerlink" title="3.1 进程控制的功能"></a>3.1 进程控制的功能</h3><ul>
<li>完成进程状态的转换</li>
<li>完成创建和撤消进程，挂起和激活进程、阻塞和唤醒进程</li>
<li><strong>原语(primitive)：</strong>由若干条指令构成的 “<strong>原子操作</strong>(atomic operation)” 过程，作为一个<strong>整体</strong>而<strong>不可分割</strong>–要么全都完成，要么全都不做。许多系统调用就是原语</li>
<li>原语分为：<ul>
<li>机器指令级：不允许中断</li>
<li>功能级原语：允许中断，不允许并发</li>
</ul>
</li>
<li>注意：<strong>系统调用并不都是原语。</strong>进程A调用read()，因无数据而阻塞，在read()里未返回。然后进程B调用read()，此时read()被重入。系统调用不一定一次执行完并返回该进程，有可能在特定的点暂停，而转入到其他进程</li>
</ul>
<blockquote>
<p><strong>原语是操作系统的核心，它不是由进程而是由一组程序模块所组成，是操作系统的一个组成部分，它必须在管态下执行，并且常驻内存</strong></p>
</blockquote>
<h3 id="3-2-进程控制的主要原语"><a href="#3-2-进程控制的主要原语" class="headerlink" title="3.2 进程控制的主要原语"></a>3.2 进程控制的主要原语</h3><blockquote>
<ol>
<li><p>进程<strong>创建</strong>与<strong>撤消</strong>原语</p>
</li>
<li><p>进程<strong>阻塞</strong>与<strong>唤醒</strong>原语</p>
</li>
<li><p>进程<strong>挂起</strong>与<strong>激活</strong>原语</p>
</li>
</ol>
</blockquote>
<h3 id="3-3-Unix的进程管理"><a href="#3-3-Unix的进程管理" class="headerlink" title="3.3 Unix的进程管理"></a>3.3 Unix的进程管理</h3><h2 id="4-线程（Thread）概念与多线程模型"><a href="#4-线程（Thread）概念与多线程模型" class="headerlink" title="4. 线程（Thread）概念与多线程模型"></a>4. 线程（Thread）概念与多线程模型</h2><h3 id="4-1-进程与线程的关系"><a href="#4-1-进程与线程的关系" class="headerlink" title="4.1 进程与线程的关系"></a>4.1 进程与线程的关系</h3><h3 id="4-2-线程的引入"><a href="#4-2-线程的引入" class="headerlink" title="4.2 线程的引入"></a>4.2 线程的引入</h3><h3 id="4-3-线程的属性"><a href="#4-3-线程的属性" class="headerlink" title="4.3 线程的属性"></a>4.3 线程的属性</h3><h3 id="4-4-多线程OS中的进程"><a href="#4-4-多线程OS中的进程" class="headerlink" title="4.4 多线程OS中的进程"></a>4.4 多线程OS中的进程</h3><h3 id="4-5-线程与进程的比较"><a href="#4-5-线程与进程的比较" class="headerlink" title="4.5 线程与进程的比较"></a>4.5 线程与进程的比较</h3><h3 id="4-6-线程的优点"><a href="#4-6-线程的优点" class="headerlink" title="4.6 线程的优点"></a>4.6 线程的优点</h3><h3 id="4-7-线程的适用范围"><a href="#4-7-线程的适用范围" class="headerlink" title="4.7 线程的适用范围"></a>4.7 线程的适用范围</h3><h3 id="4-8-线程的状态"><a href="#4-8-线程的状态" class="headerlink" title="4.8 线程的状态"></a>4.8 线程的状态</h3><h3 id="4-9-OS对线程的实现方式"><a href="#4-9-OS对线程的实现方式" class="headerlink" title="4.9 OS对线程的实现方式"></a>4.9 OS对线程的实现方式</h3><h3 id="4-10-线程举例"><a href="#4-10-线程举例" class="headerlink" title="4.10 线程举例"></a>4.10 线程举例</h3>]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
</search>
