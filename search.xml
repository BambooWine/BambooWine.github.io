<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LRU和LFU算法</title>
    <url>/2020/06/08/LRU%E5%92%8CLFU%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="LRU和LFU算法解析"><a href="#LRU和LFU算法解析" class="headerlink" title="LRU和LFU算法解析"></a>LRU和LFU算法解析</h1><h2 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h2><h3 id="LRU概念"><a href="#LRU概念" class="headerlink" title="LRU概念"></a>LRU概念</h3><p>LRU（The Least Recently Used，最近最少未使用）是一种常见内存管理算法，最早应用于Linux操作系统，在Redis中也有广泛使用的。</p>
<p>LRU算法有这样一种假设：<strong>如果某个数据长期不被使用，在未来被用到的几率也不大；因此缓存容量达到上限时，应在写入新数据之前删除最久未使用的数据值</strong>，从而为新数据腾出空间。</p>
<h3 id="LRU算法实现"><a href="#LRU算法实现" class="headerlink" title="LRU算法实现"></a>LRU算法实现</h3><h4 id="LRU算法描述"><a href="#LRU算法描述" class="headerlink" title="LRU算法描述"></a>LRU算法描述</h4><p>需要设计一种数据结构，并且提供以下接口：</p>
<ul>
<li>构造函数，确定初始容量大小</li>
<li><code>get(key)</code>：如果关键字key存于缓存中，则获取其对应的值；否则返回-1</li>
<li><code>put(key, val)</code>：<ul>
<li>如果关键字key已经存在，则更改其对应的值为<code>val</code>；</li>
<li>如果关键字不存在，则插入（key,val）</li>
<li>当缓存容量达到上限时，最久没有访问的数据应该被置换。</li>
</ul>
</li>
</ul>
<h4 id="LRU算法图示"><a href="#LRU算法图示" class="headerlink" title="LRU算法图示"></a>LRU算法图示</h4><p>我们可以使用<strong>双向链表</strong>+<strong>哈希表</strong>来模拟实现LRU算法：</p>
<ul>
<li>哈希表用来快速查找某个key是否存于缓存中</li>
<li>链表用来表示使用数据项的时间先后次序</li>
</ul>
<p><strong>LRU存储图示</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/LRU_Store.png" alt="LRU_Store" title="">
                </div>
                <div class="image-caption">LRU_Store</div>
            </figure>


<p>当LRU的容量未到达上限时，对某个数据进行访问（包括添加，读取，修改），则只需要在链表头部插入新节点即可。</p>
<p>当LRU的容量到达上限时，需要添加某个数据，则需要移除链表最末端的键值（最久未使用），然后头插新节点。</p>
<p><strong>容量未满，插入新值003</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/LRU_Insert1.png" alt="容量未满，插入新值" title="">
                </div>
                <div class="image-caption">容量未满，插入新值</div>
            </figure>



<p><strong>容量上限，插入新值004</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/LRU_Insert2.png" alt="容量上限，插入新值" title="">
                </div>
                <div class="image-caption">容量上限，插入新值</div>
            </figure>



<p><strong>访问数据003</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/LRU_Visit.png" alt="访问数据003" title="">
                </div>
                <div class="image-caption">访问数据003</div>
            </figure>



<h4 id="LRU-C-代码"><a href="#LRU-C-代码" class="headerlink" title="LRU C++代码"></a>LRU C++代码</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 键值节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> key;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        Node(<span class="keyword">int</span> k, <span class="keyword">int</span> v):key(k), val(v)&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">using</span> node_iter = <span class="built_in">list</span>&lt;Node&gt;::iterator;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    LRUCache(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;cap = capacity;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> it = mp.find(key);</span><br><span class="line">        <span class="keyword">if</span>(it == mp.end()) <span class="keyword">return</span> <span class="number">-1</span>;       <span class="comment">// 节点不存在</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> val = it-&gt;second-&gt;val;</span><br><span class="line">            l.erase(it-&gt;second);            <span class="comment">// list通过迭代器删除节点</span></span><br><span class="line">            l.push_front(Node(key, val));   <span class="comment">// 头插最近访问节点</span></span><br><span class="line">            mp[key] = l.begin();            <span class="comment">// 更新哈希表中 key对应的 list迭代器</span></span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> it = mp.find(key);</span><br><span class="line">        <span class="keyword">if</span>(it == mp.end())&#123;</span><br><span class="line">            <span class="keyword">if</span>(cap == mp.size())&#123;</span><br><span class="line">                <span class="comment">// 容量达到上限且需要添加, 移除最久未使用的</span></span><br><span class="line">                mp.erase(l.back().key); l.pop_back(); </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 容量达到上限，则可以直接添加</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// key存于缓存，需要修改</span></span><br><span class="line">            l.erase(it-&gt;second);</span><br><span class="line">        &#125;</span><br><span class="line">        l.push_front(Node(key, value));     <span class="comment">// 头插最近访问节点</span></span><br><span class="line">        mp[key] = l.begin();                <span class="comment">// 更新哈希表中 key对应的 list迭代器</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, node_iter&gt; mp;       <span class="comment">// 哈希表</span></span><br><span class="line">    <span class="built_in">list</span>&lt;Node&gt; l;                           <span class="comment">// 双向链表</span></span><br><span class="line">    <span class="keyword">int</span> cap;                                <span class="comment">// 缓存容量上限</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> capacity = <span class="number">3</span>;</span><br><span class="line">    <span class="function">LRUCache <span class="title">cache</span><span class="params">(capacity)</span></span>;</span><br><span class="line"></span><br><span class="line">    cache.put(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    cache.put(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">1</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;		<span class="comment">// 返回 1</span></span><br><span class="line">    cache.put(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">2</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;		<span class="comment">// 返回 2 </span></span><br><span class="line">    cache.put(<span class="number">4</span>, <span class="number">4</span>);                     		<span class="comment">// 该操作会使得关键字 1 作废</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">1</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;		<span class="comment">// 返回 -1 (未找到)</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">3</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;		<span class="comment">// 返回 3</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">4</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;		<span class="comment">// 返回  4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    out:</span></span><br><span class="line"><span class="comment">    1 2 -1 3 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<h2 id="LFU"><a href="#LFU" class="headerlink" title="LFU"></a>LFU</h2><h3 id="LFU概念"><a href="#LFU概念" class="headerlink" title="LFU概念"></a>LFU概念</h3><p>LFU（The Least Frequently Used，最不经常使用）也是一种常见的缓存算法。</p>
<p>和LRU类似，LFU同样有这样的假设：<strong>如果一个数据在最近一段时间很少被访问到，那么可以认为在将来它被访问的可能性也很小。因此，当空间满时，最小频率访问的数据最先被淘汰；当存在两个或者更多个键具有相同的使用频次时，应该淘汰最久未使用的数据。（类比LRU）</strong></p>
<h3 id="LFU算法实现"><a href="#LFU算法实现" class="headerlink" title="LFU算法实现"></a>LFU算法实现</h3><h4 id="LFU算法描述"><a href="#LFU算法描述" class="headerlink" title="LFU算法描述"></a>LFU算法描述</h4><p>需要设计一种数据结构，并且提供一下接口：</p>
<ul>
<li>构造函数，确定初始缓存容量</li>
<li><code>get(key)</code> ：如果键存在于缓存中，则获取键的值，否则返回 -1。</li>
<li><code>put(key, value)</code> - 如果键已存在，则变更其值；如果键不存在，请插入键值对。当缓存达到其容量时，则应该在插入新项之前，移除最不经常使用的项。<strong>当存在两个或者更多个键具有相同的使用频次时，应该移除最久未使用的键</strong>。</li>
</ul>
<h4 id="LFU算法图示"><a href="#LFU算法图示" class="headerlink" title="LFU算法图示"></a>LFU算法图示</h4><p>我们可以使用<strong>双哈希表 + 双链表</strong>来模拟实现LFU算法：</p>
<ul>
<li><code>key_table</code>：用来快速查找某个key是否存于缓存中</li>
<li><code>freq_table</code>：以使用频次为键，存储相同使用频次的节点</li>
</ul>
<p><strong>LFU存储图示</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200610134226961.png" alt="LFU存储图示" title="">
                </div>
                <div class="image-caption">LFU存储图示</div>
            </figure>



<p>当LFU的容量未到达上限时，对某个数据进行访问（包括添加，读取，修改），其使用频次加一，则只需要在对应链表头部插入新节点即可。</p>
<p>当LFU的容量到达上限时，需要添加某个数据，则需要移除当前使用频次最低的链表最末端的键值（最久未使用），然后在频次为1的链表头插新节点。</p>
<p><strong>容量未满，插入新值005</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200610134635589.png" alt="容量未满，插入新值" title="">
                </div>
                <div class="image-caption">容量未满，插入新值</div>
            </figure>



<p><strong>访问数据001</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200610135240758.png" alt="访问数据001" title="">
                </div>
                <div class="image-caption">访问数据001</div>
            </figure>



<p><strong>容量上限，插入新值006</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200610135906353.png" alt="容量上限，插入新值" title="">
                </div>
                <div class="image-caption">容量上限，插入新值</div>
            </figure>

<h4 id="LFU-C-代码"><a href="#LFU-C-代码" class="headerlink" title="LFU C++代码"></a>LFU C++代码</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LFUCache</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 键值节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> key, val, freq;</span><br><span class="line">        Node(<span class="keyword">int</span> _key,<span class="keyword">int</span> _val,<span class="keyword">int</span> _freq): key(_key), val(_val), freq(_freq)&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    LFUCache(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;cap = capacity;</span><br><span class="line">        min_freq = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!cap) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">auto</span> it = key_table.find(key);			 </span><br><span class="line">        <span class="comment">// 节点不存在</span></span><br><span class="line">        <span class="keyword">if</span>(it == key_table.end())&#123;					</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">auto</span> key_iter = it-&gt;second;</span><br><span class="line">            Node* node = *key_iter;</span><br><span class="line">            <span class="keyword">int</span> val = node-&gt;val, freq = node-&gt;freq;</span><br><span class="line">            freq_table[freq].erase(key_iter);</span><br><span class="line">            <span class="comment">// 如果 freq 对应的链表为空，则移除</span></span><br><span class="line">            <span class="keyword">if</span>(freq_table[freq].size() == <span class="number">0</span>)&#123;		</span><br><span class="line">                freq_table.erase(freq);</span><br><span class="line">                <span class="comment">// 更新最小使用频次，为当前节点使用频次 ferq + 1</span></span><br><span class="line">                <span class="keyword">if</span>(min_freq == freq) min_freq = freq + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node-&gt;freq += <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// freq + 1 频次对应链表进行头插</span></span><br><span class="line">            freq_table[freq + <span class="number">1</span>].push_front(node);</span><br><span class="line">            <span class="comment">// 更新 key 对应的list迭代器</span></span><br><span class="line">            key_table[key] = freq_table[freq + <span class="number">1</span>].begin();</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!cap) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">auto</span> it = key_table.find(key);</span><br><span class="line">        <span class="keyword">if</span>(it != key_table.end())&#123;</span><br><span class="line">            <span class="comment">// key 存于缓存中</span></span><br><span class="line">            <span class="keyword">auto</span> key_iter = it-&gt;second;</span><br><span class="line">            <span class="keyword">auto</span> node = *key_iter;</span><br><span class="line">            <span class="keyword">int</span> freq = node-&gt;freq;</span><br><span class="line">            freq_table[freq].erase(key_iter);</span><br><span class="line">            <span class="keyword">if</span>(freq_table[freq].size() == <span class="number">0</span>)&#123;</span><br><span class="line">                freq_table.erase(freq);</span><br><span class="line">                <span class="comment">// 更新 min_freq</span></span><br><span class="line">                <span class="keyword">if</span>(min_freq == freq)min_freq = freq + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 修改值, 更新freq</span></span><br><span class="line">            node-&gt;freq += <span class="number">1</span>; node-&gt;val = value;</span><br><span class="line">            <span class="comment">// freq + 1 频次链表进行头插</span></span><br><span class="line">            freq_table[freq + <span class="number">1</span>].push_front(node);</span><br><span class="line">            <span class="comment">// 更新 key 对应的list迭代器</span></span><br><span class="line">            key_table[key] = freq_table[freq + <span class="number">1</span>].begin();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 容量达到上限</span></span><br><span class="line">            <span class="keyword">if</span>(key_table.size() == cap)&#123;</span><br><span class="line">                <span class="comment">// 获取使用频次最小且最久未使用的节点</span></span><br><span class="line">                Node* del_node = freq_table[min_freq].back();</span><br><span class="line">                freq_table[min_freq].pop_back();</span><br><span class="line">                <span class="keyword">if</span>(freq_table[min_freq].size() == <span class="number">0</span>)&#123;</span><br><span class="line">                    freq_table.erase(min_freq);</span><br><span class="line">                &#125;</span><br><span class="line">                key_table.erase(del_node-&gt;key);</span><br><span class="line">                <span class="keyword">delete</span> del_node;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 头插新节点</span></span><br><span class="line">            freq_table[<span class="number">1</span>].push_front(<span class="keyword">new</span> Node(key, value, <span class="number">1</span>));</span><br><span class="line">            key_table[key] = freq_table[<span class="number">1</span>].begin();</span><br><span class="line">            <span class="comment">// 当前最小使用频次为1</span></span><br><span class="line">            min_freq = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 缓存上限</span></span><br><span class="line">    <span class="keyword">int</span> cap;</span><br><span class="line">    <span class="comment">// 当前最低使用频次</span></span><br><span class="line">    <span class="keyword">int</span> min_freq;</span><br><span class="line">    <span class="comment">// 根据key建立哈希表</span></span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">list</span>&lt;Node*&gt;::iterator&gt; key_table;</span><br><span class="line">    <span class="comment">// 按照使用频次建立哈希表</span></span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">list</span>&lt;Node*&gt;&gt; freq_table;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="代码测试-1"><a href="#代码测试-1" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> capacity = <span class="number">2</span>;</span><br><span class="line"> 	<span class="function">LFUCache <span class="title">cache</span><span class="params">(capacity)</span></span>;</span><br><span class="line">    </span><br><span class="line">    cache.put(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    cache.put(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">1</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;       <span class="comment">// 返回 1</span></span><br><span class="line">	cache.put(<span class="number">3</span>, <span class="number">3</span>);    						  <span class="comment">// 此操作会使关键字 2 作废</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">2</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;       <span class="comment">// 返回 -1 (未找到key 2)</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">3</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;       <span class="comment">// 返回 3</span></span><br><span class="line">	cache.put(<span class="number">4</span>, <span class="number">4</span>);    						  <span class="comment">// 此操作会使关键字 1 作废</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">1</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;       <span class="comment">// 返回 -1 (未找到 key 1)</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">3</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;       <span class="comment">// 返回 3</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">4</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;       <span class="comment">// 返回 4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	out:</span></span><br><span class="line"><span class="comment">	1 -1 3 -1 3 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>LRU和LFU的算法暂时就介绍到这里了，作者水平有限，可能会存在疏漏之处，欢迎指正。</p>
<p>关于其他的缓存算法，例如<strong>FIFO</strong>，<strong>ARC</strong>，<strong>MRU</strong>等，我们会在后续的文章继续探讨。</p>
<p>谢谢~</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>缓存算法</tag>
      </tags>
  </entry>
  <entry>
    <title>作息表</title>
    <url>/2020/06/17/%E4%BD%9C%E6%81%AF%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="作息表"><a href="#作息表" class="headerlink" title="作息表"></a>作息表</h1><table>
<thead>
<tr>
<th>时间</th>
<th>任务</th>
</tr>
</thead>
<tbody><tr>
<td>7：30</td>
<td>起床</td>
</tr>
<tr>
<td>7：30 - 9：00</td>
<td>晨练 + 发音练习 +早饭</td>
</tr>
<tr>
<td>9：00 - 10：20</td>
<td>做题</td>
</tr>
<tr>
<td>10：40：12：00</td>
<td>做题</td>
</tr>
<tr>
<td>12：00 - 13：30</td>
<td>吃饭</td>
</tr>
<tr>
<td>13：30 - 14：30</td>
<td>午休</td>
</tr>
<tr>
<td>14 ：30 - 16：00</td>
<td>看视频学习</td>
</tr>
<tr>
<td>16：30 - 18：00</td>
<td>做题</td>
</tr>
<tr>
<td>18：00 - 19：30</td>
<td>吃饭</td>
</tr>
<tr>
<td>19：30 - 20：30</td>
<td>跑步</td>
</tr>
<tr>
<td>21：00 - 22：30</td>
<td>看视频学习</td>
</tr>
<tr>
<td>22：30 - 23：20</td>
<td>玩一会睡觉</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>圆周率Pi的求解</title>
    <url>/2020/06/11/%E5%9C%86%E5%91%A8%E7%8E%87Pi%E7%9A%84%E6%B1%82%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="圆周率Pi的求解"><a href="#圆周率Pi的求解" class="headerlink" title="圆周率Pi的求解"></a>圆周率Pi的求解</h1><blockquote>
<p>字节跳动面试时，算法部分给我丢了这个开胃小菜；当时使用的是蒙特卡洛模拟，效果还不错。</p>
</blockquote>
<h2 id="1-蒙特卡洛模拟"><a href="#1-蒙特卡洛模拟" class="headerlink" title="1. 蒙特卡洛模拟"></a>1. 蒙特卡洛模拟</h2><p>蒙特卡洛模拟用于模拟一个随机过程中不同结果可能出现的概率。那怎么使用蒙特卡洛模拟来求解圆周率Pi呢？</p>
<h3 id="1-1-思想"><a href="#1-1-思想" class="headerlink" title="1.1 思想"></a>1.1 思想</h3><p>蒙特卡洛模拟的思想是很简单的，比如：<strong>在以[0,0]，[1,1]为顶点的正方形内进行随机投点，如果该随机点到圆心[0,0]的距离小于1，则说明该点位于以[0,0]为圆心，1为半径的1/4圆内；当试验次数达到无穷时，位于圆内点的数目和总投点数目之比无限接近圆和正方形面积之比，即pi/4。</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200611192448117.png" alt="蒙特卡洛模拟" title="">
                </div>
                <div class="image-caption">蒙特卡洛模拟</div>
            </figure>

<h3 id="1-2-求解代码"><a href="#1-2-求解代码" class="headerlink" title="1.2 求解代码"></a>1.2 求解代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">float</span> <span class="title">calcPi</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> numOfPoints)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 计算随机点到原点的距离平方</span></span><br><span class="line">        <span class="keyword">auto</span> getDist = [](<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&amp; point)&#123;</span><br><span class="line">            <span class="keyword">return</span> point[<span class="number">0</span>] * point[<span class="number">0</span>] + point[<span class="number">1</span>] * point[<span class="number">1</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">int</span> legal_num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;= numOfPoints; ++i)&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; point = getNextRandom();</span><br><span class="line">            <span class="keyword">if</span>(getDist(point) &lt;= <span class="number">1.0f</span>)&#123;</span><br><span class="line">				++legal_num;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 面积之比： Pi/4 ≈ legal_num/numOfPoints</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">4.0</span>*(<span class="keyword">float</span>)legal_num/(<span class="keyword">float</span>)numOfPoints;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; <span class="title">getNextRandom</span><span class="params">()</span></span>&#123;</span><br><span class="line">    	<span class="keyword">int</span> x = rand() % <span class="number">100</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> y = rand() % <span class="number">100</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;x/<span class="number">100.0f</span>, y/<span class="number">100.0f</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    Solution s;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> numOfPoints = <span class="number">10</span>* <span class="number">10000</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; s.calcPi(numOfPoints) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	out:</span></span><br><span class="line"><span class="comment">	3.11112</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>从这里的输出结果可以看到，使用蒙特卡洛求解的结果精度明显不够，不过思想简单算法实现容易。</p>
<blockquote>
<p>我当时面试时，输出的结果差不多就是这个样子；面试官看后说，有没有办法使得结果更加精确一些呢？</p>
<p>我说：可以增大样本点的个数；或者实验多组数据求取平均值；但是感觉这个模拟方法不太好。</p>
<p>面试官又问：还有优化的方法么？这个随机数的生成可以优化一下么？</p>
<p>我想：随机数的生成？什么意思？难道是在说随机数的底层生成算法上解决？虽然有接触过线性同余法，但是这水平更不不够呀。难道是说，想要保证随机数不重复？使用哈希？没想明白，就说不会了。</p>
<p>有想法的朋友可以告知我一下哈~</p>
</blockquote>
<h2 id="2-级数求解"><a href="#2-级数求解" class="headerlink" title="2. 级数求解"></a>2. 级数求解</h2><p>在高中或者在大学数学中，我们可能会看到这样一个公式：</p>
<p><code>Pi/4 = 1 - 1/3 + 1/5 - 1/7 + 1/9 - 1/11 + 1/13 ...</code></p>
<p>其实这是一个<strong>交错级数</strong>（以0为极限，必收敛），是数学家莱布尼茨发现的计算圆周率Pi的公式，它的通项表达为如下：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200611192708214.png" alt="莱布尼茨公式" title="">
                </div>
                <div class="image-caption">莱布尼茨公式</div>
            </figure>

<h3 id="2-1-代码"><a href="#2-1-代码" class="headerlink" title="2.1 代码"></a>2.1 代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">calcPi</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0.0</span>, symbol = <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;=n; ++i)&#123;</span><br><span class="line">            sum += symbol/(<span class="number">2</span> * i + <span class="number">1</span>);</span><br><span class="line">            symbol = -symbol;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span> * sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Solution s;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> n = <span class="number">10</span> * <span class="number">10000</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; s.calcPi(n) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	out:</span></span><br><span class="line"><span class="comment">	3.1416</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>从输出结果可以看出，使用莱布尼茨级数来计算Pi值精度更好，值得一提的是该算法的求解效率大大优于蒙特卡洛模拟。</p>
</blockquote>
<p>好了，关于圆周率Pi的求解方法暂时介绍到这里，大家有什么更好的方法，可以在下面畅所欲言~</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>蒙特卡洛算法</tag>
        <tag>级数</tag>
      </tags>
  </entry>
  <entry>
    <title>讲讲堆内存和栈内存</title>
    <url>/2020/06/14/%E8%AE%B2%E8%AE%B2%E5%A0%86%E5%86%85%E5%AD%98%E5%92%8C%E6%A0%88%E5%86%85%E5%AD%98/</url>
    <content><![CDATA[<h1 id="讲讲堆内存和栈内存"><a href="#讲讲堆内存和栈内存" class="headerlink" title="讲讲堆内存和栈内存"></a>讲讲堆内存和栈内存</h1><blockquote>
<p>前段时间面试腾讯时候，面试官问了一个很基础的问题：请你说说堆内存和栈内存的区别？</p>
<p>我：基本就是那套模板，例如栈内存是由编译器自动分配和释放，其内存地址在编译期已确定的；主要用来存储局部变量，函数参数以及函数调用的地址等等；对于堆内存来说，其生命周期是由程序员决定的，即程序员手动申请释放，如果没有及时释放，就会造成内存泄漏，当程序结束时，会有操作系统回收未释放的内存。</p>
<p>说完之后，面试官没有立即反应，我以为他不太满意，又接着说了说堆栈的增长方向和内存大小等等…</p>
<p>不知道是我回答的不好还是面试官太高冷，没什么说辞…</p>
</blockquote>
<p>本文内容有参考百科，知乎，博客等优秀回答。</p>
<h2 id="1-从编程语言角度理解不同内存"><a href="#1-从编程语言角度理解不同内存" class="headerlink" title="1.  从编程语言角度理解不同内存"></a>1.  从编程语言角度理解不同内存</h2><p><strong>程序的内存分配：</strong></p>
<p>一个由C/C++编译的程序占用的内存分布：</p>
<ul>
<li><p>栈区（stack）：由编译器自动分配释放 ，存放函数的参数值，局部变量的值等</p>
</li>
<li><p>堆区（heap）：一般由程序员分配释放， 若程序员不释放，程序结束时可能由操作系统回收 </p>
</li>
<li><p>全局区（global）/ 静态区（static）：</p>
<ul>
<li>data区：已经初始化的全局变量、静态变量和常量</li>
<li>bss区：用来存放程序中未初始化的全局变量和静态变量；程序执行前BSS段会自动清0。</li>
<li>常量区：全局区中划分的一个小区域，里面存放的是常量，如const修饰的全局变量、字符串常量</li>
</ul>
</li>
<li><p>代码区（code）：存放函数体的二进制代码</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	@Time     : 2020/6/15 </span></span><br><span class="line"><span class="comment"> 	@Author   : BambooWine</span></span><br><span class="line"><span class="comment"> 	@Mail     : 2278816117@qq.com</span></span><br><span class="line"><span class="comment"> 	@Env	  : win10 + vs2017</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> g_a = <span class="number">10</span>;		<span class="comment">// 全局变量 data区</span></span><br><span class="line"><span class="keyword">int</span> g_b;	        <span class="comment">// 全局变量 bss区</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> s_a = <span class="number">10</span>;	<span class="comment">// 静态变量 data区</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;           <span class="comment">// 栈</span></span><br><span class="line">    <span class="keyword">char</span> s[] = <span class="string">"abc"</span>;	 <span class="comment">// 栈</span></span><br><span class="line">    <span class="keyword">char</span>* p1;            <span class="comment">// 栈</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> s_b = <span class="number">1</span>;	 <span class="comment">// 静态变量 data区</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* str = <span class="string">"123"</span>;	            <span class="comment">// "123"在常量区，str在栈区</span></span><br><span class="line">    p1 = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">10</span>);  <span class="comment">// 申请堆内存</span></span><br><span class="line">    <span class="built_in">strcpy</span>(p1, <span class="string">"123"</span>);   <span class="comment">// 123放在常量区，编译器可能会将它与p3所指向的"123456"优化成一个地方</span></span><br><span class="line">    <span class="built_in">free</span>(p1); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-从物理层角度理解堆栈内存"><a href="#2-从物理层角度理解堆栈内存" class="headerlink" title="2. 从物理层角度理解堆栈内存"></a>2. 从物理层角度理解堆栈内存</h2><blockquote>
<p>不知道大家有没有这样的想法，堆栈不就是内存的不同区，为什么访问速度会有差矣呢？</p>
<p>最近想到了这个问题，但奈何才疏学浅，只能在各种论坛搜索资料。</p>
</blockquote>
<ul>
<li>从硬件上来说，堆和栈最终都是内存条上的若干存储单元，理应并没有什么不同</li>
<li>但是很多CPU对压栈，出栈操作有硬件（指令）上的支持，所以在栈区分配/归还内存速度较快；尤其是函数内部的局部变量，可以轻易与函数调用/返回绑定</li>
<li>由于栈内存分配/回收的特殊机制，使得同一函数内部的”局部变量”总是分配在一段连续的内存空间上</li>
</ul>
<p><a href="https://blog.csdn.net/yxwb1253587469/article/details/50759604?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-3" target="_blank" rel="noopener">https://blog.csdn.net/yxwb1253587469/article/details/50759604?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-3</a></p>
<p><a href="https://www.cnblogs.com/jiudianren/p/5671992.html" target="_blank" rel="noopener">https://www.cnblogs.com/jiudianren/p/5671992.html</a></p>
]]></content>
      <categories>
        <category>计算机组成原理</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-theme-indigo搭建Valine评论以及美化</title>
    <url>/2020/06/12/hexo/hexo-theme-indigo%E6%90%AD%E5%BB%BAValine%E8%AF%84%E8%AE%BA%E4%BB%A5%E5%8F%8A%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<h1 id="indigo主题搭建Valine评论以及美化"><a href="#indigo主题搭建Valine评论以及美化" class="headerlink" title="indigo主题搭建Valine评论以及美化"></a>indigo主题搭建Valine评论以及美化</h1><h2 id="1-indigo主题搭建Valine后台评论系统"><a href="#1-indigo主题搭建Valine后台评论系统" class="headerlink" title="1. indigo主题搭建Valine后台评论系统"></a>1. indigo主题搭建Valine后台评论系统</h2><p>Valine是基于Leancloud开发完成的，因此我们需要先注册一个Leadcloud的账号。</p>
<p><a href="https://www.leancloud.cn/" target="_blank" rel="noopener">Leadcloud官网，点我注册</a></p>
<ul>
<li>先注册；注册的时候需要身份验证和邮箱验证。</li>
<li>创建一个应用，名称可以随意起，不过我们还是规范些。</li>
<li>然后 <strong>进入应用-&gt;设置-&gt;应用key</strong>，获取你的 <strong>appid</strong> 和  <strong>appkey</strong>。</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200612102215624.png" alt="进入应用" title="">
                </div>
                <div class="image-caption">进入应用</div>
            </figure>



<ul>
<li>打开Indigo主题配置文件<code>_config.yml</code>，找到valine部分，在appId和appKey填写上次获取到的。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Valine Comment system. https://valine.js.org</span></span><br><span class="line">valine:</span><br><span class="line">  enable: true # 如果你想使用valine，请将值设置为 true</span><br><span class="line">  appId:  # your leancloud appId</span><br><span class="line">  appKey:  # your leancloud appKey</span><br><span class="line">  notify: false # Mail notify</span><br><span class="line">  verify: false # Verify code</span><br><span class="line">  avatar: mm # Gravatar style : mm/identicon/monsterid/wavatar/retro/hide</span><br><span class="line">  placeholder: 快来评论吧~ # Comment Box placeholder</span><br><span class="line">  guest_info: nick,mail,link # Comment header info</span><br><span class="line">  pageSize: 5 # comment list page size</span><br></pre></td></tr></table></figure>

<ul>
<li>请填写<code>应用&gt;设置&gt;安全设置</code>中的<code>Web 安全域名</code></li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200612151347788.png" alt="image-20200612151347788" title="">
                </div>
                <div class="image-caption">image-20200612151347788</div>
            </figure>

<ul>
<li>至此就完全配置完成了</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo s # 查看效果</span><br></pre></td></tr></table></figure>

<ul>
<li><p>看一眼效果（placeholder属性我改过了）</p>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200612104305556.png" alt="搭建效果"></p>
</li>
</ul>
<h2 id="2-Indigo主题Valine的简单美化"><a href="#2-Indigo主题Valine的简单美化" class="headerlink" title="2. Indigo主题Valine的简单美化"></a>2. Indigo主题Valine的简单美化</h2><blockquote>
<p>不得不说，作者不太会html和css，作为一个前端门外汉，只能简简单单地美化一下；所以在这里我只简单说一下美化的步骤，熟练的小伙伴可以自己尝试尝试。</p>
</blockquote>
<p>打开<code>\themes\indigo\layout\_partial\plugins\valine.ejs</code>所在文件，这就是评论区的配置。</p>
<p>关于基础的配置，不再赘述，大家可以参考<a href="https://valine.js.org/" target="_blank" rel="noopener">Valine官网</a>。</p>
<h3 id="2-1-Valine配置BiliBili表情包"><a href="#2-1-Valine配置BiliBili表情包" class="headerlink" title="2.1 Valine配置BiliBili表情包"></a>2.1 Valine配置BiliBili表情包</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200612140932816.png" alt="Valine配置BiliBili表情包" title="">
                </div>
                <div class="image-caption">Valine配置BiliBili表情包</div>
            </figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">new Valine(&#123;</span><br><span class="line">            el: '#comments',</span><br><span class="line">            notify: '&lt;%= theme.valine.notify %&gt;' == 'true',</span><br><span class="line">            verify: '&lt;%= theme.valine.verify %&gt;' == 'true',</span><br><span class="line">            appId: "&lt;%= theme.valine.appId %&gt;",</span><br><span class="line">            appKey: "&lt;%= theme.valine.appKey %&gt;",</span><br><span class="line">            avatar: "&lt;%= theme.valine.avatar %&gt;",</span><br><span class="line">            placeholder: "&lt;%= theme.valine.placeholder %&gt;",</span><br><span class="line">            guest_info: guest_info.length == 0 ? GUEST_INFO : guest_info,</span><br><span class="line">            pageSize: "&lt;%= theme.valine.pageSize %&gt;",</span><br><span class="line">            </span><br><span class="line">            // 设置Bilibili表情包地址</span><br><span class="line">            emojiCDN: '//i0.hdslb.com/bfs/emote/', </span><br><span class="line">            // 表情title和图片映射</span><br><span class="line">            emojiMaps: &#123;</span><br><span class="line">            "tv_doge": "6ea59c827c414b4a2955fe79e0f6fd3dcd515e24.png",</span><br><span class="line">            "tv_亲亲": "a8111ad55953ef5e3be3327ef94eb4a39d535d06.png",</span><br><span class="line">            "tv_偷笑": "bb690d4107620f1c15cff29509db529a73aee261.png",</span><br><span class="line">            "tv_再见": "180129b8ea851044ce71caf55cc8ce44bd4a4fc8.png",</span><br><span class="line">            "tv_冷漠": "b9cbc755c2b3ee43be07ca13de84e5b699a3f101.png",</span><br><span class="line">            "tv_发怒": "34ba3cd204d5b05fec70ce08fa9fa0dd612409ff.png",</span><br><span class="line">            "tv_发财": "34db290afd2963723c6eb3c4560667db7253a21a.png",</span><br><span class="line">            "tv_可爱": "9e55fd9b500ac4b96613539f1ce2f9499e314ed9.png",</span><br><span class="line">            "tv_吐血": "09dd16a7aa59b77baa1155d47484409624470c77.png",</span><br><span class="line">            "tv_呆": "fe1179ebaa191569b0d31cecafe7a2cd1c951c9d.png",</span><br><span class="line">            "tv_呕吐": "9f996894a39e282ccf5e66856af49483f81870f3.png",</span><br><span class="line">            "tv_困": "241ee304e44c0af029adceb294399391e4737ef2.png",</span><br><span class="line">            "tv_坏笑": "1f0b87f731a671079842116e0991c91c2c88645a.png",</span><br><span class="line">            "tv_大佬": "093c1e2c490161aca397afc45573c877cdead616.png",</span><br><span class="line">            "tv_大哭": "23269aeb35f99daee28dda129676f6e9ea87934f.png",</span><br><span class="line">            "tv_委屈": "d04dba7b5465779e9755d2ab6f0a897b9b33bb77.png",</span><br><span class="line">            "tv_害羞": "a37683fb5642fa3ddfc7f4e5525fd13e42a2bdb1.png",</span><br><span class="line">            "tv_尴尬": "7cfa62dafc59798a3d3fb262d421eeeff166cfa4.png",</span><br><span class="line">            "tv_微笑": "70dc5c7b56f93eb61bddba11e28fb1d18fddcd4c.png",</span><br><span class="line">            "tv_思考": "90cf159733e558137ed20aa04d09964436f618a1.png",</span><br><span class="line">            "tv_惊吓": "0d15c7e2ee58e935adc6a7193ee042388adc22af.png",</span><br><span class="line">            "tv_打脸": "56ab10b624063e966bfcb76ea5dc4794d87dfd47.png",</span><br><span class="line">            "tv_抓狂": "fe31c08edad661d63762b04e17b8d5ae3c71a757.png",</span><br><span class="line">            "tv_抠鼻": "c666f55e88d471e51bbd9fab9bb308110824a6eb.png",</span><br><span class="line">            "tv_斜眼笑": "911f987aa8bc1bee12d52aafe62bc41ef4474e6c.png",</span><br><span class="line">            "tv_无奈": "ea8ed89ee9878f2fece2dda0ea8a5dbfe21b5751.png",</span><br><span class="line">            "tv_晕": "5443c22b4d07fb1907ccc610c8e6db254f2461b7.png",</span><br><span class="line">            "tv_流汗": "cead1c351ab8d79e9f369605beb90148db0fbed3.png",</span><br><span class="line">            "tv_流泪": "7e71cde7858f0cd50d74b0264aa26db612a8a167.png",</span><br><span class="line">            "tv_流鼻血": "c32d39db2737f89b904ca32700d140a9241b0767.png",</span><br><span class="line">            "tv_点赞": "f85c354995bd99e28fc76c869bfe42ba6438eff4.png",</span><br><span class="line">            "tv_生气": "26702dcafdab5e8225b43ffd23c94ac1ff932654.png",</span><br><span class="line">            "tv_生病": "8b0ec90e6b86771092a498c54f09fc94621c1900.png",</span><br><span class="line">            "tv_疑问": "0793d949b18d7be716078349c202c15ff166f314.png",</span><br><span class="line">            "tv_白眼": "c1d59f439e379ee50eef488bcb5e5378e5044ea4.png",</span><br><span class="line">            "tv_皱眉": "72ccad6679fea0d14cce648b4d818e09b8ffea2d.png",</span><br><span class="line">            "tv_目瞪口呆": "0b8cb81a68de5d5365212c99375e7ace3e7891b7.png",</span><br><span class="line">            "tv_睡着": "8b196675b53af58264f383c50ad0945048290b33.png",</span><br><span class="line">            "tv_笑哭": "1abc628f6d4f4caf9d0e7800878f4697abbc8273.png",</span><br><span class="line">            "tv_腼腆": "89712c0d4af73e67f89e35cbc518420380a7f6f4.png",</span><br><span class="line">            "tv_色": "61822c7e9aae5da76475e7892534545336b23a6f.png",</span><br><span class="line">            "tv_调侃": "4bc022533ef31544ca0d72c12c808cf4a1cce3e3.png",</span><br><span class="line">            "tv_调皮": "b9c41de8e82dd7a8515ae5e3cb63e898bf245186.png",</span><br><span class="line">            "tv_鄙视": "6e72339f346a692a495b123174b49e4e8e781303.png",</span><br><span class="line">            "tv_闭嘴": "c9e990da7f6e93975e25fd8b70e2e290aa4086ef.png",</span><br><span class="line">            "tv_难过": "87f46748d3f142ebc6586ff58860d0e2fc8263ba.png",</span><br><span class="line">            "tv_馋": "fc7e829b845c43c623c8b490ee3602b7f0e76a31.png",</span><br><span class="line">            "tv_鬼脸": "0ffbbddf8a94d124ca2f54b360bbc04feb6bbfea.png",</span><br><span class="line">            "tv_黑人问号": "45821a01f51bc867da9edbaa2e070410819a95b2.png",</span><br><span class="line">            "tv_鼓掌": "1d21793f96ef4e6f48b23e53e3b9e42da833a0f6.png"</span><br><span class="line">                // ... 更多表情</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>



<h3 id="2-2-Valine评论区添加背景图片"><a href="#2-2-Valine评论区添加背景图片" class="headerlink" title="2.2 Valine评论区添加背景图片"></a>2.2 Valine评论区添加背景图片</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 评论框美化 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.v</span> <span class="selector-class">.vwrap</span> <span class="selector-class">.vedit</span>&#123;</span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 这里可以直接使用自定义链接，也可以在主题配置文件中添加项 --&gt;</span></span></span><br><span class="line">        &lt;!--</span><br><span class="line">        valine:</span><br><span class="line">          bg: https://gitee.com/cungudafa/source/raw/master/img/gif/Sitich/Sitich30.gif</span><br><span class="line">        --&gt;</span><br><span class="line"><span class="xml">        background: url("<span class="tag">&lt;<span class="name">%=</span> <span class="attr">theme.valine.bg</span> %&gt;</span>"); </span></span><br><span class="line">        background-repeat: no-repeat;</span><br><span class="line">        background-position: right;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>演示效果</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200612141245363.png" alt="Valine添加背景图片" title="">
                </div>
                <div class="image-caption">Valine添加背景图片</div>
            </figure>



<h3 id="2-3-Valine简单美化（按钮，表头）"><a href="#2-3-Valine简单美化（按钮，表头）" class="headerlink" title="2.3 Valine简单美化（按钮，表头）"></a>2.3 Valine简单美化（按钮，表头）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt; &#123;</span><br><span class="line">    .v .vwrap .vheader&#123;</span><br><span class="line">        background: #fff7f7f7;</span><br><span class="line">    &#125;</span><br><span class="line">    .v .vbtn.vsubmit&#123;</span><br><span class="line">        border-radius: 30px;</span><br><span class="line">        padding: 0;</span><br><span class="line">        color: #111; </span><br><span class="line">        line-height: 44px;</span><br><span class="line">        width:30%;</span><br><span class="line">        background:#ff9999;</span><br><span class="line">        color: #fff;</span><br><span class="line">        line-height: 2;</span><br><span class="line">        font-weight: bolder;</span><br><span class="line">        border: 1px solid #e9eff3;</span><br><span class="line">        padding: .4em .5em;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>



<p><strong>演示效果</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200612142054607.png" alt="美化效果" title="">
                </div>
                <div class="image-caption">美化效果</div>
            </figure>



<blockquote>
<p>简单介绍到这里，有前端大神可以在评论区留下您的美化效果~</p>
</blockquote>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-indigo主题添加置顶功能</title>
    <url>/2020/06/17/hexo/hexo-indigo%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E7%BD%AE%E9%A1%B6%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h1 id="hexo-indigo主题添加置顶功能"><a href="#hexo-indigo主题添加置顶功能" class="headerlink" title="hexo-indigo主题添加置顶功能"></a>hexo-indigo主题添加置顶功能</h1><blockquote>
<p>参考文章：<a href="https://www.jianshu.com/p/42a4efcdf8d7" target="_blank" rel="noopener">解决Hexo博客文章置顶问题</a></p>
</blockquote>
<h2 id="1-自定义html排序功能"><a href="#1-自定义html排序功能" class="headerlink" title="1. 自定义html排序功能"></a>1. 自定义html排序功能</h2><p>原理：<strong>在Hexo生成首页HTML时，将top值高的文章排在前面，达到置顶功能</strong>。</p>
<p>修改Hexo文件夹下的<code>node_modules/hexo-generator-index/lib/generator.js</code>，在生成文章之前进行文章top值排序。</p>
<p>需添加的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">        <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>generator.js完整内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">  <span class="keyword">const</span> posts = locals.posts.sort(config.index_generator.order_by);</span><br><span class="line"></span><br><span class="line">	posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    	<span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">        	<span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></span><br><span class="line">        	<span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123;     <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面</span></span><br><span class="line">        	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">        	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</span><br><span class="line">  <span class="keyword">const</span> path = config.index_generator.path || <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> pagination(path, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</span><br><span class="line">    format: paginationDir + <span class="string">'/%d/'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p>修改完成后，只需要在front-matter中设置需要置顶文章的top值，将会根据top值大小来选择置顶顺序top值越大越靠前。需要注意的是，这个文件不是主题的一部分，也不是Git管理的，备份的时候比较容易忽略。</p>
<p><strong>使用实例：</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200617232808783.png" alt="使用实例" title="">
                </div>
                <div class="image-caption">使用实例</div>
            </figure>



<p><strong>只需要设置top值即可完成排序置顶操作，并且还可以根据不同top值，选择置顶文章的先后次序</strong></p>
<h2 id="2-添加置顶标签"><a href="#2-添加置顶标签" class="headerlink" title="2. 添加置顶标签"></a>2. 添加置顶标签</h2><p>参考文章的博主使用的是yelee主题，有自己的置顶标签，在indigo主题里，我们可以自己做。</p>
<ul>
<li><p>如果要在文章中添加置顶标签，则打开<code>themes\indigo\layout\_partial\post.ejs</code>文件，接着定位到<code>&lt;div class=&quot;post-meta&quot;&gt;</code> ，在它的下面添加这段代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加置顶标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">post.top</span> &gt;</span> 1)&#123; %&gt;</span><br><span class="line">	<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-thumb-tack"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">7D26CD</span>&gt;</span>置顶<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-divider"</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果要在博客主页的预览页面添加置顶标签，则打开<code>themes\indigo\layout\_partial\index_item.ejs</code>文件，接着定位到<code>&lt;div class=&quot;post-meta&quot;&gt;</code> ，在它的下面添加这段代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加置顶标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">post.top</span> &gt;</span> 1)&#123; %&gt;</span><br><span class="line">	<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-thumb-tack"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">7D26CD</span>&gt;</span>置顶<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-divider"</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果还想在其他页面添加，则打开对应的 ejs文件，添加上述代码即可</p>
</li>
</ul>
<p><strong>预览效果：</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200617232034478.png" alt="预览效果" title="">
                </div>
                <div class="image-caption">预览效果</div>
            </figure>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>indigo主题添加友链页面</title>
    <url>/2020/06/18/hexo/indigo%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E5%8F%8B%E9%93%BE%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<h1 id="indigo主题添加友链页面"><a href="#indigo主题添加友链页面" class="headerlink" title="indigo主题添加友链页面"></a>indigo主题添加友链页面</h1><h2 id="1-添加友链"><a href="#1-添加友链" class="headerlink" title="1. 添加友链"></a>1. 添加友链</h2><h2 id="2-添加评论页面"><a href="#2-添加评论页面" class="headerlink" title="2. 添加评论页面"></a>2. 添加评论页面</h2>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>indigo自定义界面</title>
    <url>/2020/06/16/hexo/indigo%E8%87%AA%E5%AE%9A%E4%B9%89%E7%95%8C%E9%9D%A2/</url>
    <content><![CDATA[<h1 id="indigo自定义界面"><a href="#indigo自定义界面" class="headerlink" title="indigo自定义界面"></a>indigo自定义界面</h1><p>@card{</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/640.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>

<p>}</p>
<p>@column-2{</p>
<p>@card{</p>
<h1 id="左"><a href="#左" class="headerlink" title="左"></a>左</h1><p>}</p>
<p>@card{</p>
<h1 id="右"><a href="#右" class="headerlink" title="右"></a>右</h1><p>}</p>
<p>}</p>
<p>@column-3{</p>
<p>@card{</p>
<p>左</p>
<p>}</p>
<p>@card{</p>
<p>中</p>
<p>}</p>
<p>@card{</p>
<p>右</p>
<p>}</p>
<p>}</p>
<p>@timeline{</p>
<h5 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h5><p>@item{</p>
<h6 id="6月25日"><a href="#6月25日" class="headerlink" title="6月25日"></a>6月25日</h6><p>第一行<br>第二行 /* ok */</p>
<p>}</p>
<p>@item{</p>
<h6 id="11月6日"><a href="#11月6日" class="headerlink" title="11月6日"></a>11月6日</h6><p>第一行<br>第二行 /* error */</p>
<p>}</p>
<p>}</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>基于hexo搭建博客</title>
    <url>/2020/06/16/hexo/%E5%9F%BA%E4%BA%8Ehexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="基于hexo搭建博客"><a href="#基于hexo搭建博客" class="headerlink" title="基于hexo搭建博客"></a>基于hexo搭建博客</h1><blockquote>
<p>参考文章:</p>
<p><a href="https://blog.csdn.net/Bluno_s/article/details/98515460" target="_blank" rel="noopener">我的Hexo博客搭建过程</a></p>
<p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029" target="_blank" rel="noopener">hexo史上最全搭建教程</a></p>
</blockquote>
<h2 id="1-Git安装和配置"><a href="#1-Git安装和配置" class="headerlink" title="1. Git安装和配置"></a>1. Git安装和配置</h2><ul>
<li><p><a href="https://git-scm.com/" target="_blank" rel="noopener">Git官网</a></p>
<p>Git的安装比较简单</p>
</li>
<li><p>准备一个Github账号，我们的博客要挂在github上</p>
</li>
<li><p>首先打开CMD，设置你的账号和邮箱，输入</p>
<p><code>git config --global user.name &quot;yourname&quot;</code><br><code>git config --global user.email &quot;youremail&quot;</code><br>其中”yourname”是你的github账号，”youremail”是你的github账号邮箱</p>
</li>
<li><p>可以用以下两条命令检查输入<br><code>git config user.name</code><br><code>git config user.email</code></p>
</li>
<li><p>然后用以下命令创建SSH秘钥<br><code>ssh-keygen -t rsa -C &quot;youremail&quot;</code><br>后续连敲3次回车，不需要任何输入。<br>完成之后会告诉你生成了.ssh文件夹（应该在C:\Users\Administrator路径下），找到文件夹，其中id_rsa是秘钥，id_rsa.pub是公钥，用文本编辑器打开id_rsa.pub，复制所有内容。</p>
</li>
<li><p>添加公钥到Github</p>
<p>登录Github，右上角 <strong>头像-&gt;Settings -&gt; SSH and GPG keys -&gt; New SSH key</strong>。 把公钥粘贴到key中，填好title并点击Add SSH key。</p>
</li>
<li><p>回到CMD，输入命令<br><code>ssh -T git@github.com</code><br>选yes，提示成功。</p>
</li>
</ul>
<h2 id="2-安装Nodejs"><a href="#2-安装Nodejs" class="headerlink" title="2. 安装Nodejs"></a>2. 安装Nodejs</h2><ul>
<li><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Nodejs官网</a></p>
<p>windows：选择LTS版本就行了，下载完成后安装。</p>
</li>
<li><p>安装完成有两个组件，nodejs和npm，可以在<strong>git bash</strong>下使用以下命令查看版本</p>
<p><code>node -v</code></p>
<p><code>npm -v</code></p>
</li>
<li><p>用npm安装cnpm淘宝镜像源</p>
<p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>
<p>用以下命令查看版本<br><code>cnpm -v</code><br>安装完成以后就都是用cnpm下载了</p>
</li>
</ul>
<h2 id="3-安装博客框架Hexo"><a href="#3-安装博客框架Hexo" class="headerlink" title="3. 安装博客框架Hexo"></a>3. 安装博客框架Hexo</h2><ul>
<li>安装命令<br><code>cnpm install -g hexo-cli</code></li>
<li>查看版本<br><code>hexo -v</code></li>
</ul>
<h2 id="4-搭建Hexo博客"><a href="#4-搭建Hexo博客" class="headerlink" title="4. 搭建Hexo博客"></a>4. 搭建Hexo博客</h2><blockquote>
<p><a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">hexo常用命令</a></p>
</blockquote>
<ul>
<li><p>新建一个文件夹，例如<code>D:\blog</code></p>
</li>
<li><p>在上述文件夹<code>D:\blog</code>右键，<code>git bash</code>打开</p>
</li>
<li><p>初始化一下hexo</p>
<p><code>hexo init myblog</code></p>
<p>这个myblog可以自己取什么名字都行，然后我们会看到在myblog文件夹下，有一些文件：</p>
<ul>
<li>node_modules: 依赖包</li>
<li>public：存放生成的页面</li>
<li>scaffolds：生成文章的一些模板</li>
<li>source：用来存放你的文章</li>
<li>themes：主题</li>
<li><strong>_config.yml: 博客的配置文件</strong></li>
</ul>
</li>
<li><p>启动博客</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo g		<span class="comment">// hexo generate的缩写，生成静态文章</span></span><br><span class="line">hexo s		<span class="comment">// hexo server的缩写，启动本地服务器</span></span><br></pre></td></tr></table></figure>

<p>然后在浏览器输入localhost:4000就可以看到你生成的博客了，hexo本地web服务器监听了4000端口。</p>
<p><strong>结束本地服务器按Ctrl+C</strong>。</p>
</li>
<li><p>远程部署到Github</p>
<blockquote>
<p>将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上</p>
</blockquote>
<ul>
<li>登录Github，新建一个仓库：右上角+号 -&gt; new repository</li>
<li>项目命名必须是 “yourname.github.io”，比如我的是 “BambooWine.github.io”，描述写一下，选public，然后点Create Repository</li>
<li>为Hexo安装Github部署插件：输入命令 <code>cnpm install --save hexo-deployer-git</code></li>
<li>打开站点配置文件 <strong>_config.yml</strong>，翻到最后，修改为：其中YourgithubName你的GitHub账户名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;YourgithubName&#x2F;YourgithubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<ul>
<li><p>部署到Github：<code>hexo deploy 或者 hexo d</code></p>
<p> 这个过程就是使用你Git中SSH关联的账号往你刚刚新建的仓库中push文件，等待部署完成之后，打开你的github即可查看效果。<strong>通常部署完成之后要等待一段时间，一些效果才会正常显示</strong>。</p>
</li>
</ul>
</li>
</ul>
<h2 id="5-写文章，更换主题等操作"><a href="#5-写文章，更换主题等操作" class="headerlink" title="5.  写文章，更换主题等操作"></a>5.  写文章，更换主题等操作</h2><h3 id="5-1-撰写文章"><a href="#5-1-撰写文章" class="headerlink" title="5.1 撰写文章"></a>5.1 撰写文章</h3><ul>
<li><p>创建博客文章</p>
<p><code>hexo n &quot;我的第一篇博客文章&quot;</code></p>
<p>n是new的简写，创建完成后文章会放到source/_posts文件夹下面，md文件，markdown语法自行学习。</p>
<p>打开文件之后，开头的部分内容官方称为Font-matter，这里你可以设定文章标题，文章创建更新时间，标签，分类等等，具体请查阅。<a href="https://hexo.io/zh-cn/docs/front-matter" target="_blank" rel="noopener">front-matter官网介绍</a></p>
</li>
<li><p>写完一篇博客之后，可以看一下效果</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">hexo cl      <span class="comment">// 清理（必要时清理，不必每次都清理）</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">hexo g       <span class="comment">// hexo generate的缩写，生成静态文章</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">hexo s       <span class="comment">// hexo server的缩写，启动本地服务器</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="5-2-更换主题"><a href="#5-2-更换主题" class="headerlink" title="5.2 更换主题"></a>5.2 更换主题</h3><blockquote>
<p>默认情况博客采用的是landscape主题，略丑陋，本博客采用<a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="noopener">indigo主题</a></p>
</blockquote>
<ul>
<li><p>安装主题</p>
<p>在blog文件夹下，右键<strong>git bash</strong>，输入以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-indigo.git themes&#x2F;indigo</span><br></pre></td></tr></table></figure>

<p>之后会在themes下新建indigo文件夹，然后将主题克隆到此文件夹下</p>
</li>
<li><p>配置hexo全局设置文件_config.yml</p>
<p>找到theme字段，默认是landscape，改成indigo</p>
</li>
<li><p>启动本地服务器查看效果</p>
</li>
</ul>
<p><strong>至此大概就初步完成了，后续美化等操作，大家可以自行挖掘</strong></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>第一章——操作系统引论</title>
    <url>/2020/07/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%BC%95%E8%AE%BA/</url>
    <content><![CDATA[<h1 id="第一章——操作系统引论"><a href="#第一章——操作系统引论" class="headerlink" title="第一章——操作系统引论"></a>第一章——操作系统引论</h1><blockquote>
<p>搬运文章：<a href="https://blog.csdn.net/qq_41261490/article/details/80872072?utm_source=app" target="_blank" rel="noopener">操作系统（第四版）期末复习总结（上）</a></p>
</blockquote>
<h2 id="1-操作系统是什么？"><a href="#1-操作系统是什么？" class="headerlink" title="1. 操作系统是什么？"></a>1. 操作系统是什么？</h2><blockquote>
<p>操作系统为用户完成所有“硬件相关，应用无关“的工作，以给用户方便、高效、安全的使用环境。</p>
</blockquote>
<h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p>​    操作系统是一个大型的<strong>程序系统</strong>，它负责计算机的<strong>全部软、硬件资源的分配</strong>、<strong>调度</strong>工作，<strong>控制并协调多个任务的活动</strong>，实现<strong>信息的存取和保护</strong>。它提供<strong>用户接口</strong>，使用户获得良好的工作环境。</p>
<h3 id="1-2-目标"><a href="#1-2-目标" class="headerlink" title="1.2 目标"></a>1.2 目标</h3><ul>
<li><strong>方便性：</strong>配置OS后计算机系统更容易使用</li>
<li><strong>有效性：</strong>改善资源利用率；提高系统 吞吐量</li>
<li><strong>可扩充性</strong>：OS的结构（如层次化的结构：无结构发展-&gt;模快化结构-&gt;层次化结构-&gt;<strong>微内核</strong>结构）【微内核后续解释】</li>
<li><strong>开放性：</strong>OS遵循世界标准范围。</li>
</ul>
<h3 id="1-3-作用"><a href="#1-3-作用" class="headerlink" title="1.3 作用"></a>1.3 作用</h3><h4 id="1-3-1-OS作为用户与计算机硬件系统之间的接口"><a href="#1-3-1-OS作为用户与计算机硬件系统之间的接口" class="headerlink" title="1.3.1 OS作为用户与计算机硬件系统之间的接口"></a>1.3.1 OS作为用户与计算机硬件系统之间的接口</h4><p>如API／CUI／GUI</p>
<p>即：OS处于用户与计算机硬件系统之间，用户通过OS来使用计算机系统。</p>
<h4 id="1-3-2-OS是计算机系统资源的管理者"><a href="#1-3-2-OS是计算机系统资源的管理者" class="headerlink" title="1.3.2  OS是计算机系统资源的管理者"></a>1.3.2  OS是计算机系统资源的管理者</h4><ul>
<li><p><strong>处理机</strong>管理是用于分配和控制处理机</p>
</li>
<li><p><strong>存储器</strong>管理是负责内存的分配与回收</p>
</li>
<li><p><strong>I/O设备</strong>管理是负责I/O设备的分配（回收）与操纵</p>
</li>
<li><p><strong>文件</strong>管理是用于实现文件的存取、共享和保护</p>
</li>
</ul>
<h4 id="1-3-3-OS实现了对计算机资源的抽象"><a href="#1-3-3-OS实现了对计算机资源的抽象" class="headerlink" title="1.3.3 OS实现了对计算机资源的抽象"></a>1.3.3 OS实现了对计算机资源的抽象</h4><h2 id="2-操作系统的发展过程"><a href="#2-操作系统的发展过程" class="headerlink" title="2. 操作系统的发展过程"></a>2. 操作系统的发展过程</h2><h3 id="2-1-未配置操作系统的计算机系统（40年代-手工操作阶段）"><a href="#2-1-未配置操作系统的计算机系统（40年代-手工操作阶段）" class="headerlink" title="2.1 未配置操作系统的计算机系统（40年代 手工操作阶段）"></a>2.1 未配置操作系统的计算机系统（40年代 手工操作阶段）</h3><ul>
<li>工作方式：<ul>
<li>用户：用户既是程序员，又是操作员；用户是计算机专业人员</li>
<li>编程语言：为机器语言</li>
<li>输入输出：纸带或卡片</li>
</ul>
</li>
<li>计算机的工作特点：<ul>
<li>用户独占全机：不出现资源被其他用户占用，资源利用率低</li>
<li>CPU等待用户：计算前，手工装入纸带或卡片；计算完成后，手工卸取纸带或卡片；CPU利用率低</li>
</ul>
</li>
<li>缺点：<ul>
<li>手工装卸、人工判断、手工修改与调试内存指令等造成CPU空闲；</li>
<li>提前完成造成剩余预约时间内的CPU完全空闲；</li>
<li>I/O设备的慢速与CPU的速度不匹配造成的CPU空闲等待时间</li>
</ul>
</li>
</ul>
<p><strong>简言之，资源利用率低；CPU利用率低</strong></p>
<h3 id="2-2-单道批处理系统（50年代）"><a href="#2-2-单道批处理系统（50年代）" class="headerlink" title="2.2 单道批处理系统（50年代）"></a>2.2 单道批处理系统（50年代）</h3><blockquote>
<p>单道批处理系统是在<strong>解决人机矛盾和CPU与I/O设备速度不匹配矛盾</strong>的过程中形成的。批处理系统旨在<strong>提高系统资源的利用率和系统的吞吐量</strong>。（但单道批处理系统仍不能充分利用资源，故现在已很少用）</p>
</blockquote>
<h4 id="2-2-1-联机批处理"><a href="#2-2-1-联机批处理" class="headerlink" title="2.2.1 联机批处理"></a>2.2.1 联机批处理</h4><blockquote>
<p>I/O设备与主机直接连接，CPU直接控制作业输入输出</p>
</blockquote>
<ul>
<li><strong>优点：</strong>解决了作业的自动转接，减少了人工操作时间</li>
<li><strong>问题：</strong>作业输入和结果输出过程中，CPU处于等待状态</li>
<li><strong>解决：</strong>增加一台不与主机直接相连而专门与I/O设备交换信息的卫星机（<strong>脱机批处理</strong>）</li>
</ul>
<h4 id="2-2-2-脱机批处理"><a href="#2-2-2-脱机批处理" class="headerlink" title="2.2.2 脱机批处理"></a>2.2.2 脱机批处理</h4><blockquote>
<p>增加一台不与主机直接相连而专门与I/O设备交换信息的卫星机，由卫星机控制作业输入输出</p>
</blockquote>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200706000357598.png" alt="脱机批处理"></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200706000427605.png" alt="indicate" title="">
                </div>
                <div class="image-caption">indicate</div>
            </figure>



<ul>
<li><p>缺点：系统资源利用率低（<strong>因为内存中只存在一道程序，I/O请求成功前CPU都处于空闲状态</strong>）</p>
</li>
<li><p>特征：</p>
<ul>
<li><strong>自动性：</strong>正常情况下，一批作业能自动依次运行，无需人工干预</li>
<li><strong>顺序性：</strong>各道作业是顺序进入内存</li>
<li><strong>单道性：</strong>内存中任何时候只能有一道作业</li>
</ul>
</li>
</ul>
<h3 id="2-3-多道批处理系统（60年代初）"><a href="#2-3-多道批处理系统（60年代初）" class="headerlink" title="2.3 多道批处理系统（60年代初）"></a>2.3 多道批处理系统（60年代初）</h3><blockquote>
<p>单道运行每次只调一个用户作业程序进入内存并运行，CPU利用率低，为了进一步提高资源利用率和系统吞吐量，引入多道批处理</p>
</blockquote>
<p><strong>多道程序</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200706133354742.png" alt="多道批处理" title="">
                </div>
                <div class="image-caption">多道批处理</div>
            </figure> 

<ul>
<li><p>优点：</p>
<ul>
<li><strong>资源利用率高</strong>（资源指CPU、存储器、设备、数据）</li>
<li><strong>系统吞吐量大</strong>（系统吞吐量指系统在单位时间完成的总工作量（作业数量））</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li>平均周转时间长（作业的周转时间是指从作业进入系统开始，直至其完成并退出系统为止所经历的时间），<strong>短作业的周转时间显著增长</strong></li>
<li>无交互能力，<strong>整个作业完成后或中间出错时，才与用户交互，不利于调试和修改</strong></li>
</ul>
</li>
<li><p>特点：</p>
<ul>
<li><strong>多道：</strong>内存同时存在多个作业</li>
<li><strong>宏观上并行：</strong>同时有多道程序在内存运行，某一时间段上，各道程序不同程度地向前推进</li>
<li><strong>微观上串行：</strong>任一时刻最多只有一道作业占用CPU，多道程序交替使用CPU </li>
</ul>
</li>
</ul>
<p><strong>在当前运行的作业需作I/O处理时，CPU转而执行另一个作业</strong></p>
<p><strong>单道批处理系统与多道批处理系统的特点比较：</strong></p>
<table>
<thead>
<tr>
<th></th>
<th><strong>单道批处理系统</strong></th>
<th><strong>多道批处理系统</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>内存中驻留程序数目</strong></td>
<td><strong>一道</strong></td>
<td><strong>多道</strong></td>
</tr>
<tr>
<td><strong>占用CPU的情况</strong></td>
<td><strong>独占</strong></td>
<td><strong>交替占用</strong></td>
</tr>
<tr>
<td><strong>是否需要作业和进程调度</strong></td>
<td><strong>不需要</strong></td>
<td><strong>需要</strong></td>
</tr>
<tr>
<td><strong>程序完成次序与其进入内存次序间的关系</strong></td>
<td><strong>严格对应</strong></td>
<td><strong>不严格对应</strong></td>
</tr>
</tbody></table>
<ul>
<li><p>相关技术问题：</p>
<ul>
<li><strong>处理机管理问题：</strong>如何分配，使CPU满足要求</li>
<li><strong>内存管理问题：</strong>为每道程序分配内存空间</li>
<li><strong>I/O设备管理问题：</strong>如何分配<strong>I/O</strong>设备</li>
<li><strong>文件管理问题：</strong>如何组织程序和数据</li>
<li><strong>作业管理问题：</strong>如何组织作业</li>
</ul>
</li>
</ul>
<h3 id="2-4-分时系统（60年代中）"><a href="#2-4-分时系统（60年代中）" class="headerlink" title="2.4 分时系统（60年代中）"></a>2.4 分时系统（60年代中）</h3><blockquote>
<p>分时系统是指在一台主机上连接多个带有显示器和键盘的终端，同时允许多个用户通过自己的键盘，以交互的方式使用计算机，<strong>分时共享硬件和软件资源。</strong></p>
</blockquote>
<h4 id="2-4-1-分时的定义"><a href="#2-4-1-分时的定义" class="headerlink" title="2.4.1 分时的定义"></a>2.4.1 分时的定义</h4><p><strong>分时的定义：</strong> 把计算机的系统资源（尤其是<strong>CPU时间</strong>）进行时间上的分割，每个时间段称为一个<strong>时间片</strong>（time slice），每个用户依次轮流使用时间片。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200706150632805.png" alt="分时系统" title="">
                </div>
                <div class="image-caption">分时系统</div>
            </figure>

<ul>
<li><p>关键问题：</p>
<ul>
<li><strong>通常按时间片分配：</strong>各个程序在<strong>CPU</strong>上执行的轮换时间。把处理器的运行时间分成很短的时间片，按<strong>时间片</strong>轮流把处理机分配给各作业使用。</li>
<li><strong>多个用户分时：</strong>单个用户使用计算机的效率低，因而允许多个应用程序同时在内存中，分别服务于不同的用户</li>
<li><strong>前台和后台程序分时：</strong>后台程序不占用终端输入输出，不与用户交互——现在的图形用户界面（GUI），除当前交互的程序（输入焦点）之外，其他程序均作为后台</li>
</ul>
</li>
<li><p>特点：</p>
<ul>
<li><strong>人机交互性：</strong>用户可以通过终端与系统进行广泛的对话</li>
<li><strong>多路性：</strong>允许在一台主机上同时连接多台联机终端，系统按分时原则为每个用户服务</li>
<li><strong>用户独立性：</strong>对每个用户而言好像独占主机，每个用户各占一个终端，彼此独立工作</li>
<li><strong>及时性：</strong>用户的请求在很短的时间内能够获得响应</li>
</ul>
</li>
</ul>
<p><strong>现在的许多操作系统都具有分时处理的功能，在分时系统的基础上，操作系统的发展开始分化，如实时系统、通用系统、个人系统等。</strong></p>
<h3 id="2-5-实时操作系统"><a href="#2-5-实时操作系统" class="headerlink" title="2.5 实时操作系统"></a>2.5 实时操作系统</h3><blockquote>
<p> 实时系统（Real－Time System）是指系统能<strong>及时响应外部事件的请求</strong>，在规定的时间内完成对该事件的处理，并控制所有实时任务协调一致地运行。</p>
</blockquote>
<p><strong>实时操作系统有硬实时和软实时之分：</strong></p>
<ul>
<li><p>硬实时要求在规定的时间内必须完成操作，这是在操作系统设计时保证的**</p>
</li>
<li><p>软实时则只要按照任务的优先级，尽可能快地完成操作即可</p>
</li>
</ul>
<p><strong>实时系统与分时系统特征的比较：</strong></p>
<ul>
<li><p><strong>设计目标：</strong>分时系统为给多用户提供通用的交互型开发运行环境，实时系统为特殊用途提供专用系统</p>
</li>
<li><p><strong>交互性：</strong>分时系统交互性强，实时系统较弱</p>
</li>
<li><p><strong>响应时间：</strong>分时系统以用户能够接受的响应时间为准，实时系统与受控对象及应用场合有关</p>
</li>
</ul>
<h3 id="2-6-操作系统的进一步发展"><a href="#2-6-操作系统的进一步发展" class="headerlink" title="2.6 操作系统的进一步发展"></a>2.6 操作系统的进一步发展</h3><ul>
<li><p>通用操作系统</p>
<blockquote>
<p>如果一个操作系统兼有批处理、分时或实时处理的全部或两种功能，该操作系统为通用操作系统</p>
</blockquote>
</li>
<li><p>微内核操作系统</p>
<p>采用微内核结构：提供基本支持功能的<strong>内核很小</strong>，大部分功能由内核之外的服务程序完成——<strong>进程（线程）管理</strong>、<strong>低级存储管理</strong>、<strong>中断和陷入管理</strong>、<strong>进程通信</strong></p>
</li>
<li><p>网络操作系统</p>
<blockquote>
<p>能够控制计算机在网络中方便地传送信息和共享资源，并能为网络用户提供各种所需的服务</p>
</blockquote>
<ul>
<li>功能：<ul>
<li><strong>网络通信：</strong>在源计算机和目标计算机之间实现无差错的数据传送</li>
<li><strong>资源管理：</strong>对网络中的硬、软件资源实施管理</li>
<li><strong>网络管理：</strong>安全控制、性能监测、维护功能</li>
<li><strong>网络服务：</strong>如e-mail、文件传输、共享设备服务、远程作业录入等</li>
</ul>
</li>
</ul>
</li>
<li><p>分布式操作系统</p>
<blockquote>
<p><strong>集中式计算机系统：</strong>处理和控制能力都高度集中在一台计算机上，所有任务均由它完成。</p>
<p><strong>分布式计算机系统：</strong>由多台分散的计算机经互联网络连接而成的系统，各台计算机没有主从之分。任何工作都可以分布在几台计算机上，由它们并行工作、协同完成。</p>
</blockquote>
<p><strong>分布式计算机系统与单机集中式操作系统区别：</strong></p>
<ul>
<li><strong>进程通信：</strong>集中式简单，分布式涉及机构、规程和路径算法</li>
<li><strong>资源管理：</strong>集中式，一类资源由一个管理程序管理；分布式，一类资源由多个管理程序管理，这些程序必须协调一致工作</li>
<li><strong>系统结构：</strong>分布式，有若干相对独立的部分，分布在各台计算</li>
</ul>
</li>
<li><p>嵌入式操作系统</p>
<blockquote>
<p>运行在嵌入式（计算机）环境中、对整个系统及所有操作的各种部件、装置等资源进行统一协调、处理、指挥和控制的系统软件</p>
</blockquote>
<p>特点：</p>
<ul>
<li><strong>微型化：</strong>内存少（<strong>1M</strong>以内）、无外存、微处理器字长短（<strong>8b</strong>、<strong>16b</strong>）、运行速度有限、能提供的能源少、外设千变万化</li>
<li><strong>可定制：</strong>能运行在不同微处理器平台上，能针对硬件变化进行结构与功能上的配置</li>
<li><strong>实时性：</strong>硬实时、软实时、非实时</li>
<li><strong>开发环境：</strong>通常提供代码编辑器、编译器和链接器、程序调试器、系统配置器和系统仿真器</li>
</ul>
</li>
<li><p>智能化操作系统</p>
</li>
</ul>
<h2 id="3-操作系统的功能"><a href="#3-操作系统的功能" class="headerlink" title="3. 操作系统的功能"></a>3. 操作系统的功能</h2><h3 id="3-1-处理器管理"><a href="#3-1-处理器管理" class="headerlink" title="3.1 处理器管理"></a>3.1 处理器管理</h3><ul>
<li><p>完成<strong>处理机资源的分配、调度和回收</strong>等功能。处理机调度的单位可为<strong>进程</strong>或<strong>线程</strong>。</p>
</li>
<li><p>由于处理机调度策略不同，出现不同类型的操作系统，如批处理系统、分时系统、实时系统</p>
</li>
</ul>
<h3 id="3-2-存储管理"><a href="#3-2-存储管理" class="headerlink" title="3.2 存储管理"></a>3.2 存储管理</h3><blockquote>
<p><strong>管理目标：</strong>提高利用率、方便用户使用、提供足够的存储空间、方便进程并发运行。内存的分配、保护和扩充。</p>
</blockquote>
<ul>
<li><p><strong>存储器分配与回收</strong></p>
</li>
<li><p><strong>地址映射（变换）：</strong>逻辑地址到内存物理地址映射</p>
</li>
<li><p><strong>存储保护：</strong>保证进程间互不干扰、相互保密</p>
</li>
<li><p><strong>内存扩充（覆盖、交换和虚拟存储）：</strong>提高内存利用率、扩大进程的内存空间</p>
</li>
</ul>
<h3 id="3-3-设备管理"><a href="#3-3-设备管理" class="headerlink" title="3.3 设备管理"></a>3.3 设备管理</h3><blockquote>
<p><strong>管理目标：</strong>方便设备的使用、提高<strong>CPU</strong>与<strong>I/O</strong>设备利用率</p>
</blockquote>
<ul>
<li><p><strong>设备操作：</strong>利用设备驱动程序完成对设备的操作**</p>
</li>
<li><p><strong>设备独立性(device independence)：</strong>提供统一的<strong>I/O</strong>设备接口，使应用程序独立于物理设备，提高可适应性；在同样的接口和操作下完成不同的内容</p>
</li>
<li><p><strong>设备分配与回收：</strong>在多用户间共享<strong>I/O</strong>设备资源</p>
</li>
<li><p><strong>缓冲区管理：</strong>匹配<strong>CPU</strong>和外设的速度，提高两者的利用率。主机与外设并行</p>
</li>
</ul>
<h3 id="3-4-信息管理"><a href="#3-4-信息管理" class="headerlink" title="3.4 信息管理"></a>3.4 信息管理</h3><blockquote>
<p><strong>管理目标：</strong>解决软件资源的存储、共享、保密和保护</p>
</blockquote>
<ul>
<li><p><strong>文件存储空间管理：</strong>解决如何存放信息，以提高空间利用率和读写性能</p>
</li>
<li><p><strong>目录管理：</strong>解决信息检索问题。文件的属性（如文件名）、单一副本赋予多文件名</p>
</li>
<li><p><strong>文件的读写管理和存取控制：</strong>解决信息安全问题。系统设口令 “哪个用户”、用户分类 “哪个用户组”、文件权限 “针对用户或用户组的读写权”</p>
</li>
</ul>
<h3 id="3-5-用户接口"><a href="#3-5-用户接口" class="headerlink" title="3.5 用户接口"></a>3.5 用户接口</h3><blockquote>
<p><strong>管理目标：</strong>提供一个友好的用户访问操作系统的接口。操作系统向上提供两种接口</p>
</blockquote>
<ul>
<li><p><strong>系统命令：</strong>供用户用于组织和控制自己的作业运行。命令行、菜单式或<strong>GUI “联机”</strong> ；命令脚本 <strong>“脱机”</strong></p>
</li>
<li><p><strong>编程接口：</strong>供用户程序和系统程序调用操作系统功能。系统调用和高级语言库函数</p>
</li>
<li><p>通过这些命令和调用，向OS提出申请，由OS调用内部功能来完成</p>
</li>
</ul>
<h2 id="4-操作系统的特征"><a href="#4-操作系统的特征" class="headerlink" title="4. 操作系统的特征"></a>4. 操作系统的特征</h2><h3 id="4-1-并发（concurrency）"><a href="#4-1-并发（concurrency）" class="headerlink" title="4.1 并发（concurrency）"></a>4.1 并发（concurrency）</h3><blockquote>
<p><strong>并发性：</strong>并发是指在内存中放多道作业， 在一个时间段上来看，每一道作业都能不同程度地向前推进。但在任何一个时间点上只能有一道占用CPU。</p>
</blockquote>
<ul>
<li><strong>并发：</strong>又称<strong>伪并行</strong>，指多个事件在<strong>同一时间</strong>段内发生。操作系统是一个并发系统，各进程间的并发，系统与应用间的并发。操作系统要完成这些并发过程的管理。</li>
<li><strong>并行：</strong>是指在<strong>同一时刻</strong>发生，指当系统有<strong>一个以上CPU</strong>时，一个CPU执行一个进程，另一个CPU执行另一个进程，两者互不干涉，互不抢占资源，同时进行</li>
</ul>
<hr>
<ul>
<li><strong>串行：</strong>在内存中每次只能放一道作业，只有它完全执行完后别的作业才能进入内存执行。</li>
<li>*<em>并行： *</em>存在于有多个CPU的环境中， 在内存中放多道作业，在任一时间点上都可能有多道作业在不同的CPU上同时执行。 </li>
</ul>
<h3 id="4-2-共享（sharing）"><a href="#4-2-共享（sharing）" class="headerlink" title="4.2 共享（sharing）"></a>4.2 共享（sharing）</h3><blockquote>
<p>多个进程共享有限的计算机系统资源。操作系统要对系统资源进行合理分配和使用。<strong>资源在一个时间段内交替被多个进程所用</strong></p>
</blockquote>
<ul>
<li><p><strong>互斥共享</strong>（如音频设备、打印机）：资源分配后到释放前，不能被其他进程所用</p>
</li>
<li><p><strong>同时访问</strong>（如磁盘文件）：一个时间段内同时资源分配难以达到最优化</p>
</li>
</ul>
<hr>
<p><strong>并发和共享是OS的两个最基本的特性，二者互为条件！</strong></p>
<hr>
<h3 id="4-3-虚拟（virtual）"><a href="#4-3-虚拟（virtual）" class="headerlink" title="4.3 虚拟（virtual）"></a>4.3 虚拟（virtual）</h3><blockquote>
<p>一个物理实体映射为若干个对应的逻辑实体——采用<strong>时分复用（分时使用）</strong>或<strong>空分复用（分空间使用）</strong></p>
</blockquote>
<p><strong>虚拟是操作系统管理系统资源的重要手段，可提高资源利用率：</strong></p>
<ul>
<li><strong>CPU</strong>——每个用户（进程）的“虚处理机”。利用多道处理技术，多道程序并发执行，分时使用一台处理机。</li>
<li><strong>存储器</strong>——每个进程都占有的地址空间（指令＋数据＋堆栈）（空分复用存储器）“虚拟存储器”。虚拟存储技术——内存分时复用，一道程序通过时分复用内存，可以在远小于它的内存空间运行。</li>
<li><strong>显示设备</strong>——多窗口或虚拟终端（virtual terminal）</li>
<li><strong>独享设备</strong>—— 假脱机技术（Spooling），虚设备</li>
</ul>
<h3 id="4-4-异步性（asynchronism）"><a href="#4-4-异步性（asynchronism）" class="headerlink" title="4.4 异步性（asynchronism）"></a>4.4 异步性（asynchronism）</h3><blockquote>
<p>也称<strong>不确定性</strong>：指进程的执行顺序和执行时间的不确定性</p>
</blockquote>
<ul>
<li><p><strong>进程的运行速度不可预知：</strong>分时系统中，多个进程并发执行，“时走时停”，不可预知每个进程的运行推进快慢</p>
</li>
<li><p>难以重现系统在某个时刻的状态（包括重现运行中的错误）</p>
</li>
<li><p>无论快慢，应该结果相同——通过进程互斥和同步手段来保证</p>
</li>
<li><p>因为不确定性，在设计<strong>OS</strong>时，要充分考虑各种<strong>可能性</strong>，以便稳定、安全、高效地达到并发和资源共享</p>
</li>
</ul>
<h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200706170351956.png" alt="summary" title="">
                </div>
                <div class="image-caption">summary</div>
            </figure>



]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>第三章——进程管理</title>
    <url>/2020/07/06/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="第三章——进程管理"><a href="#第三章——进程管理" class="headerlink" title="第三章——进程管理"></a>第三章——进程管理</h1>]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>高等数学</title>
    <url>/2020/06/12/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/</url>
    <content><![CDATA[<h1 id="高等数学"><a href="#高等数学" class="headerlink" title="高等数学"></a>高等数学</h1><h2 id="1-函数极限与连续"><a href="#1-函数极限与连续" class="headerlink" title="1. 函数极限与连续"></a>1. 函数极限与连续</h2><ul>
<li>遇到三角函数求极限，并且趋于pi/2，pi这种的，大概率会使用<strong>诱导公式</strong>，使其简化：<ul>
<li>sin(π/2+α) = cosα；  cos(π/2+α) = -sinα；  sin(π/2-α) = cosα；  cos(π/2-α) =sinα；</li>
<li>sin(π+α) = -sinα；  cos(π+α) = -cosα；  sin(π-α) = sinα；  cos(π-α) = -cosα；</li>
<li>tan A= sin A/cos A；</li>
<li>tan（π/2＋α）＝－cotα；    tan（π/2－α）＝cotα；</li>
<li>tan（π－α）＝－tanα；       tan（π＋α）＝tanα；</li>
</ul>
</li>
<li>遇到<code>arctant-pi/2</code>在无穷处取极限时，一般多用<strong>洛必达</strong>。</li>
</ul>
<h2 id="4-一元函数微分学"><a href="#4-一元函数微分学" class="headerlink" title="4 . 一元函数微分学"></a>4 . 一元函数微分学</h2><ul>
<li><p>导数定义，以及证明：偶函数的导数是奇函数；奇函数的导数是偶函数；周期函数的导函数是周期函数。</p>
</li>
<li><p><strong>证明</strong>：(uv)’ = u’v + uv’  【凑】</p>
</li>
<li><p>分步积分法的由来：(uv)’ = u’v + uv’     -&gt;    d(uv) = vdu + udv</p>
</li>
<li><p><strong>ln|u(x)| = u’(x)/u(x)</strong>，视绝对值而不见</p>
</li>
<li><p>一阶微分形式不变，<strong>df(u) = f’(u)du</strong></p>
</li>
<li><p>单调必有反函数，反函数不一定单调</p>
</li>
<li><p>反函数求导：</p>
<ul>
<li><strong>一阶导数：</strong></li>
<li><strong>二阶导数：</strong></li>
</ul>
</li>
<li><p>参数方程求导：</p>
<ul>
<li><strong>一阶导数：</strong></li>
<li><strong>二阶导数：</strong></li>
</ul>
</li>
<li><p>常用函数的麦克劳林展开式：</p>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200704104842957.png" alt="麦克劳林展开"></p>
</li>
</ul>
<ul>
<li>基本求导公式：<ul>
<li>待完成</li>
</ul>
</li>
</ul>
<h2 id="5-一元函数微分学的几何应用"><a href="#5-一元函数微分学的几何应用" class="headerlink" title="5. 一元函数微分学的几何应用"></a>5. 一元函数微分学的几何应用</h2><ul>
<li>单调性与极值的判别<ul>
<li>判别极值的第一充分条件：</li>
<li>判别极值的第二充分条件：</li>
<li>判别极值的第三充分条件</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>概率论和数理统计</title>
    <url>/2020/06/14/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%92%8C%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="概率论和数理统计"><a href="#概率论和数理统计" class="headerlink" title="概率论和数理统计"></a>概率论和数理统计</h1><h2 id="3-多维随机变量及分布"><a href="#3-多维随机变量及分布" class="headerlink" title="3. 多维随机变量及分布"></a>3. 多维随机变量及分布</h2><ul>
<li>二维正太</li>
</ul>
<h2 id="4-随机变量的数字特征"><a href="#4-随机变量的数字特征" class="headerlink" title="4. 随机变量的数字特征"></a>4. 随机变量的数字特征</h2><ul>
<li><p>二维正太分布的<strong>不相关和独立对等</strong></p>
<ul>
<li>(X, Y)二维正太分布，则X，Y均正太；反过来不一定</li>
<li>(X, Y)二维正太分布，当 ad≠bc时，则（aX + bY）*（cX + dY）也服从二维正太分布</li>
<li>(X, Y)二维正太分布，当 a^2 + b^2 ≠ 0时，aX + bY必正太</li>
</ul>
</li>
<li><p>协方差公式：</p>
<ul>
<li><p>cov(X, Y) =E{ [X-EX] * [Y-EY] }   【定义式】</p>
</li>
<li><p>cov(X, Y) = E(XY) - EX*EY           【常用计算公式】</p>
</li>
<li><p>cov(X, Y) = cov(Y, X)</p>
</li>
<li><p>cov(X, X) = D(X)</p>
</li>
<li><p>cov(X1 + X2, Y) = cov(X1, Y) + cov(X2, Y)</p>
</li>
<li><p>cov(X1 + c, Y) = cov(X1, Y)     【c 为常数】</p>
</li>
<li><p>cov(aX + c, bY + d) = ab*cov(X, Y)       【a，b，c，d为常数】</p>
</li>
</ul>
</li>
<li><p>常用分布的期望和方差，<strong>一定要会推导，特别是涉及级数的，例如泊松分布</strong></p>
<ul>
<li>0-1分布：</li>
</ul>
</li>
<li><p><strong>奇函数在无穷域积分</strong>：当函数在[0, +∞)收敛，则积分为0；反之积分发散</p>
</li>
</ul>
<h2 id="5-大数定律和中心极限定理"><a href="#5-大数定律和中心极限定理" class="headerlink" title="5. 大数定律和中心极限定理"></a>5. 大数定律和中心极限定理</h2><ul>
<li>切比雪夫不等式</li>
<li>大数定律：<ul>
<li>切比雪夫大数定律：根据切比雪夫不等式证明切比雪夫大数定律</li>
<li>伯努利大数定律</li>
<li>辛钦大数定律</li>
</ul>
</li>
<li>中心极限定理：<ul>
<li>棣莫弗—拉普拉斯中心极限定理</li>
<li>列维—林德伯格中心极限定理</li>
</ul>
</li>
</ul>
<h2 id="6-数理统计"><a href="#6-数理统计" class="headerlink" title="6.  数理统计"></a>6.  数理统计</h2><ul>
<li><p><strong>伽马函数</strong></p>
</li>
<li><p>统计量是<strong>样本的函数，且函数不含未知参数</strong></p>
</li>
<li><p><strong>常用统计量的数字特征：</strong></p>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200630193815427.png" alt="常用统计量的数字特征"></p>
<ul>
<li>要记住样本方差除以的是 n-1</li>
</ul>
</li>
<li><p><strong>三大抽样分布：</strong></p>
<ul>
<li><p>卡方分布</p>
<ul>
<li>卡方分布是n个<strong>独立</strong>的标准正方分布随机变量的平方和</li>
<li>卡方分布的期望等于自由度n，方差等于两倍自由度2n</li>
<li>卡方分布具有可加性，即X服从自由度为m的卡方分布，Y服从自由度为n的卡方分布，<strong>X和Y独立</strong>，则X+Y服从m+n的卡方分布</li>
<li><strong>标准正太分布</strong>的平方，服从自由度为1的卡方分布，期望为1，方差为2</li>
</ul>
</li>
<li><p>t分布</p>
<ul>
<li><p>X服从标准正太分布，Y服从自由度为n的卡方分布，<strong>且X和Y独立</strong>，则下式服从自由度为n的t分布</p>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200630193834133.png" alt="t分布"></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>t分布的概率密度函数是一个偶函数，即以y轴对称</p>
</li>
<li><p>F分布</p>
<ul>
<li>设U服从自由度为n1的卡方分布，V服从自由度为n2的卡方分布，<strong>且U和V独立</strong>，则</li>
</ul>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200630193853911.png" alt="F分布"></p>
<p>​        服从自由度为(n1, n2)的F分布，记为 F ~ F(n1, n2)</p>
<ul>
<li>F服从F(n1, n2)分布，则1/F则服从F(n2, n1)<ul>
<li>若T服从自由度为n的t分布，则T^2服从F(1, n)分布</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>记住每个分布的形式，凑分布时可以直接写答案：卡方分布是平方和，t分布涉及根号，F分布涉及两个卡方分布</strong></p>
</li>
<li><p>分位点，是<strong>上侧</strong>还是<strong>下侧</strong></p>
</li>
<li><p><strong>单个正太总体的性质</strong></p>
<p>设X1、X2…、Xn是来自总体X~N(μ，σ^2)的样本，样本均值 /X，样本方差S^2</p>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200630183340266.png" alt="image-20200630183340266"></p>
<ul>
<li>3和4区别在于：3是不独立的，所以3服从n-1的卡方分布；而4是独立的，服从n的卡方分布</li>
<li>第5条可以由1，2，3证明</li>
<li>第6条可以由第3证明，【卡方分布的期望和方差】</li>
</ul>
</li>
<li><p>两个正太总体性质</p>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200630192238252.png" alt="两个正太总体性质"></p>
<ul>
<li>第1条就是用单个正太的样本方差性质 -&gt; 卡方分布</li>
<li>第2条就是卡方分布的可加性</li>
<li>第3条就是利用第2条，并将 /X - /Y标准变化；至于分子分母的独立性，运用单个正太的均值和方差独立</li>
</ul>
</li>
</ul>
<h2 id="7-参数估计"><a href="#7-参数估计" class="headerlink" title="7. 参数估计"></a>7. 参数估计</h2><ul>
<li><p>点估计</p>
<ul>
<li><p>矩估计（很简单的，主要就是求<strong>期望</strong>）</p>
<p><strong>步骤：</strong></p>
<ul>
<li>1  求期望EX</li>
<li>2  令样本均值/X等于期望</li>
<li>3  求出θ，估计量</li>
<li>4  带入/X，得到估计值</li>
</ul>
</li>
<li><p>最大似然估计法</p>
<p>离散型的似然函数为<strong>样本值概率</strong>的乘积；连续性的<strong>似然函数为概率密度函数的乘积</strong>，<strong>而x换成xi</strong></p>
<p><strong>步骤：</strong></p>
<ul>
<li>1  写出似然函数，关于似然函数，分为离散型和连续性，见上。</li>
<li>2  对似然函数取对数</li>
<li>3  对θ求导</li>
<li>4  令导数为0，求出θ；若无解，则说明似然函数单调，根据定义，要求似然函数最大，即在边界取值</li>
</ul>
</li>
<li><p>估计量和估计值的区别：</p>
<ul>
<li>估计量一般用样本表示；估计值用样本值（观察值）表示</li>
<li>一定要注意最后求得是估计量还是估计值</li>
</ul>
</li>
</ul>
</li>
<li><p>估计量的评选标准</p>
<ul>
<li><p>无偏性</p>
<p>估计量/θ的期望 = θ，例如样本均值/X是μ的无偏估计量</p>
</li>
<li><p>有效性</p>
<p>两个无偏估计量，方差较小的有效</p>
</li>
<li><p>相合（一致）性</p>
<p>估计量/θ依概率收敛到θ，一般需要使用<strong>大数定律和切比雪夫不等式</strong></p>
</li>
</ul>
</li>
</ul>
<h2 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h2>]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora+PicGo+Gitee实现markdown高效创作</title>
    <url>/2020/06/13/%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/Typora-PicGo-Gitee%E5%AE%9E%E7%8E%B0markdown%E9%AB%98%E6%95%88%E5%88%9B%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="Typora-PicGo-Gitee实现markdown高效创作"><a href="#Typora-PicGo-Gitee实现markdown高效创作" class="headerlink" title="Typora+PicGo+Gitee实现markdown高效创作"></a>Typora+PicGo+Gitee实现markdown高效创作</h1><h2 id="Why-Typora"><a href="#Why-Typora" class="headerlink" title="Why Typora"></a>Why Typora</h2><p>Typora是一款极简而功能强大的markdown写作应用，目前仍然免费，强烈推荐。</p>
<h2 id="Why-PicGo"><a href="#Why-PicGo" class="headerlink" title="Why PicGo"></a>Why PicGo</h2><p>对于markdown创作，图片插入是不可或缺的一部分。但是，想要文章被更多人看到，图片就要上传到图床。作者以前经常使用有道云作为图床，除了使用上不方便，有时候还会遇到图片不可访问的情况，略显麻烦低效。</p>
<p><strong>PicGo</strong>这个工具很好地解决了这个问题，只需拖动图片，就可以完成图床上传，并且把想要的链接格式复制到剪贴板。</p>
<h2 id="Why-Gitee"><a href="#Why-Gitee" class="headerlink" title="Why Gitee"></a>Why Gitee</h2><p>Gitee可以说是国内的Github，没有Github那么全能，但是比Github快很多。做一个图床，Gitee应该是更好的选择。</p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul>
<li><p><a href="https://www.typora.io/" target="_blank" rel="noopener">Typora下载</a></p>
</li>
<li><p><a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">PicGo下载</a></p>
</li>
</ul>
<p>选择适应自己的版本，安装过程一路next即可。</p>
<h2 id="PicGo安装插件"><a href="#PicGo安装插件" class="headerlink" title="PicGo安装插件"></a>PicGo安装插件</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200613172244585.png" alt="插件设置" title="">
                </div>
                <div class="image-caption">插件设置</div>
            </figure>



<p>搜索“gitee”，写这篇文章的时候有这两个插件，我选了右边的gitee-uploader，应该都是可以的，本文以gitee-uploader为例。点击“安装”。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/hzyangjc/tuchuang/raw/master/img/222.PNG" alt="安装插件" title="">
                </div>
                <div class="image-caption">安装插件</div>
            </figure>



<h2 id="配置Gitee"><a href="#配置Gitee" class="headerlink" title="配置Gitee"></a>配置Gitee</h2><h3 id="1-新建仓库"><a href="#1-新建仓库" class="headerlink" title="1. 新建仓库"></a>1. 新建仓库</h3><ul>
<li><p>访问 gitee.com，注册或登录。点击右上角的“＋”，点击“新建仓库”。</p>
</li>
<li><p>名称、路径自定，介绍随意。</p>
</li>
<li><p><strong>一定要选择公开！</strong></p>
</li>
<li><p>勾选“用Readme文件初始化这个仓库”，用于创建master分支。</p>
</li>
<li><p>点击创建。</p>
</li>
</ul>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/333.PNG" alt="新建仓库"></p>
<h3 id="2-创建私人令牌"><a href="#2-创建私人令牌" class="headerlink" title="2. 创建私人令牌"></a>2. 创建私人令牌</h3><ul>
<li>点击右上角的头像，点击“设置”</li>
<li>安全设置 -&gt; 私人令牌 -&gt; 生成新令牌</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200613173113929.png" alt="生成新令牌" title="">
                </div>
                <div class="image-caption">生成新令牌</div>
            </figure>

<ul>
<li>随便填一段描述</li>
<li><strong>取消全选，只勾选“projects”</strong></li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/444.PNG" alt="生成新令牌" title="">
                </div>
                <div class="image-caption">生成新令牌</div>
            </figure>

<ul>
<li><p>点击“提交”</p>
</li>
<li><p>然后会让你输入一段密码，之后会生成一段字符串。<strong>一定要点击“复制”，不要丢失了，它只会出现一次</strong></p>
</li>
<li><p>至此，gitee的配置完成</p>
</li>
</ul>
<h2 id="配置PicGO"><a href="#配置PicGO" class="headerlink" title="配置PicGO"></a>配置PicGO</h2><ul>
<li><p>下载插件之后，重启应用。</p>
</li>
<li><p>打开“图床设置”的“gitee”（如图）</p>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200613173458198.png" alt="gitee设置"></p>
</li>
<li><p><strong>先把复制的字符串令牌粘贴到“token”一栏</strong></p>
</li>
<li><p>repo：填写你的仓库对于gitee.com的相对路径。一般是：YourName/YourRepo</p>
</li>
<li><p>branch：master</p>
</li>
<li><p>path：img</p>
</li>
<li><p>后面两个不必填写</p>
</li>
<li><p>点击“确定”并设置为默认图床。</p>
</li>
<li><p><strong>至此，PicGo已经配置完成，拖动一张图片到PicGo的上传区后，待上传完成，会将图片链接复制到剪切板，只要Ctrl+V粘贴即可。</strong></p>
</li>
</ul>
<h2 id="关联Typora"><a href="#关联Typora" class="headerlink" title="关联Typora"></a>关联Typora</h2><p>每次这么做还是有些麻烦，我们可以将Typora进行关联，得到复制图片到Typora即可完成上传并得到链接。</p>
<ul>
<li>打开typora</li>
<li>文件→偏好设置→图像→插入图片时</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200613174233428.png" alt="插入图片" title="">
                </div>
                <div class="image-caption">插入图片</div>
            </figure>

<ul>
<li><p>上传服务就选择PicGo（app）</p>
</li>
<li><p>路径填写你的picgo.exe所在的路径</p>
</li>
<li><p>通过“验证图片上传选项”按钮，可以检验配置是否成功</p>
</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200613174603920.png" alt="上传服务" title="">
                </div>
                <div class="image-caption">上传服务</div>
            </figure>

<ul>
<li>关联Typora至此配置成功</li>
</ul>
<blockquote>
<p>测试之后假如没有问题，那就说明大功告成了。妈妈再也不担心我markdown创作时没有图床了，请开始你的创作之旅吧~</p>
</blockquote>
]]></content>
      <categories>
        <category>工具教程</category>
      </categories>
      <tags>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>看懂PID控制器</title>
    <url>/2020/06/16/%E6%8E%A7%E5%88%B6%E7%A7%91%E5%AD%A6/%E7%9C%8B%E6%87%82PID%E6%8E%A7%E5%88%B6%E5%99%A8/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="PID控制器"><a href="#PID控制器" class="headerlink" title="PID控制器"></a>PID控制器</h1><h2 id="1-控制器"><a href="#1-控制器" class="headerlink" title="1. 控制器"></a>1. 控制器</h2><p>在研究PID控制器前，必须先想一个问题，控制器的作用到底是什么？相信不少同学在学习自动控制原理的时候，接触最多的是：直接对传递函数进行分析，比如研究某个传函的阶跃响应？幅频特性？稳态误差？根据劳斯判据，根轨迹研究根的分布以判断系统的稳定型？</p>
<p>那么控制器又是哪里冒出来的？自控中的开环系统或者闭环系统不能解决问题么？其实这是我们认识狭隘了，这句话本身就是不对的，往下看。</p>
<p>举两个实例：</p>
<h3 id="1-1-电机速度控制系统"><a href="#1-1-电机速度控制系统" class="headerlink" title="1.1 电机速度控制系统"></a>1.1 电机速度控制系统</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221429670.png" alt="电机速度" title="">
                </div>
                <div class="image-caption">电机速度</div>
            </figure>

<ol>
<li>当出现扰动而使得电机的转速偏离设定值时，测速电动机充当检测变送环节的角色，而它的输出和设定值之间就会出现一个偏差信号（电压信号）</li>
<li>这个偏差信号通常是比较小的，所以需要放大器对其进行放大</li>
<li>而这个放大后的电压信号则是触发器的控制电压，控制晶闸管的关断时间，进而调节电动机的电枢电压，从而调节转速直到等于设定值</li>
</ol>
<p>在这个控制系统中，电动机显然是被控对象，而它的转速变化规律是可以抽象为一个数学模型的，也就是传递函数；而其他的环节，则是为了共同产生一个控制信号来作为电动机的输入。</p>
<p>我们可以把比较器称为本文中的<strong>调节器</strong>，或者将比较器+放大器称为<strong>调节器</strong>，这不是重点，无伤大雅。</p>
<p>值得注意的是：这个系统中的所有环节，其控制规律都可以抽象为若干个传递函数</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221459922.png" alt="电机调速" title="">
                </div>
                <div class="image-caption">电机调速</div>
            </figure>
<ul>
<li>Un*为设定值，Un为测量变送的反馈值</li>
<li>两者偏差去调节触发器控制电压Uct，控制规律为<code>Kp</code></li>
<li>通过晶闸管控制电动机回路总电压Ud0，控制规律为<code>Ks</code></li>
<li>Ud0 - 电枢总电阻电压即为电动机电动势E</li>
<li>E = Ceφn，得到输出转速；测速发电机根据转速反馈电压信号，控制规律<code>α</code></li>
</ul>
<h3 id="1-2-温度或水位控制系统"><a href="#1-2-温度或水位控制系统" class="headerlink" title="1.2 温度或水位控制系统"></a>1.2 温度或水位控制系统</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221521103.png" alt="水位控制" title="">
                </div>
                <div class="image-caption">水位控制</div>
            </figure>

<p>这个应该是比较简单的过程控制，实际水位低于设定水位时，控制器则作用于执行机构去增大调节阀开度，增加进水流量。</p>
<h3 id="1-3-小小总结"><a href="#1-3-小小总结" class="headerlink" title="1.3 小小总结"></a>1.3 小小总结</h3><blockquote>
<p>不要总是孤立控制器，它们是控制被控对象的必要环节。</p>
</blockquote>
<p>这里给出一般的闭环控制系统框图</p>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221545700.png" alt="闭环控制框图"></p>
<blockquote>
<p>不要单纯的认为只有被控对象才有传递函数，每一个环节都有其相应的控制规律，都可以抽象为一个数学模型，用对应的传递函数来表达。就像最小拍控制器设计中，我们根据输入信号选择整个系统的闭环传函，进而确定控制器的脉冲传递函数。</p>
</blockquote>
<p><strong>总结：对于闭环系统来说，控制器的输入是偏差信号，输出则是控制信号，去控制执行机构，进而调节被控对象</strong>。</p>
<p><strong>而闭环控制系统，设计目的就是系统输出对输入的跟随能力</strong>。</p>
<h2 id="2-PID"><a href="#2-PID" class="headerlink" title="2. PID"></a>2. PID</h2><ul>
<li>P：比例控制器，对系统产生的偏差能够迅速做出反应；但是比例控制器不能消除余差，不过随着比例系数的增大，余差会减小，同时系统输出振荡次数增加，稳定性也会下降，调节时间加长</li>
</ul>
<blockquote>
<p>关于不能消除余差这一点，从数学角度是可以解释的，求一下余差即可。当然直想也是可以理解的：对于一个速度控制系统，某时刻负载减小，导致转速上升，比例控制器作用于执行机构使得转速下降，假如转速可以下降到设定转速，那么此时负载依然是小于额定负载的，转速依然会上升；所以反证得，最后余差是肯定会存在的。</p>
</blockquote>
<ul>
<li>I：积分控制器，积分控制是可以消除余差的，体现于偏差消失后，积分控制器的输出是可以<strong>保持</strong>前时刻的输出；但是积分控制器的控制动作比较缓慢，一般不单独使用；随着积分系数的增大（时间常数的减小），系统的稳定性下降。</li>
</ul>
<ul>
<li>D：微分控制器，够体现出当前误差的变化趋势，在偏差出现或变化的瞬间，立即产生强烈的调节作用，从而加快系统的动作速度，减少调节时间；但是由于微分对静态偏差毫无控制能力（偏差存在，但是不变化，控制器输出为0），所以一般不单独使用。并且在纯比例作用的基础上增加微分作用可以提高系统稳定性。</li>
</ul>
<p><strong>总结：讲比例，积分，微分三种控制规律结合在一起，只要三项控制作用的强度配合得当，就既能快速调节，又能消除余差，从而得到满意的控制效果。</strong></p>
<h2 id="3-模拟式PID"><a href="#3-模拟式PID" class="headerlink" title="3. 模拟式PID"></a>3. 模拟式PID</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221607032.png" alt="一般pid框图" title="">
                </div>
                <div class="image-caption">一般pid框图</div>
            </figure>

<p>模拟pid控制器的算法：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221621725.png" alt="模拟pid算法" title="">
                </div>
                <div class="image-caption">模拟pid算法</div>
            </figure>

<ul>
<li>u(t) 为控制器输出，e(t) 为控制器输入，即偏差信号：<code>e(t) = r(t) - y(t)</code></li>
<li>Kp 为比例系数，Ti 为积分时间常数，Td 为微分时间常数</li>
</ul>
<p>给出一个简单的matlab模拟pid仿真：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221633752.png" alt="模拟pid仿真" title="">
                </div>
                <div class="image-caption">模拟pid仿真</div>
            </figure>

<p>参数设置：<code>Kp = 0.5, Ki = 0.2, Kd = 1</code>；输出结果：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221650331.png" alt="模拟pid仿真结果" title="">
                </div>
                <div class="image-caption">模拟pid仿真结果</div>
            </figure>

<p><strong>模拟pid局限性</strong></p>
<ul>
<li>功能单一，灵活性差</li>
<li>信息分散，所用仪表多，且监视不方便</li>
<li>接线过多，系统维护难度大</li>
</ul>
<p>随着计算机等技术的发展，数字控制器日益成为工业生产中占据主导地位的控制器。</p>
<h2 id="4-数字式PID"><a href="#4-数字式PID" class="headerlink" title="4. 数字式PID"></a>4. 数字式PID</h2><p>对模拟pid控制器进行离散化处理，用<strong>后向差分</strong>代替微分得：（具体细节不细说）</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221709929.png" alt="离散化pid算法" title="">
                </div>
                <div class="image-caption">离散化pid算法</div>
            </figure>


<h3 id="4-1-位置式PID算法"><a href="#4-1-位置式PID算法" class="headerlink" title="4.1 位置式PID算法"></a>4.1 位置式PID算法</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221726139.png" alt="位置式pid" title="">
                </div>
                <div class="image-caption">位置式pid</div>
            </figure>

<ul>
<li>Kp，Ki，Kd为比例，积分，微分的三个重要参数</li>
<li>k是采样序列号，k=0,1,2,3…</li>
<li>Uk第k次采样时刻<strong>控制器</strong>输出值</li>
<li>ek第k次采样时刻偏差，e(k-1)第k-1次采样偏差值，e(k-2)第k-2次采样偏差值</li>
<li>位置式pid控制器的输入为系统的偏差值，输出为uk，即偏差的组合</li>
</ul>
<h4 id="4-1-2-位置式pid算法的缺点"><a href="#4-1-2-位置式pid算法的缺点" class="headerlink" title="4.1.2 位置式pid算法的缺点"></a>4.1.2 位置式pid算法的缺点</h4><ul>
<li>控制器输出与过去的各个状态有关，运算量大</li>
<li>计算机出现故障，u(k)的大幅度变化会引起执行机构位置的大幅度变化</li>
</ul>
<h3 id="4-2-增量式PID算法"><a href="#4-2-增量式PID算法" class="headerlink" title="4.2 增量式PID算法"></a>4.2 增量式PID算法</h3><p>由位置式pid第k次输出 - 第k-1次输出 得到增量式pid算法：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9nc3MwLmJhaWR1LmNvbS85NG8zZFNhZ194STRraEdrbzlXVEFuRjZoaHkvemhpZGFvL3doJTNENjAwJTJDODAwL3NpZ249NjAyYzFhOTdjOWZkZmMwM2U1MmRlYmJlZTQwZmFiYWMvZTRkZGU3MTE5MGVmNzZjNjBmM2YxNzQyOTcxNmZkZmFhZTUxNjdlZS5qcGc" alt="增量式pid算法" title="">
                </div>
                <div class="image-caption">增量式pid算法</div>
            </figure>

<blockquote>
<p>增量式pid算法表示的是控制机构（阀门，步进电机等）的调节增量，即k时刻相对于k-1时刻的调节增量。</p>
</blockquote>
<p><strong>值得注意的是：采用增量式pid算法的控制器输出值为调节增量</strong>。</p>
<p>从这里也可以得出<strong>位置式pid算法</strong>的另一种表示形式：<br><code>u(k) = u(k - 1) + Δu</code></p>
<p>可以说，位置式pid算法和增量式pid算法是pid算法的两种表现形式，从本质上讲二者是一致的。</p>
<h4 id="4-2-2-增量式pid的优点"><a href="#4-2-2-增量式pid的优点" class="headerlink" title="4.2.2 增量式pid的优点"></a>4.2.2 增量式pid的优点</h4><ul>
<li>算式中不需要累加；控制增量Δu(k)的确定仅与最近3次的采样值有关</li>
<li>计算机每次只输出控制增量，对应执行机构位置的变化量，不易引起过程的异常操作</li>
<li>手动—自动切换时冲击小。当控制从手动向自动切换时，<br>可以作到无扰动切换</li>
</ul>
<h3 id="4-3-位置式pid和增量式pid的抉择"><a href="#4-3-位置式pid和增量式pid的抉择" class="headerlink" title="4.3 位置式pid和增量式pid的抉择"></a>4.3 位置式pid和增量式pid的抉择</h3><p>在实际使用中应该使用位置式还是增量式，关键看执行机构的特性：</p>
<ul>
<li>如果执行机构具有积分特性（如步进电机，具有齿轮传递特性的位置执行机构等），应该使用增量式pid算法</li>
<li>如果执行机构没有积分特性，则应该使用位置式pid算法</li>
</ul>
<h3 id="4-4-位置式pid和增量式pid仿真"><a href="#4-4-位置式pid和增量式pid仿真" class="headerlink" title="4.4 位置式pid和增量式pid仿真"></a>4.4 位置式pid和增量式pid仿真</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function [] &#x3D; my_simulink_pid()</span><br><span class="line">% 离散模型</span><br><span class="line">ts &#x3D; 0.001;						    % 采样时间</span><br><span class="line">sys &#x3D; tf(400, [1, 50, 0]);		    % 传递函数</span><br><span class="line">d_sys &#x3D; c2d(sys, ts, &#39;z&#39;);		    % 传递函数离散化</span><br><span class="line">[num, den] &#x3D; tfdata(d_sys, &#39;v&#39;);	% 提取分子分母</span><br><span class="line"></span><br><span class="line">% pid参数</span><br><span class="line">kp &#x3D; 10; ki &#x3D; 2; kd &#x3D; 15;</span><br><span class="line"></span><br><span class="line">% 初始化信号值</span><br><span class="line">y_feed &#x3D; 0;	    % 当前反馈值</span><br><span class="line">y_prev1 &#x3D; 0;    % 前一次输出值</span><br><span class="line">y_prev2 &#x3D; 0;    % 前前一次输出值</span><br><span class="line"></span><br><span class="line">u_prev1 &#x3D; 0;    % 前一次控制器输出值</span><br><span class="line">u_prev2 &#x3D; 0;    % 前前一次控制器输出值</span><br><span class="line"></span><br><span class="line">e_prev1 &#x3D; 0;    % 前一次偏差</span><br><span class="line">e_prev2 &#x3D; 0;    % 前前一次偏差</span><br><span class="line"></span><br><span class="line">x &#x3D; [0, 0, 0];  % p i d 分别的输出</span><br><span class="line"></span><br><span class="line">for k &#x3D; 1:1:3000</span><br><span class="line">	time(k) &#x3D; k*ts;         % 时间序列，用于画图</span><br><span class="line">	r_in(k) &#x3D; 1;            % 输入序列，单位阶跃</span><br><span class="line">	e(k) &#x3D; r_in(k) - y_feed;    % 当前时刻偏差</span><br><span class="line"></span><br><span class="line">	delta_u &#x3D; kp*x(1) + ki*x(2) + kd*x(3);</span><br><span class="line">	% 位置式 PID算法</span><br><span class="line">	% u(k) &#x3D; u_prev1 + delta_u;</span><br><span class="line">	% 增量式 PID算法</span><br><span class="line">	u(k) &#x3D; delta_u;</span><br><span class="line"></span><br><span class="line">	% 对输出限幅</span><br><span class="line">	if u(k) &gt;&#x3D; 10</span><br><span class="line">		u(k) &#x3D; 10</span><br><span class="line">	end</span><br><span class="line"></span><br><span class="line">	if u(k) &lt;&#x3D; -10</span><br><span class="line">		u(k) &#x3D; -10</span><br><span class="line">	end</span><br><span class="line">	</span><br><span class="line">	y_out(k) &#x3D; -den(2)*y_prev1- den(3)*y_prev2 + num(2)*u_prev1 + num(3)*u_prev2;  % 系统输出序列</span><br><span class="line">	y_feed &#x3D; y_out(k);	    % 反馈值</span><br><span class="line"></span><br><span class="line">	u_prev2 &#x3D; u_prev1;      % 更新控制器输出</span><br><span class="line">	u_prev1 &#x3D; u(k);</span><br><span class="line">	y_prev2 &#x3D; y_prev1;      % 更新系统输出</span><br><span class="line">	y_prev1 &#x3D; y_out(k);</span><br><span class="line"></span><br><span class="line">	x(1) &#x3D; e(k) - e_prev1;</span><br><span class="line">	x(2) &#x3D; e(k);</span><br><span class="line">	x(3) &#x3D; e(k) - 2*e_prev1 + e_prev2;</span><br><span class="line">	e_prev2 &#x3D; e_prev1;      % 更新偏差</span><br><span class="line">	e_prev1 &#x3D; e(k);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">% 画图</span><br><span class="line">figure(1);</span><br><span class="line">plot(time, r_in, &#39;b&#39;, time, y_out, &#39;r&#39;); </span><br><span class="line">axis([0, 3, 0, 1.5]);                           % 确定坐标轴范围</span><br><span class="line">xlabel(&#39;time(s)&#39;),ylabel(&#39;r_in, y_out&#39;);   		% 系统输出和系统输入的曲线</span><br><span class="line"></span><br><span class="line">figure(2);</span><br><span class="line">plot(time, r_in, &#39;b&#39;, time, u, &#39;--k&#39;); </span><br><span class="line">axis([0, 3, -0.2, 2.5]);                        % 确定坐标轴范围</span><br><span class="line">xlabel(&#39;time(s)&#39;),ylabel(&#39;r_in, u_out&#39;);   		% 控制器输出和系统输入的曲线</span><br></pre></td></tr></table></figure>

<p><strong>仿真结果：</strong></p>
<p>增量式pid——系统食输出和系统输入曲线图</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221745687.png" alt="r&y" title="">
                </div>
                <div class="image-caption">r&y</div>
            </figure>

<p>增量式pid——控制器输出和系统输入曲线图</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221803911.png" alt="r&u" title="">
                </div>
                <div class="image-caption">r&u</div>
            </figure>


<blockquote>
<p>关于位置式pid算法，在代码中也有标注，只需要加前一时刻控制器输出即可，至于参数的整定，在这里不详细说明。</p>
</blockquote>
]]></content>
      <categories>
        <category>控制学科</category>
      </categories>
      <tags>
        <tag>控制学科</tag>
      </tags>
  </entry>
  <entry>
    <title>next主题首页只显示摘要</title>
    <url>/2020/07/02/hexo/next%E4%B8%BB%E9%A2%98%E9%A6%96%E9%A1%B5%E5%8F%AA%E6%98%BE%E7%A4%BA%E6%91%98%E8%A6%81/</url>
    <content><![CDATA[<h1 id="next主题首页只显示摘要"><a href="#next主题首页只显示摘要" class="headerlink" title="next主题首页只显示摘要"></a>next主题首页只显示摘要</h1><blockquote>
<p>参考文章：</p>
<p><a href="https://blog.csdn.net/yueyue200830/article/details/104470646" target="_blank" rel="noopener">设置hexo首页只显示部分摘要（不显示全文）</a></p>
<p>本文针对Next<strong>新版</strong>主题，Next默认是会显示全文的，这样显然很不方便，因此需要一些方法去只显示前面一部分。</p>
</blockquote>
<h2 id="1-修改配置"><a href="#1-修改配置" class="headerlink" title="1. 修改配置"></a>1. 修改配置</h2><p>首先需要在Next主题的_config.yml中把设置打开：(默认安装时就打开了)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Automatically excerpt description <span class="keyword">in</span> homepage as preamble text.</span></span><br><span class="line">excerpt_description: true</span><br></pre></td></tr></table></figure>



<h2 id="2-方法一"><a href="#2-方法一" class="headerlink" title="2. 方法一"></a>2. 方法一</h2><p>在文章的<code>front-matter</code>中添加<code>description</code>，其中description中的内容就会被显示在首页上，其余一律不显示。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 让首页显示部分内容</span><br><span class="line">date: 2020-02-23 22:55:10</span><br><span class="line">description: 这是显示在首页的概述，正文内容均会被隐藏。</span><br><span class="line">---</span><br></pre></td></tr></table></figure>



<h2 id="3-方法二"><a href="#3-方法二" class="headerlink" title="3. 方法二"></a>3. 方法二</h2><p>在需要截断的地方加入：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--more--&gt;</span></span><br></pre></td></tr></table></figure>

<p>首页就会显示这条以上的所有内容，隐藏接下来的所有内容。</p>
<p><strong>两种方式各有利弊，大家可以按需要选择</strong></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
