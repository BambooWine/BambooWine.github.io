<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LRU和LFU算法</title>
    <url>/2020/06/08/LRU%E5%92%8CLFU%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="LRU和LFU算法解析"><a href="#LRU和LFU算法解析" class="headerlink" title="LRU和LFU算法解析"></a>LRU和LFU算法解析</h1><h2 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h2><h3 id="LRU概念"><a href="#LRU概念" class="headerlink" title="LRU概念"></a>LRU概念</h3><p>LRU（The Least Recently Used，最近最少未使用）是一种常见内存管理算法，最早应用于Linux操作系统，在Redis中也有广泛使用的。</p>
<p>LRU算法有这样一种假设：<strong>如果某个数据长期不被使用，在未来被用到的几率也不大；因此缓存容量达到上限时，应在写入新数据之前删除最久未使用的数据值</strong>，从而为新数据腾出空间。</p>
<h3 id="LRU算法实现"><a href="#LRU算法实现" class="headerlink" title="LRU算法实现"></a>LRU算法实现</h3><h4 id="LRU算法描述"><a href="#LRU算法描述" class="headerlink" title="LRU算法描述"></a>LRU算法描述</h4><p>需要设计一种数据结构，并且提供以下接口：</p>
<ul>
<li>构造函数，确定初始容量大小</li>
<li><code>get(key)</code>：如果关键字key存于缓存中，则获取其对应的值；否则返回-1</li>
<li><code>put(key, val)</code>：<ul>
<li>如果关键字key已经存在，则更改其对应的值为<code>val</code>；</li>
<li>如果关键字不存在，则插入（key,val）</li>
<li>当缓存容量达到上限时，最久没有访问的数据应该被置换。</li>
</ul>
</li>
</ul>
<h4 id="LRU算法图示"><a href="#LRU算法图示" class="headerlink" title="LRU算法图示"></a>LRU算法图示</h4><p>我们可以使用<strong>双向链表</strong>+<strong>哈希表</strong>来模拟实现LRU算法：</p>
<ul>
<li>哈希表用来快速查找某个key是否存于缓存中</li>
<li>链表用来表示使用数据项的时间先后次序</li>
</ul>
<p><strong>LRU存储图示</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/LRU_Store.png" alt="LRU_Store" title="">
                </div>
                <div class="image-caption">LRU_Store</div>
            </figure>


<p>当LRU的容量未到达上限时，对某个数据进行访问（包括添加，读取，修改），则只需要在链表头部插入新节点即可。</p>
<p>当LRU的容量到达上限时，需要添加某个数据，则需要移除链表最末端的键值（最久未使用），然后头插新节点。</p>
<p><strong>容量未满，插入新值003</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/LRU_Insert1.png" alt="容量未满，插入新值" title="">
                </div>
                <div class="image-caption">容量未满，插入新值</div>
            </figure>



<p><strong>容量上限，插入新值004</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/LRU_Insert2.png" alt="容量上限，插入新值" title="">
                </div>
                <div class="image-caption">容量上限，插入新值</div>
            </figure>



<p><strong>访问数据003</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/LRU_Visit.png" alt="访问数据003" title="">
                </div>
                <div class="image-caption">访问数据003</div>
            </figure>



<h4 id="LRU-C-代码"><a href="#LRU-C-代码" class="headerlink" title="LRU C++代码"></a>LRU C++代码</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 键值节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> key;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        Node(<span class="keyword">int</span> k, <span class="keyword">int</span> v):key(k), val(v)&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">using</span> node_iter = <span class="built_in">list</span>&lt;Node&gt;::iterator;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    LRUCache(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;cap = capacity;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> it = mp.find(key);</span><br><span class="line">        <span class="keyword">if</span>(it == mp.end()) <span class="keyword">return</span> <span class="number">-1</span>;       <span class="comment">// 节点不存在</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> val = it-&gt;second-&gt;val;</span><br><span class="line">            l.erase(it-&gt;second);            <span class="comment">// list通过迭代器删除节点</span></span><br><span class="line">            l.push_front(Node(key, val));   <span class="comment">// 头插最近访问节点</span></span><br><span class="line">            mp[key] = l.begin();            <span class="comment">// 更新哈希表中 key对应的 list迭代器</span></span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> it = mp.find(key);</span><br><span class="line">        <span class="keyword">if</span>(it == mp.end())&#123;</span><br><span class="line">            <span class="keyword">if</span>(cap == mp.size())&#123;</span><br><span class="line">                <span class="comment">// 容量达到上限且需要添加, 移除最久未使用的</span></span><br><span class="line">                mp.erase(l.back().key); l.pop_back(); </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 容量达到上限，则可以直接添加</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// key存于缓存，需要修改</span></span><br><span class="line">            l.erase(it-&gt;second);</span><br><span class="line">        &#125;</span><br><span class="line">        l.push_front(Node(key, value));     <span class="comment">// 头插最近访问节点</span></span><br><span class="line">        mp[key] = l.begin();                <span class="comment">// 更新哈希表中 key对应的 list迭代器</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, node_iter&gt; mp;       <span class="comment">// 哈希表</span></span><br><span class="line">    <span class="built_in">list</span>&lt;Node&gt; l;                           <span class="comment">// 双向链表</span></span><br><span class="line">    <span class="keyword">int</span> cap;                                <span class="comment">// 缓存容量上限</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> capacity = <span class="number">3</span>;</span><br><span class="line">    <span class="function">LRUCache <span class="title">cache</span><span class="params">(capacity)</span></span>;</span><br><span class="line"></span><br><span class="line">    cache.put(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    cache.put(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">1</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;		<span class="comment">// 返回 1</span></span><br><span class="line">    cache.put(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">2</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;		<span class="comment">// 返回 2 </span></span><br><span class="line">    cache.put(<span class="number">4</span>, <span class="number">4</span>);                     		<span class="comment">// 该操作会使得关键字 1 作废</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">1</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;		<span class="comment">// 返回 -1 (未找到)</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">3</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;		<span class="comment">// 返回 3</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">4</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;		<span class="comment">// 返回  4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    out:</span></span><br><span class="line"><span class="comment">    1 2 -1 3 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<h2 id="LFU"><a href="#LFU" class="headerlink" title="LFU"></a>LFU</h2><h3 id="LFU概念"><a href="#LFU概念" class="headerlink" title="LFU概念"></a>LFU概念</h3><p>LFU（The Least Frequently Used，最不经常使用）也是一种常见的缓存算法。</p>
<p>和LRU类似，LFU同样有这样的假设：<strong>如果一个数据在最近一段时间很少被访问到，那么可以认为在将来它被访问的可能性也很小。因此，当空间满时，最小频率访问的数据最先被淘汰；当存在两个或者更多个键具有相同的使用频次时，应该淘汰最久未使用的数据。（类比LRU）</strong></p>
<h3 id="LFU算法实现"><a href="#LFU算法实现" class="headerlink" title="LFU算法实现"></a>LFU算法实现</h3><h4 id="LFU算法描述"><a href="#LFU算法描述" class="headerlink" title="LFU算法描述"></a>LFU算法描述</h4><p>需要设计一种数据结构，并且提供一下接口：</p>
<ul>
<li>构造函数，确定初始缓存容量</li>
<li><code>get(key)</code> ：如果键存在于缓存中，则获取键的值，否则返回 -1。</li>
<li><code>put(key, value)</code> - 如果键已存在，则变更其值；如果键不存在，请插入键值对。当缓存达到其容量时，则应该在插入新项之前，移除最不经常使用的项。<strong>当存在两个或者更多个键具有相同的使用频次时，应该移除最久未使用的键</strong>。</li>
</ul>
<h4 id="LFU算法图示"><a href="#LFU算法图示" class="headerlink" title="LFU算法图示"></a>LFU算法图示</h4><p>我们可以使用<strong>双哈希表 + 双链表</strong>来模拟实现LFU算法：</p>
<ul>
<li><code>key_table</code>：用来快速查找某个key是否存于缓存中</li>
<li><code>freq_table</code>：以使用频次为键，存储相同使用频次的节点</li>
</ul>
<p><strong>LFU存储图示</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200610134226961.png" alt="LFU存储图示" title="">
                </div>
                <div class="image-caption">LFU存储图示</div>
            </figure>



<p>当LFU的容量未到达上限时，对某个数据进行访问（包括添加，读取，修改），其使用频次加一，则只需要在对应链表头部插入新节点即可。</p>
<p>当LFU的容量到达上限时，需要添加某个数据，则需要移除当前使用频次最低的链表最末端的键值（最久未使用），然后在频次为1的链表头插新节点。</p>
<p><strong>容量未满，插入新值005</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200610134635589.png" alt="容量未满，插入新值" title="">
                </div>
                <div class="image-caption">容量未满，插入新值</div>
            </figure>



<p><strong>访问数据001</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200610135240758.png" alt="访问数据001" title="">
                </div>
                <div class="image-caption">访问数据001</div>
            </figure>



<p><strong>容量上限，插入新值006</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200610135906353.png" alt="容量上限，插入新值" title="">
                </div>
                <div class="image-caption">容量上限，插入新值</div>
            </figure>

<h4 id="LFU-C-代码"><a href="#LFU-C-代码" class="headerlink" title="LFU C++代码"></a>LFU C++代码</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LFUCache</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 键值节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> key, val, freq;</span><br><span class="line">        Node(<span class="keyword">int</span> _key,<span class="keyword">int</span> _val,<span class="keyword">int</span> _freq): key(_key), val(_val), freq(_freq)&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    LFUCache(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;cap = capacity;</span><br><span class="line">        min_freq = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!cap) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">auto</span> it = key_table.find(key);			 </span><br><span class="line">        <span class="comment">// 节点不存在</span></span><br><span class="line">        <span class="keyword">if</span>(it == key_table.end())&#123;					</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">auto</span> key_iter = it-&gt;second;</span><br><span class="line">            Node* node = *key_iter;</span><br><span class="line">            <span class="keyword">int</span> val = node-&gt;val, freq = node-&gt;freq;</span><br><span class="line">            freq_table[freq].erase(key_iter);</span><br><span class="line">            <span class="comment">// 如果 freq 对应的链表为空，则移除</span></span><br><span class="line">            <span class="keyword">if</span>(freq_table[freq].size() == <span class="number">0</span>)&#123;		</span><br><span class="line">                freq_table.erase(freq);</span><br><span class="line">                <span class="comment">// 更新最小使用频次，为当前节点使用频次 ferq + 1</span></span><br><span class="line">                <span class="keyword">if</span>(min_freq == freq) min_freq = freq + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node-&gt;freq += <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// freq + 1 频次对应链表进行头插</span></span><br><span class="line">            freq_table[freq + <span class="number">1</span>].push_front(node);</span><br><span class="line">            <span class="comment">// 更新 key 对应的list迭代器</span></span><br><span class="line">            key_table[key] = freq_table[freq + <span class="number">1</span>].begin();</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!cap) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">auto</span> it = key_table.find(key);</span><br><span class="line">        <span class="keyword">if</span>(it != key_table.end())&#123;</span><br><span class="line">            <span class="comment">// key 存于缓存中</span></span><br><span class="line">            <span class="keyword">auto</span> key_iter = it-&gt;second;</span><br><span class="line">            <span class="keyword">auto</span> node = *key_iter;</span><br><span class="line">            <span class="keyword">int</span> freq = node-&gt;freq;</span><br><span class="line">            freq_table[freq].erase(key_iter);</span><br><span class="line">            <span class="keyword">if</span>(freq_table[freq].size() == <span class="number">0</span>)&#123;</span><br><span class="line">                freq_table.erase(freq);</span><br><span class="line">                <span class="comment">// 更新 min_freq</span></span><br><span class="line">                <span class="keyword">if</span>(min_freq == freq)min_freq = freq + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 修改值, 更新freq</span></span><br><span class="line">            node-&gt;freq += <span class="number">1</span>; node-&gt;val = value;</span><br><span class="line">            <span class="comment">// freq + 1 频次链表进行头插</span></span><br><span class="line">            freq_table[freq + <span class="number">1</span>].push_front(node);</span><br><span class="line">            <span class="comment">// 更新 key 对应的list迭代器</span></span><br><span class="line">            key_table[key] = freq_table[freq + <span class="number">1</span>].begin();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 容量达到上限</span></span><br><span class="line">            <span class="keyword">if</span>(key_table.size() == cap)&#123;</span><br><span class="line">                <span class="comment">// 获取使用频次最小且最久未使用的节点</span></span><br><span class="line">                Node* del_node = freq_table[min_freq].back();</span><br><span class="line">                freq_table[min_freq].pop_back();</span><br><span class="line">                <span class="keyword">if</span>(freq_table[min_freq].size() == <span class="number">0</span>)&#123;</span><br><span class="line">                    freq_table.erase(min_freq);</span><br><span class="line">                &#125;</span><br><span class="line">                key_table.erase(del_node-&gt;key);</span><br><span class="line">                <span class="keyword">delete</span> del_node;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 头插新节点</span></span><br><span class="line">            freq_table[<span class="number">1</span>].push_front(<span class="keyword">new</span> Node(key, value, <span class="number">1</span>));</span><br><span class="line">            key_table[key] = freq_table[<span class="number">1</span>].begin();</span><br><span class="line">            <span class="comment">// 当前最小使用频次为1</span></span><br><span class="line">            min_freq = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 缓存上限</span></span><br><span class="line">    <span class="keyword">int</span> cap;</span><br><span class="line">    <span class="comment">// 当前最低使用频次</span></span><br><span class="line">    <span class="keyword">int</span> min_freq;</span><br><span class="line">    <span class="comment">// 根据key建立哈希表</span></span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">list</span>&lt;Node*&gt;::iterator&gt; key_table;</span><br><span class="line">    <span class="comment">// 按照使用频次建立哈希表</span></span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">list</span>&lt;Node*&gt;&gt; freq_table;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="代码测试-1"><a href="#代码测试-1" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> capacity = <span class="number">2</span>;</span><br><span class="line"> 	<span class="function">LFUCache <span class="title">cache</span><span class="params">(capacity)</span></span>;</span><br><span class="line">    </span><br><span class="line">    cache.put(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    cache.put(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">1</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;       <span class="comment">// 返回 1</span></span><br><span class="line">	cache.put(<span class="number">3</span>, <span class="number">3</span>);    						  <span class="comment">// 此操作会使关键字 2 作废</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">2</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;       <span class="comment">// 返回 -1 (未找到key 2)</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">3</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;       <span class="comment">// 返回 3</span></span><br><span class="line">	cache.put(<span class="number">4</span>, <span class="number">4</span>);    						  <span class="comment">// 此操作会使关键字 1 作废</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">1</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;       <span class="comment">// 返回 -1 (未找到 key 1)</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">3</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;       <span class="comment">// 返回 3</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cache.get(<span class="number">4</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;       <span class="comment">// 返回 4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	out:</span></span><br><span class="line"><span class="comment">	1 -1 3 -1 3 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>LRU和LFU的算法暂时就介绍到这里了，作者水平有限，可能会存在疏漏之处，欢迎指正。</p>
<p>关于其他的缓存算法，例如<strong>FIFO</strong>，<strong>ARC</strong>，<strong>MRU</strong>等，我们会在后续的文章继续探讨。</p>
<p>谢谢~</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>缓存算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora+PicGo+Gitee实现markdown高效创作</title>
    <url>/2020/06/13/Typora-PicGo-Gitee%E5%AE%9E%E7%8E%B0markdown%E9%AB%98%E6%95%88%E5%88%9B%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="Typora-PicGo-Gitee实现markdown高效创作"><a href="#Typora-PicGo-Gitee实现markdown高效创作" class="headerlink" title="Typora+PicGo+Gitee实现markdown高效创作"></a>Typora+PicGo+Gitee实现markdown高效创作</h1><h2 id="Why-Typora"><a href="#Why-Typora" class="headerlink" title="Why Typora"></a>Why Typora</h2><p>Typora是一款极简而功能强大的markdown写作应用，目前仍然免费，强烈推荐。</p>
<h2 id="Why-PicGo"><a href="#Why-PicGo" class="headerlink" title="Why PicGo"></a>Why PicGo</h2><p>对于markdown创作，图片插入是不可或缺的一部分。但是，想要文章被更多人看到，图片就要上传到图床。作者以前经常使用有道云作为图床，除了使用上不方便，有时候还会遇到图片不可访问的情况，略显麻烦低效。</p>
<p><strong>PicGo</strong>这个工具很好地解决了这个问题，只需拖动图片，就可以完成图床上传，并且把想要的链接格式复制到剪贴板。</p>
<h2 id="Why-Gitee"><a href="#Why-Gitee" class="headerlink" title="Why Gitee"></a>Why Gitee</h2><p>Gitee可以说是国内的Github，没有Github那么全能，但是比Github快很多。做一个图床，Gitee应该是更好的选择。</p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul>
<li><p><a href="https://www.typora.io/" target="_blank" rel="noopener">Typora下载</a></p>
</li>
<li><p><a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">PicGo下载</a></p>
</li>
</ul>
<p>选择适应自己的版本，安装过程一路next即可。</p>
<h2 id="PicGo安装插件"><a href="#PicGo安装插件" class="headerlink" title="PicGo安装插件"></a>PicGo安装插件</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200613172244585.png" alt="插件设置" title="">
                </div>
                <div class="image-caption">插件设置</div>
            </figure>



<p>搜索“gitee”，写这篇文章的时候有这两个插件，我选了右边的gitee-uploader，应该都是可以的，本文以gitee-uploader为例。点击“安装”。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/hzyangjc/tuchuang/raw/master/img/222.PNG" alt="安装插件" title="">
                </div>
                <div class="image-caption">安装插件</div>
            </figure>



<h2 id="配置Gitee"><a href="#配置Gitee" class="headerlink" title="配置Gitee"></a>配置Gitee</h2><h3 id="1-新建仓库"><a href="#1-新建仓库" class="headerlink" title="1. 新建仓库"></a>1. 新建仓库</h3><ul>
<li><p>访问 gitee.com，注册或登录。点击右上角的“＋”，点击“新建仓库”。</p>
</li>
<li><p>名称、路径自定，介绍随意。</p>
</li>
<li><p><strong>一定要选择公开！</strong></p>
</li>
<li><p>勾选“用Readme文件初始化这个仓库”，用于创建master分支。</p>
</li>
<li><p>点击创建。</p>
</li>
</ul>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/333.PNG" alt="新建仓库"></p>
<h3 id="2-创建私人令牌"><a href="#2-创建私人令牌" class="headerlink" title="2. 创建私人令牌"></a>2. 创建私人令牌</h3><ul>
<li>点击右上角的头像，点击“设置”</li>
<li>安全设置 -&gt; 私人令牌 -&gt; 生成新令牌</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200613173113929.png" alt="生成新令牌" title="">
                </div>
                <div class="image-caption">生成新令牌</div>
            </figure>

<ul>
<li>随便填一段描述</li>
<li><strong>取消全选，只勾选“projects”</strong></li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/444.PNG" alt="生成新令牌" title="">
                </div>
                <div class="image-caption">生成新令牌</div>
            </figure>

<ul>
<li><p>点击“提交”</p>
</li>
<li><p>然后会让你输入一段密码，之后会生成一段字符串。<strong>一定要点击“复制”，不要丢失了，它只会出现一次</strong></p>
</li>
<li><p>至此，gitee的配置完成</p>
</li>
</ul>
<h2 id="配置PicGO"><a href="#配置PicGO" class="headerlink" title="配置PicGO"></a>配置PicGO</h2><ul>
<li><p>下载插件之后，重启应用。</p>
</li>
<li><p>打开“图床设置”的“gitee”（如图）</p>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200613173458198.png" alt="gitee设置"></p>
</li>
<li><p><strong>先把复制的字符串令牌粘贴到“token”一栏</strong></p>
</li>
<li><p>repo：填写你的仓库对于gitee.com的相对路径。一般是：YourName/YourRepo</p>
</li>
<li><p>branch：master</p>
</li>
<li><p>path：img</p>
</li>
<li><p>后面两个不必填写</p>
</li>
<li><p>点击“确定”并设置为默认图床。</p>
</li>
<li><p><strong>至此，PicGo已经配置完成，拖动一张图片到PicGo的上传区后，待上传完成，会将图片链接复制到剪切板，只要Ctrl+V粘贴即可。</strong></p>
</li>
</ul>
<h2 id="关联Typora"><a href="#关联Typora" class="headerlink" title="关联Typora"></a>关联Typora</h2><p>每次这么做还是有些麻烦，我们可以将Typora进行关联，得到复制图片到Typora即可完成上传并得到链接。</p>
<ul>
<li>打开typora</li>
<li>文件→偏好设置→图像→插入图片时</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200613174233428.png" alt="插入图片" title="">
                </div>
                <div class="image-caption">插入图片</div>
            </figure>

<ul>
<li><p>上传服务就选择PicGo（app）</p>
</li>
<li><p>路径填写你的picgo.exe所在的路径</p>
</li>
<li><p>通过“验证图片上传选项”按钮，可以检验配置是否成功</p>
</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200613174603920.png" alt="上传服务" title="">
                </div>
                <div class="image-caption">上传服务</div>
            </figure>

<ul>
<li>关联Typora至此配置成功</li>
</ul>
<blockquote>
<p>测试之后假如没有问题，那就说明大功告成了。妈妈再也不担心我markdown创作时没有图床了，请开始你的创作之旅吧~</p>
</blockquote>
]]></content>
      <categories>
        <category>工具教程</category>
      </categories>
      <tags>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>C++11保证稳定性和兼容性</title>
    <url>/2020/06/13/auto%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<h1 id="1-C-11保证稳定性和兼容性"><a href="#1-C-11保证稳定性和兼容性" class="headerlink" title="1. C++11保证稳定性和兼容性"></a>1. C++11保证稳定性和兼容性</h1><h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2>]]></content>
      <categories>
        <category>C++ 11</category>
      </categories>
      <tags>
        <tag>C++ 11</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-indigo主题添加置顶功能</title>
    <url>/2020/06/17/hexo-indigo%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E7%BD%AE%E9%A1%B6%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h1 id="hexo-indigo主题添加置顶功能"><a href="#hexo-indigo主题添加置顶功能" class="headerlink" title="hexo-indigo主题添加置顶功能"></a>hexo-indigo主题添加置顶功能</h1><blockquote>
<p>参考文章：<a href="https://www.jianshu.com/p/42a4efcdf8d7" target="_blank" rel="noopener">解决Hexo博客文章置顶问题</a></p>
</blockquote>
<h2 id="1-自定义html排序功能"><a href="#1-自定义html排序功能" class="headerlink" title="1. 自定义html排序功能"></a>1. 自定义html排序功能</h2><p>原理：<strong>在Hexo生成首页HTML时，将top值高的文章排在前面，达到置顶功能</strong>。</p>
<p>修改Hexo文件夹下的<code>node_modules/hexo-generator-index/lib/generator.js</code>，在生成文章之前进行文章top值排序。</p>
<p>需添加的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">        <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>generator.js完整内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">  <span class="keyword">const</span> posts = locals.posts.sort(config.index_generator.order_by);</span><br><span class="line"></span><br><span class="line">	posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    	<span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">        	<span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></span><br><span class="line">        	<span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123;     <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面</span></span><br><span class="line">        	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">        	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</span><br><span class="line">  <span class="keyword">const</span> path = config.index_generator.path || <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> pagination(path, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</span><br><span class="line">    format: paginationDir + <span class="string">'/%d/'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p>修改完成后，只需要在front-matter中设置需要置顶文章的top值，将会根据top值大小来选择置顶顺序top值越大越靠前。需要注意的是，这个文件不是主题的一部分，也不是Git管理的，备份的时候比较容易忽略。</p>
<p><strong>使用实例：</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200617232808783.png" alt="使用实例" title="">
                </div>
                <div class="image-caption">使用实例</div>
            </figure>



<p><strong>只需要设置top值即可完成排序置顶操作，并且还可以根据不同top值，选择置顶文章的先后次序</strong></p>
<h2 id="2-添加置顶标签"><a href="#2-添加置顶标签" class="headerlink" title="2. 添加置顶标签"></a>2. 添加置顶标签</h2><p>参考文章的博主使用的是yelee主题，有自己的置顶标签，在indigo主题里，我们可以自己做。</p>
<ul>
<li><p>如果要在文章中添加置顶标签，则打开<code>themes\indigo\layout\_partial\post.ejs</code>文件，接着定位到<code>&lt;div class=&quot;post-meta&quot;&gt;</code> ，在它的下面添加这段代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加置顶标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">post.top</span> &gt;</span> 1)&#123; %&gt;</span><br><span class="line">	<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-thumb-tack"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">7D26CD</span>&gt;</span>置顶<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-divider"</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果要在博客主页的预览页面添加置顶标签，则打开<code>themes\indigo\layout\_partial\index_item.ejs</code>文件，接着定位到<code>&lt;div class=&quot;post-meta&quot;&gt;</code> ，在它的下面添加这段代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加置顶标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">post.top</span> &gt;</span> 1)&#123; %&gt;</span><br><span class="line">	<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-thumb-tack"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">7D26CD</span>&gt;</span>置顶<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-divider"</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果还想在其他页面添加，则打开对应的 ejs文件，添加上述代码即可</p>
</li>
</ul>
<p><strong>预览效果：</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200617232034478.png" alt="预览效果" title="">
                </div>
                <div class="image-caption">预览效果</div>
            </figure>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-theme-indigo搭建Valine评论以及美化</title>
    <url>/2020/06/12/hexo-theme-indigo%E6%90%AD%E5%BB%BAValine%E8%AF%84%E8%AE%BA%E4%BB%A5%E5%8F%8A%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<h1 id="indigo主题搭建Valine评论以及美化"><a href="#indigo主题搭建Valine评论以及美化" class="headerlink" title="indigo主题搭建Valine评论以及美化"></a>indigo主题搭建Valine评论以及美化</h1><h2 id="1-indigo主题搭建Valine后台评论系统"><a href="#1-indigo主题搭建Valine后台评论系统" class="headerlink" title="1. indigo主题搭建Valine后台评论系统"></a>1. indigo主题搭建Valine后台评论系统</h2><p>Valine是基于Leancloud开发完成的，因此我们需要先注册一个Leadcloud的账号。</p>
<p><a href="https://www.leancloud.cn/" target="_blank" rel="noopener">Leadcloud官网，点我注册</a></p>
<ul>
<li>先注册；注册的时候需要身份验证和邮箱验证。</li>
<li>创建一个应用，名称可以随意起，不过我们还是规范些。</li>
<li>然后 <strong>进入应用-&gt;设置-&gt;应用key</strong>，获取你的 <strong>appid</strong> 和  <strong>appkey</strong>。</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200612102215624.png" alt="进入应用" title="">
                </div>
                <div class="image-caption">进入应用</div>
            </figure>



<ul>
<li>打开Indigo主题配置文件<code>_config.yml</code>，找到valine部分，在appId和appKey填写上次获取到的。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Valine Comment system. https://valine.js.org</span></span><br><span class="line">valine:</span><br><span class="line">  enable: true # 如果你想使用valine，请将值设置为 true</span><br><span class="line">  appId:  # your leancloud appId</span><br><span class="line">  appKey:  # your leancloud appKey</span><br><span class="line">  notify: false # Mail notify</span><br><span class="line">  verify: false # Verify code</span><br><span class="line">  avatar: mm # Gravatar style : mm/identicon/monsterid/wavatar/retro/hide</span><br><span class="line">  placeholder: 快来评论吧~ # Comment Box placeholder</span><br><span class="line">  guest_info: nick,mail,link # Comment header info</span><br><span class="line">  pageSize: 5 # comment list page size</span><br></pre></td></tr></table></figure>

<ul>
<li>请填写<code>应用&gt;设置&gt;安全设置</code>中的<code>Web 安全域名</code></li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200612151347788.png" alt="image-20200612151347788" title="">
                </div>
                <div class="image-caption">image-20200612151347788</div>
            </figure>

<ul>
<li>至此就完全配置完成了</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo s # 查看效果</span><br></pre></td></tr></table></figure>

<ul>
<li><p>看一眼效果（placeholder属性我改过了）</p>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200612104305556.png" alt="搭建效果"></p>
</li>
</ul>
<h2 id="2-Indigo主题Valine的简单美化"><a href="#2-Indigo主题Valine的简单美化" class="headerlink" title="2. Indigo主题Valine的简单美化"></a>2. Indigo主题Valine的简单美化</h2><blockquote>
<p>不得不说，作者不太会html和css，作为一个前端门外汉，只能简简单单地美化一下；所以在这里我只简单说一下美化的步骤，熟练的小伙伴可以自己尝试尝试。</p>
</blockquote>
<p>打开<code>\themes\indigo\layout\_partial\plugins\valine.ejs</code>所在文件，这就是评论区的配置。</p>
<p>关于基础的配置，不再赘述，大家可以参考<a href="https://valine.js.org/" target="_blank" rel="noopener">Valine官网</a>。</p>
<h3 id="2-1-Valine配置BiliBili表情包"><a href="#2-1-Valine配置BiliBili表情包" class="headerlink" title="2.1 Valine配置BiliBili表情包"></a>2.1 Valine配置BiliBili表情包</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200612140932816.png" alt="Valine配置BiliBili表情包" title="">
                </div>
                <div class="image-caption">Valine配置BiliBili表情包</div>
            </figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">new Valine(&#123;</span><br><span class="line">            el: '#comments',</span><br><span class="line">            notify: '&lt;%= theme.valine.notify %&gt;' == 'true',</span><br><span class="line">            verify: '&lt;%= theme.valine.verify %&gt;' == 'true',</span><br><span class="line">            appId: "&lt;%= theme.valine.appId %&gt;",</span><br><span class="line">            appKey: "&lt;%= theme.valine.appKey %&gt;",</span><br><span class="line">            avatar: "&lt;%= theme.valine.avatar %&gt;",</span><br><span class="line">            placeholder: "&lt;%= theme.valine.placeholder %&gt;",</span><br><span class="line">            guest_info: guest_info.length == 0 ? GUEST_INFO : guest_info,</span><br><span class="line">            pageSize: "&lt;%= theme.valine.pageSize %&gt;",</span><br><span class="line">            </span><br><span class="line">            // 设置Bilibili表情包地址</span><br><span class="line">            emojiCDN: '//i0.hdslb.com/bfs/emote/', </span><br><span class="line">            // 表情title和图片映射</span><br><span class="line">            emojiMaps: &#123;</span><br><span class="line">            "tv_doge": "6ea59c827c414b4a2955fe79e0f6fd3dcd515e24.png",</span><br><span class="line">            "tv_亲亲": "a8111ad55953ef5e3be3327ef94eb4a39d535d06.png",</span><br><span class="line">            "tv_偷笑": "bb690d4107620f1c15cff29509db529a73aee261.png",</span><br><span class="line">            "tv_再见": "180129b8ea851044ce71caf55cc8ce44bd4a4fc8.png",</span><br><span class="line">            "tv_冷漠": "b9cbc755c2b3ee43be07ca13de84e5b699a3f101.png",</span><br><span class="line">            "tv_发怒": "34ba3cd204d5b05fec70ce08fa9fa0dd612409ff.png",</span><br><span class="line">            "tv_发财": "34db290afd2963723c6eb3c4560667db7253a21a.png",</span><br><span class="line">            "tv_可爱": "9e55fd9b500ac4b96613539f1ce2f9499e314ed9.png",</span><br><span class="line">            "tv_吐血": "09dd16a7aa59b77baa1155d47484409624470c77.png",</span><br><span class="line">            "tv_呆": "fe1179ebaa191569b0d31cecafe7a2cd1c951c9d.png",</span><br><span class="line">            "tv_呕吐": "9f996894a39e282ccf5e66856af49483f81870f3.png",</span><br><span class="line">            "tv_困": "241ee304e44c0af029adceb294399391e4737ef2.png",</span><br><span class="line">            "tv_坏笑": "1f0b87f731a671079842116e0991c91c2c88645a.png",</span><br><span class="line">            "tv_大佬": "093c1e2c490161aca397afc45573c877cdead616.png",</span><br><span class="line">            "tv_大哭": "23269aeb35f99daee28dda129676f6e9ea87934f.png",</span><br><span class="line">            "tv_委屈": "d04dba7b5465779e9755d2ab6f0a897b9b33bb77.png",</span><br><span class="line">            "tv_害羞": "a37683fb5642fa3ddfc7f4e5525fd13e42a2bdb1.png",</span><br><span class="line">            "tv_尴尬": "7cfa62dafc59798a3d3fb262d421eeeff166cfa4.png",</span><br><span class="line">            "tv_微笑": "70dc5c7b56f93eb61bddba11e28fb1d18fddcd4c.png",</span><br><span class="line">            "tv_思考": "90cf159733e558137ed20aa04d09964436f618a1.png",</span><br><span class="line">            "tv_惊吓": "0d15c7e2ee58e935adc6a7193ee042388adc22af.png",</span><br><span class="line">            "tv_打脸": "56ab10b624063e966bfcb76ea5dc4794d87dfd47.png",</span><br><span class="line">            "tv_抓狂": "fe31c08edad661d63762b04e17b8d5ae3c71a757.png",</span><br><span class="line">            "tv_抠鼻": "c666f55e88d471e51bbd9fab9bb308110824a6eb.png",</span><br><span class="line">            "tv_斜眼笑": "911f987aa8bc1bee12d52aafe62bc41ef4474e6c.png",</span><br><span class="line">            "tv_无奈": "ea8ed89ee9878f2fece2dda0ea8a5dbfe21b5751.png",</span><br><span class="line">            "tv_晕": "5443c22b4d07fb1907ccc610c8e6db254f2461b7.png",</span><br><span class="line">            "tv_流汗": "cead1c351ab8d79e9f369605beb90148db0fbed3.png",</span><br><span class="line">            "tv_流泪": "7e71cde7858f0cd50d74b0264aa26db612a8a167.png",</span><br><span class="line">            "tv_流鼻血": "c32d39db2737f89b904ca32700d140a9241b0767.png",</span><br><span class="line">            "tv_点赞": "f85c354995bd99e28fc76c869bfe42ba6438eff4.png",</span><br><span class="line">            "tv_生气": "26702dcafdab5e8225b43ffd23c94ac1ff932654.png",</span><br><span class="line">            "tv_生病": "8b0ec90e6b86771092a498c54f09fc94621c1900.png",</span><br><span class="line">            "tv_疑问": "0793d949b18d7be716078349c202c15ff166f314.png",</span><br><span class="line">            "tv_白眼": "c1d59f439e379ee50eef488bcb5e5378e5044ea4.png",</span><br><span class="line">            "tv_皱眉": "72ccad6679fea0d14cce648b4d818e09b8ffea2d.png",</span><br><span class="line">            "tv_目瞪口呆": "0b8cb81a68de5d5365212c99375e7ace3e7891b7.png",</span><br><span class="line">            "tv_睡着": "8b196675b53af58264f383c50ad0945048290b33.png",</span><br><span class="line">            "tv_笑哭": "1abc628f6d4f4caf9d0e7800878f4697abbc8273.png",</span><br><span class="line">            "tv_腼腆": "89712c0d4af73e67f89e35cbc518420380a7f6f4.png",</span><br><span class="line">            "tv_色": "61822c7e9aae5da76475e7892534545336b23a6f.png",</span><br><span class="line">            "tv_调侃": "4bc022533ef31544ca0d72c12c808cf4a1cce3e3.png",</span><br><span class="line">            "tv_调皮": "b9c41de8e82dd7a8515ae5e3cb63e898bf245186.png",</span><br><span class="line">            "tv_鄙视": "6e72339f346a692a495b123174b49e4e8e781303.png",</span><br><span class="line">            "tv_闭嘴": "c9e990da7f6e93975e25fd8b70e2e290aa4086ef.png",</span><br><span class="line">            "tv_难过": "87f46748d3f142ebc6586ff58860d0e2fc8263ba.png",</span><br><span class="line">            "tv_馋": "fc7e829b845c43c623c8b490ee3602b7f0e76a31.png",</span><br><span class="line">            "tv_鬼脸": "0ffbbddf8a94d124ca2f54b360bbc04feb6bbfea.png",</span><br><span class="line">            "tv_黑人问号": "45821a01f51bc867da9edbaa2e070410819a95b2.png",</span><br><span class="line">            "tv_鼓掌": "1d21793f96ef4e6f48b23e53e3b9e42da833a0f6.png"</span><br><span class="line">                // ... 更多表情</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>



<h3 id="2-2-Valine评论区添加背景图片"><a href="#2-2-Valine评论区添加背景图片" class="headerlink" title="2.2 Valine评论区添加背景图片"></a>2.2 Valine评论区添加背景图片</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 评论框美化 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.v</span> <span class="selector-class">.vwrap</span> <span class="selector-class">.vedit</span>&#123;</span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 这里可以直接使用自定义链接，也可以在主题配置文件中添加项 --&gt;</span></span></span><br><span class="line">        &lt;!--</span><br><span class="line">        valine:</span><br><span class="line">          bg: https://gitee.com/cungudafa/source/raw/master/img/gif/Sitich/Sitich30.gif</span><br><span class="line">        --&gt;</span><br><span class="line"><span class="xml">        background: url("<span class="tag">&lt;<span class="name">%=</span> <span class="attr">theme.valine.bg</span> %&gt;</span>"); </span></span><br><span class="line">        background-repeat: no-repeat;</span><br><span class="line">        background-position: right;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>演示效果</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200612141245363.png" alt="Valine添加背景图片" title="">
                </div>
                <div class="image-caption">Valine添加背景图片</div>
            </figure>



<h3 id="2-3-Valine简单美化（按钮，表头）"><a href="#2-3-Valine简单美化（按钮，表头）" class="headerlink" title="2.3 Valine简单美化（按钮，表头）"></a>2.3 Valine简单美化（按钮，表头）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt; &#123;</span><br><span class="line">    .v .vwrap .vheader&#123;</span><br><span class="line">        background: #fff7f7f7;</span><br><span class="line">    &#125;</span><br><span class="line">    .v .vbtn.vsubmit&#123;</span><br><span class="line">        border-radius: 30px;</span><br><span class="line">        padding: 0;</span><br><span class="line">        color: #111; </span><br><span class="line">        line-height: 44px;</span><br><span class="line">        width:30%;</span><br><span class="line">        background:#ff9999;</span><br><span class="line">        color: #fff;</span><br><span class="line">        line-height: 2;</span><br><span class="line">        font-weight: bolder;</span><br><span class="line">        border: 1px solid #e9eff3;</span><br><span class="line">        padding: .4em .5em;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>



<p><strong>演示效果</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200612142054607.png" alt="美化效果" title="">
                </div>
                <div class="image-caption">美化效果</div>
            </figure>



<blockquote>
<p>简单介绍到这里，有前端大神可以在评论区留下您的美化效果~</p>
</blockquote>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>作息表</title>
    <url>/2020/06/17/%E4%BD%9C%E6%81%AF%E8%A1%A8/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>圆周率Pi的求解</title>
    <url>/2020/06/11/%E5%9C%86%E5%91%A8%E7%8E%87Pi%E7%9A%84%E6%B1%82%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="圆周率Pi的求解"><a href="#圆周率Pi的求解" class="headerlink" title="圆周率Pi的求解"></a>圆周率Pi的求解</h1><blockquote>
<p>字节跳动面试时，算法部分给我丢了这个开胃小菜；当时使用的是蒙特卡洛模拟，效果还不错。</p>
</blockquote>
<h2 id="1-蒙特卡洛模拟"><a href="#1-蒙特卡洛模拟" class="headerlink" title="1. 蒙特卡洛模拟"></a>1. 蒙特卡洛模拟</h2><p>蒙特卡洛模拟用于模拟一个随机过程中不同结果可能出现的概率。那怎么使用蒙特卡洛模拟来求解圆周率Pi呢？</p>
<h3 id="1-1-思想"><a href="#1-1-思想" class="headerlink" title="1.1 思想"></a>1.1 思想</h3><p>蒙特卡洛模拟的思想是很简单的，比如：<strong>在以[0,0]，[1,1]为顶点的正方形内进行随机投点，如果该随机点到圆心[0,0]的距离小于1，则说明该点位于以[0,0]为圆心，1为半径的1/4圆内；当试验次数达到无穷时，位于圆内点的数目和总投点数目之比无限接近圆和正方形面积之比，即pi/4。</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200611192448117.png" alt="蒙特卡洛模拟" title="">
                </div>
                <div class="image-caption">蒙特卡洛模拟</div>
            </figure>

<h3 id="1-2-求解代码"><a href="#1-2-求解代码" class="headerlink" title="1.2 求解代码"></a>1.2 求解代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">float</span> <span class="title">calcPi</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> numOfPoints)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 计算随机点到原点的距离平方</span></span><br><span class="line">        <span class="keyword">auto</span> getDist = [](<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&amp; point)&#123;</span><br><span class="line">            <span class="keyword">return</span> point[<span class="number">0</span>] * point[<span class="number">0</span>] + point[<span class="number">1</span>] * point[<span class="number">1</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">int</span> legal_num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;= numOfPoints; ++i)&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; point = getNextRandom();</span><br><span class="line">            <span class="keyword">if</span>(getDist(point) &lt;= <span class="number">1.0f</span>)&#123;</span><br><span class="line">				++legal_num;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 面积之比： Pi/4 ≈ legal_num/numOfPoints</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">4.0</span>*(<span class="keyword">float</span>)legal_num/(<span class="keyword">float</span>)numOfPoints;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; <span class="title">getNextRandom</span><span class="params">()</span></span>&#123;</span><br><span class="line">    	<span class="keyword">int</span> x = rand() % <span class="number">100</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> y = rand() % <span class="number">100</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;x/<span class="number">100.0f</span>, y/<span class="number">100.0f</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    Solution s;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> numOfPoints = <span class="number">10</span>* <span class="number">10000</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; s.calcPi(numOfPoints) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	out:</span></span><br><span class="line"><span class="comment">	3.11112</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>从这里的输出结果可以看到，使用蒙特卡洛求解的结果精度明显不够，不过思想简单算法实现容易。</p>
<blockquote>
<p>我当时面试时，输出的结果差不多就是这个样子；面试官看后说，有没有办法使得结果更加精确一些呢？</p>
<p>我说：可以增大样本点的个数；或者实验多组数据求取平均值；但是感觉这个模拟方法不太好。</p>
<p>面试官又问：还有优化的方法么？这个随机数的生成可以优化一下么？</p>
<p>我想：随机数的生成？什么意思？难道是在说随机数的底层生成算法上解决？虽然有接触过线性同余法，但是这水平更不不够呀。难道是说，想要保证随机数不重复？使用哈希？没想明白，就说不会了。</p>
<p>有想法的朋友可以告知我一下哈~</p>
</blockquote>
<h2 id="2-级数求解"><a href="#2-级数求解" class="headerlink" title="2. 级数求解"></a>2. 级数求解</h2><p>在高中或者在大学数学中，我们可能会看到这样一个公式：</p>
<p><code>Pi/4 = 1 - 1/3 + 1/5 - 1/7 + 1/9 - 1/11 + 1/13 ...</code></p>
<p>其实这是一个<strong>交错级数</strong>（以0为极限，必收敛），是数学家莱布尼茨发现的计算圆周率Pi的公式，它的通项表达为如下：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200611192708214.png" alt="莱布尼茨公式" title="">
                </div>
                <div class="image-caption">莱布尼茨公式</div>
            </figure>

<h3 id="2-1-代码"><a href="#2-1-代码" class="headerlink" title="2.1 代码"></a>2.1 代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">calcPi</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0.0</span>, symbol = <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;=n; ++i)&#123;</span><br><span class="line">            sum += symbol/(<span class="number">2</span> * i + <span class="number">1</span>);</span><br><span class="line">            symbol = -symbol;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span> * sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Solution s;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> n = <span class="number">10</span> * <span class="number">10000</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; s.calcPi(n) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	out:</span></span><br><span class="line"><span class="comment">	3.1416</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>从输出结果可以看出，使用莱布尼茨级数来计算Pi值精度更好，值得一提的是该算法的求解效率大大优于蒙特卡洛模拟。</p>
</blockquote>
<p>好了，关于圆周率Pi的求解方法暂时介绍到这里，大家有什么更好的方法，可以在下面畅所欲言~</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>蒙特卡洛算法</tag>
        <tag>级数</tag>
      </tags>
  </entry>
  <entry>
    <title>基于hexo搭建博客</title>
    <url>/2020/06/16/%E5%9F%BA%E4%BA%8Ehexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="基于hexo搭建博客"><a href="#基于hexo搭建博客" class="headerlink" title="基于hexo搭建博客"></a>基于hexo搭建博客</h1><h2 id="1-Git安装和配置"><a href="#1-Git安装和配置" class="headerlink" title="1. Git安装和配置"></a>1. Git安装和配置</h2><ul>
<li><p><a href="https://git-scm.com/" target="_blank" rel="noopener">Git官网</a></p>
<p>Git的安装比较简单</p>
</li>
<li><p>准备一个Github账号，我们的博客要挂在github上</p>
</li>
<li><p>首先打开CMD，设置你的账号和邮箱，输入</p>
<p><code>git config --global user.name &quot;yourname&quot;</code><br><code>git config --global user.email &quot;youremail&quot;</code><br>其中”yourname”是你的github账号，”youremail”是你的github账号邮箱</p>
</li>
<li><p>可以用以下两条命令检查输入<br><code>git config user.name</code><br><code>git config user.email</code></p>
</li>
<li><p>然后用以下命令创建SSH秘钥<br><code>ssh-keygen -t rsa -C &quot;youremail&quot;</code><br>后续连敲3次回车，不需要任何输入。<br>完成之后会告诉你生成了.ssh文件夹（应该在C:\Users\Administrator路径下），找到文件夹，其中id_rsa是秘钥，id_rsa.pub是公钥，用文本编辑器打开id_rsa.pub，复制所有内容。</p>
</li>
<li><p>添加公钥到Github</p>
<p>登录Github，右上角 <strong>头像-&gt;Settings -&gt; SSH and GPG keys -&gt; New SSH key</strong>。 把公钥粘贴到key中，填好title并点击Add SSH key。</p>
</li>
<li><p>回到CMD，输入命令<br><code>ssh -T git@github.com</code><br>选yes，提示成功。</p>
</li>
</ul>
<h2 id="2-安装Nodejs"><a href="#2-安装Nodejs" class="headerlink" title="2. 安装Nodejs"></a>2. 安装Nodejs</h2><ul>
<li><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Nodejs官网</a></p>
<p>windows：选择LTS版本就行了，下载完成后安装。</p>
</li>
<li><p>安装完成有两个组件，nodejs和npm，可以在<strong>git bash</strong>下使用以下命令查看版本</p>
<p><code>node -v</code></p>
<p><code>npm -v</code></p>
</li>
<li><p>用npm安装cnpm淘宝镜像源</p>
<p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>
<p>用以下命令查看版本<br><code>cnpm -v</code><br>安装完成以后就都是用cnpm下载了</p>
</li>
</ul>
<h2 id="3-安装博客框架Hexo"><a href="#3-安装博客框架Hexo" class="headerlink" title="3. 安装博客框架Hexo"></a>3. 安装博客框架Hexo</h2><ul>
<li>安装命令<br><code>cnpm install -g hexo-cli</code></li>
<li>查看版本<br><code>hexo -v</code></li>
</ul>
<h2 id="4-搭建Hexo博客"><a href="#4-搭建Hexo博客" class="headerlink" title="4. 搭建Hexo博客"></a>4. 搭建Hexo博客</h2>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>概率论和数理统计</title>
    <url>/2020/06/14/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%92%8C%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="概率论和数理统计"><a href="#概率论和数理统计" class="headerlink" title="概率论和数理统计"></a>概率论和数理统计</h1><h2 id="3-多维随机变量及分布"><a href="#3-多维随机变量及分布" class="headerlink" title="3. 多维随机变量及分布"></a>3. 多维随机变量及分布</h2><ul>
<li>二维正太</li>
</ul>
<h1 id="4-随机变量的数字特征"><a href="#4-随机变量的数字特征" class="headerlink" title="4. 随机变量的数字特征"></a>4. 随机变量的数字特征</h1><ul>
<li><p>二维正太分布的<strong>不相关和独立对等</strong></p>
<ul>
<li>(X, Y)二维正太分布，则X，Y均正太；反过来不一定</li>
<li>(X, Y)二维正太分布，当 ad≠bc时，则（aX + bY）*（cX + dY）也服从二维正太分布</li>
<li>(X, Y)二维正太分布，当 a^2 + b^2 ≠ 0时，aX + bY必正太</li>
</ul>
</li>
<li><p>协方差公式：</p>
<ul>
<li><p>cov(X, Y) =E{ [X-EX] * [Y-EY] }   【定义式】</p>
</li>
<li><p>cov(X, Y) = E(XY) - EX*EY           【常用计算公式】</p>
</li>
<li><p>cov(X, Y) = cov(Y, X)</p>
</li>
<li><p>cov(X, X) = D(X)</p>
</li>
<li><p>cov(X1 + X2, Y) = cov(X1, Y) + cov(X2, Y)</p>
</li>
<li><p>cov(X1 + c, Y) = cov(X1, Y)     【c 为常数】</p>
</li>
<li><p>cov(aX + c, bY + d) = ab*cov(X, Y)       【a，b，c，d为常数】</p>
</li>
</ul>
</li>
<li><p>常用分布的期望和方差，<strong>一定要会推导，特别是涉及级数的，例如泊松分布</strong></p>
<ul>
<li>0-1分布：</li>
</ul>
</li>
<li><p><strong>奇函数在无穷域积分</strong>：当函数在[0, +∞)收敛，则积分为0；反之积分发散</p>
</li>
</ul>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>看懂PID控制器</title>
    <url>/2020/06/16/%E7%9C%8B%E6%87%82PID%E6%8E%A7%E5%88%B6%E5%99%A8/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="PID控制器"><a href="#PID控制器" class="headerlink" title="PID控制器"></a>PID控制器</h1><h2 id="1-控制器"><a href="#1-控制器" class="headerlink" title="1. 控制器"></a>1. 控制器</h2><p>在研究PID控制器前，必须先想一个问题，控制器的作用到底是什么？相信不少同学在学习自动控制原理的时候，接触最多的是：直接对传递函数进行分析，比如研究某个传函的阶跃响应？幅频特性？稳态误差？根据劳斯判据，根轨迹研究根的分布以判断系统的稳定型？</p>
<p>那么控制器又是哪里冒出来的？自控中的开环系统或者闭环系统不能解决问题么？其实这是我们认识狭隘了，这句话本身就是不对的，往下看。</p>
<p>举两个实例：</p>
<h3 id="1-1-电机速度控制系统"><a href="#1-1-电机速度控制系统" class="headerlink" title="1.1 电机速度控制系统"></a>1.1 电机速度控制系统</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221429670.png" alt="电机速度" title="">
                </div>
                <div class="image-caption">电机速度</div>
            </figure>

<ol>
<li>当出现扰动而使得电机的转速偏离设定值时，测速电动机充当检测变送环节的角色，而它的输出和设定值之间就会出现一个偏差信号（电压信号）</li>
<li>这个偏差信号通常是比较小的，所以需要放大器对其进行放大</li>
<li>而这个放大后的电压信号则是触发器的控制电压，控制晶闸管的关断时间，进而调节电动机的电枢电压，从而调节转速直到等于设定值</li>
</ol>
<p>在这个控制系统中，电动机显然是被控对象，而它的转速变化规律是可以抽象为一个数学模型的，也就是传递函数；而其他的环节，则是为了共同产生一个控制信号来作为电动机的输入。</p>
<p>我们可以把比较器称为本文中的<strong>调节器</strong>，或者将比较器+放大器称为<strong>调节器</strong>，这不是重点，无伤大雅。</p>
<p>值得注意的是：这个系统中的所有环节，其控制规律都可以抽象为若干个传递函数</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221459922.png" alt="电机调速" title="">
                </div>
                <div class="image-caption">电机调速</div>
            </figure>
<ul>
<li>Un*为设定值，Un为测量变送的反馈值</li>
<li>两者偏差去调节触发器控制电压Uct，控制规律为<code>Kp</code></li>
<li>通过晶闸管控制电动机回路总电压Ud0，控制规律为<code>Ks</code></li>
<li>Ud0 - 电枢总电阻电压即为电动机电动势E</li>
<li>E = Ceφn，得到输出转速；测速发电机根据转速反馈电压信号，控制规律<code>α</code></li>
</ul>
<h3 id="1-2-温度或水位控制系统"><a href="#1-2-温度或水位控制系统" class="headerlink" title="1.2 温度或水位控制系统"></a>1.2 温度或水位控制系统</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221521103.png" alt="水位控制" title="">
                </div>
                <div class="image-caption">水位控制</div>
            </figure>

<p>这个应该是比较简单的过程控制，实际水位低于设定水位时，控制器则作用于执行机构去增大调节阀开度，增加进水流量。</p>
<h3 id="1-3-小小总结"><a href="#1-3-小小总结" class="headerlink" title="1.3 小小总结"></a>1.3 小小总结</h3><blockquote>
<p>不要总是孤立控制器，它们是控制被控对象的必要环节。</p>
</blockquote>
<p>这里给出一般的闭环控制系统框图</p>
<p><img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221545700.png" alt="闭环控制框图"></p>
<blockquote>
<p>不要单纯的认为只有被控对象才有传递函数，每一个环节都有其相应的控制规律，都可以抽象为一个数学模型，用对应的传递函数来表达。就像最小拍控制器设计中，我们根据输入信号选择整个系统的闭环传函，进而确定控制器的脉冲传递函数。</p>
</blockquote>
<p><strong>总结：对于闭环系统来说，控制器的输入是偏差信号，输出则是控制信号，去控制执行机构，进而调节被控对象</strong>。</p>
<p><strong>而闭环控制系统，设计目的就是系统输出对输入的跟随能力</strong>。</p>
<h2 id="2-PID"><a href="#2-PID" class="headerlink" title="2. PID"></a>2. PID</h2><ul>
<li>P：比例控制器，对系统产生的偏差能够迅速做出反应；但是比例控制器不能消除余差，不过随着比例系数的增大，余差会减小，同时系统输出振荡次数增加，稳定性也会下降，调节时间加长</li>
</ul>
<blockquote>
<p>关于不能消除余差这一点，从数学角度是可以解释的，求一下余差即可。当然直想也是可以理解的：对于一个速度控制系统，某时刻负载减小，导致转速上升，比例控制器作用于执行机构使得转速下降，假如转速可以下降到设定转速，那么此时负载依然是小于额定负载的，转速依然会上升；所以反证得，最后余差是肯定会存在的。</p>
</blockquote>
<ul>
<li>I：积分控制器，积分控制是可以消除余差的，体现于偏差消失后，积分控制器的输出是可以<strong>保持</strong>前时刻的输出；但是积分控制器的控制动作比较缓慢，一般不单独使用；随着积分系数的增大（时间常数的减小），系统的稳定性下降。</li>
</ul>
<ul>
<li>D：微分控制器，够体现出当前误差的变化趋势，在偏差出现或变化的瞬间，立即产生强烈的调节作用，从而加快系统的动作速度，减少调节时间；但是由于微分对静态偏差毫无控制能力（偏差存在，但是不变化，控制器输出为0），所以一般不单独使用。并且在纯比例作用的基础上增加微分作用可以提高系统稳定性。</li>
</ul>
<p><strong>总结：讲比例，积分，微分三种控制规律结合在一起，只要三项控制作用的强度配合得当，就既能快速调节，又能消除余差，从而得到满意的控制效果。</strong></p>
<h2 id="3-模拟式PID"><a href="#3-模拟式PID" class="headerlink" title="3. 模拟式PID"></a>3. 模拟式PID</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221607032.png" alt="一般pid框图" title="">
                </div>
                <div class="image-caption">一般pid框图</div>
            </figure>

<p>模拟pid控制器的算法：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221621725.png" alt="模拟pid算法" title="">
                </div>
                <div class="image-caption">模拟pid算法</div>
            </figure>

<ul>
<li>u(t) 为控制器输出，e(t) 为控制器输入，即偏差信号：<code>e(t) = r(t) - y(t)</code></li>
<li>Kp 为比例系数，Ti 为积分时间常数，Td 为微分时间常数</li>
</ul>
<p>给出一个简单的matlab模拟pid仿真：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221633752.png" alt="模拟pid仿真" title="">
                </div>
                <div class="image-caption">模拟pid仿真</div>
            </figure>

<p>参数设置：<code>Kp = 0.5, Ki = 0.2, Kd = 1</code>；输出结果：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221650331.png" alt="模拟pid仿真结果" title="">
                </div>
                <div class="image-caption">模拟pid仿真结果</div>
            </figure>

<p><strong>模拟pid局限性</strong></p>
<ul>
<li>功能单一，灵活性差</li>
<li>信息分散，所用仪表多，且监视不方便</li>
<li>接线过多，系统维护难度大</li>
</ul>
<p>随着计算机等技术的发展，数字控制器日益成为工业生产中占据主导地位的控制器。</p>
<h2 id="4-数字式PID"><a href="#4-数字式PID" class="headerlink" title="4. 数字式PID"></a>4. 数字式PID</h2><p>对模拟pid控制器进行离散化处理，用<strong>后向差分</strong>代替微分得：（具体细节不细说）</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221709929.png" alt="离散化pid算法" title="">
                </div>
                <div class="image-caption">离散化pid算法</div>
            </figure>


<h3 id="4-1-位置式PID算法"><a href="#4-1-位置式PID算法" class="headerlink" title="4.1 位置式PID算法"></a>4.1 位置式PID算法</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221726139.png" alt="位置式pid" title="">
                </div>
                <div class="image-caption">位置式pid</div>
            </figure>

<ul>
<li>Kp，Ki，Kd为比例，积分，微分的三个重要参数</li>
<li>k是采样序列号，k=0,1,2,3…</li>
<li>Uk第k次采样时刻<strong>控制器</strong>输出值</li>
<li>ek第k次采样时刻偏差，e(k-1)第k-1次采样偏差值，e(k-2)第k-2次采样偏差值</li>
<li>位置式pid控制器的输入为系统的偏差值，输出为uk，即偏差的组合</li>
</ul>
<h4 id="4-1-2-位置式pid算法的缺点"><a href="#4-1-2-位置式pid算法的缺点" class="headerlink" title="4.1.2 位置式pid算法的缺点"></a>4.1.2 位置式pid算法的缺点</h4><ul>
<li>控制器输出与过去的各个状态有关，运算量大</li>
<li>计算机出现故障，u(k)的大幅度变化会引起执行机构位置的大幅度变化</li>
</ul>
<h3 id="4-2-增量式PID算法"><a href="#4-2-增量式PID算法" class="headerlink" title="4.2 增量式PID算法"></a>4.2 增量式PID算法</h3><p>由位置式pid第k次输出 - 第k-1次输出 得到增量式pid算法：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9nc3MwLmJhaWR1LmNvbS85NG8zZFNhZ194STRraEdrbzlXVEFuRjZoaHkvemhpZGFvL3doJTNENjAwJTJDODAwL3NpZ249NjAyYzFhOTdjOWZkZmMwM2U1MmRlYmJlZTQwZmFiYWMvZTRkZGU3MTE5MGVmNzZjNjBmM2YxNzQyOTcxNmZkZmFhZTUxNjdlZS5qcGc" alt="增量式pid算法" title="">
                </div>
                <div class="image-caption">增量式pid算法</div>
            </figure>

<blockquote>
<p>增量式pid算法表示的是控制机构（阀门，步进电机等）的调节增量，即k时刻相对于k-1时刻的调节增量。</p>
</blockquote>
<p><strong>值得注意的是：采用增量式pid算法的控制器输出值为调节增量</strong>。</p>
<p>从这里也可以得出<strong>位置式pid算法</strong>的另一种表示形式：<br><code>u(k) = u(k - 1) + Δu</code></p>
<p>可以说，位置式pid算法和增量式pid算法是pid算法的两种表现形式，从本质上讲二者是一致的。</p>
<h4 id="4-2-2-增量式pid的优点"><a href="#4-2-2-增量式pid的优点" class="headerlink" title="4.2.2 增量式pid的优点"></a>4.2.2 增量式pid的优点</h4><ul>
<li>算式中不需要累加；控制增量Δu(k)的确定仅与最近3次的采样值有关</li>
<li>计算机每次只输出控制增量，对应执行机构位置的变化量，不易引起过程的异常操作</li>
<li>手动—自动切换时冲击小。当控制从手动向自动切换时，<br>可以作到无扰动切换</li>
</ul>
<h3 id="4-3-位置式pid和增量式pid的抉择"><a href="#4-3-位置式pid和增量式pid的抉择" class="headerlink" title="4.3 位置式pid和增量式pid的抉择"></a>4.3 位置式pid和增量式pid的抉择</h3><p>在实际使用中应该使用位置式还是增量式，关键看执行机构的特性：</p>
<ul>
<li>如果执行机构具有积分特性（如步进电机，具有齿轮传递特性的位置执行机构等），应该使用增量式pid算法</li>
<li>如果执行机构没有积分特性，则应该使用位置式pid算法</li>
</ul>
<h3 id="4-4-位置式pid和增量式pid仿真"><a href="#4-4-位置式pid和增量式pid仿真" class="headerlink" title="4.4 位置式pid和增量式pid仿真"></a>4.4 位置式pid和增量式pid仿真</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function [] &#x3D; my_simulink_pid()</span><br><span class="line">% 离散模型</span><br><span class="line">ts &#x3D; 0.001;						    % 采样时间</span><br><span class="line">sys &#x3D; tf(400, [1, 50, 0]);		    % 传递函数</span><br><span class="line">d_sys &#x3D; c2d(sys, ts, &#39;z&#39;);		    % 传递函数离散化</span><br><span class="line">[num, den] &#x3D; tfdata(d_sys, &#39;v&#39;);	% 提取分子分母</span><br><span class="line"></span><br><span class="line">% pid参数</span><br><span class="line">kp &#x3D; 10; ki &#x3D; 2; kd &#x3D; 15;</span><br><span class="line"></span><br><span class="line">% 初始化信号值</span><br><span class="line">y_feed &#x3D; 0;	    % 当前反馈值</span><br><span class="line">y_prev1 &#x3D; 0;    % 前一次输出值</span><br><span class="line">y_prev2 &#x3D; 0;    % 前前一次输出值</span><br><span class="line"></span><br><span class="line">u_prev1 &#x3D; 0;    % 前一次控制器输出值</span><br><span class="line">u_prev2 &#x3D; 0;    % 前前一次控制器输出值</span><br><span class="line"></span><br><span class="line">e_prev1 &#x3D; 0;    % 前一次偏差</span><br><span class="line">e_prev2 &#x3D; 0;    % 前前一次偏差</span><br><span class="line"></span><br><span class="line">x &#x3D; [0, 0, 0];  % p i d 分别的输出</span><br><span class="line"></span><br><span class="line">for k &#x3D; 1:1:3000</span><br><span class="line">	time(k) &#x3D; k*ts;         % 时间序列，用于画图</span><br><span class="line">	r_in(k) &#x3D; 1;            % 输入序列，单位阶跃</span><br><span class="line">	e(k) &#x3D; r_in(k) - y_feed;    % 当前时刻偏差</span><br><span class="line"></span><br><span class="line">	delta_u &#x3D; kp*x(1) + ki*x(2) + kd*x(3);</span><br><span class="line">	% 位置式 PID算法</span><br><span class="line">	% u(k) &#x3D; u_prev1 + delta_u;</span><br><span class="line">	% 增量式 PID算法</span><br><span class="line">	u(k) &#x3D; delta_u;</span><br><span class="line"></span><br><span class="line">	% 对输出限幅</span><br><span class="line">	if u(k) &gt;&#x3D; 10</span><br><span class="line">		u(k) &#x3D; 10</span><br><span class="line">	end</span><br><span class="line"></span><br><span class="line">	if u(k) &lt;&#x3D; -10</span><br><span class="line">		u(k) &#x3D; -10</span><br><span class="line">	end</span><br><span class="line">	</span><br><span class="line">	y_out(k) &#x3D; -den(2)*y_prev1- den(3)*y_prev2 + num(2)*u_prev1 + num(3)*u_prev2;  % 系统输出序列</span><br><span class="line">	y_feed &#x3D; y_out(k);	    % 反馈值</span><br><span class="line"></span><br><span class="line">	u_prev2 &#x3D; u_prev1;      % 更新控制器输出</span><br><span class="line">	u_prev1 &#x3D; u(k);</span><br><span class="line">	y_prev2 &#x3D; y_prev1;      % 更新系统输出</span><br><span class="line">	y_prev1 &#x3D; y_out(k);</span><br><span class="line"></span><br><span class="line">	x(1) &#x3D; e(k) - e_prev1;</span><br><span class="line">	x(2) &#x3D; e(k);</span><br><span class="line">	x(3) &#x3D; e(k) - 2*e_prev1 + e_prev2;</span><br><span class="line">	e_prev2 &#x3D; e_prev1;      % 更新偏差</span><br><span class="line">	e_prev1 &#x3D; e(k);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">% 画图</span><br><span class="line">figure(1);</span><br><span class="line">plot(time, r_in, &#39;b&#39;, time, y_out, &#39;r&#39;); </span><br><span class="line">axis([0, 3, 0, 1.5]);                           % 确定坐标轴范围</span><br><span class="line">xlabel(&#39;time(s)&#39;),ylabel(&#39;r_in, y_out&#39;);   		% 系统输出和系统输入的曲线</span><br><span class="line"></span><br><span class="line">figure(2);</span><br><span class="line">plot(time, r_in, &#39;b&#39;, time, u, &#39;--k&#39;); </span><br><span class="line">axis([0, 3, -0.2, 2.5]);                        % 确定坐标轴范围</span><br><span class="line">xlabel(&#39;time(s)&#39;),ylabel(&#39;r_in, u_out&#39;);   		% 控制器输出和系统输入的曲线</span><br></pre></td></tr></table></figure>

<p><strong>仿真结果：</strong></p>
<p>增量式pid——系统食输出和系统输入曲线图</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221745687.png" alt="r&y" title="">
                </div>
                <div class="image-caption">r&y</div>
            </figure>

<p>增量式pid——控制器输出和系统输入曲线图</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://gitee.com/BambooWine/MyPhotos/raw/master/img/image-20200616221803911.png" alt="r&u" title="">
                </div>
                <div class="image-caption">r&u</div>
            </figure>


<blockquote>
<p>关于位置式pid算法，在代码中也有标注，只需要加前一时刻控制器输出即可，至于参数的整定，在这里不详细说明。</p>
</blockquote>
]]></content>
      <categories>
        <category>控制学科</category>
      </categories>
      <tags>
        <tag>控制学科</tag>
      </tags>
  </entry>
  <entry>
    <title>讲讲堆内存和栈内存</title>
    <url>/2020/06/14/%E8%AE%B2%E8%AE%B2%E5%A0%86%E5%86%85%E5%AD%98%E5%92%8C%E6%A0%88%E5%86%85%E5%AD%98/</url>
    <content><![CDATA[<h1 id="讲讲堆内存和栈内存"><a href="#讲讲堆内存和栈内存" class="headerlink" title="讲讲堆内存和栈内存"></a>讲讲堆内存和栈内存</h1><blockquote>
<p>前段时间面试腾讯时候，面试官问了一个很基础的问题：请你说说堆内存和栈内存的区别？</p>
<p>我：基本就是那套模板，例如栈内存是由编译器自动分配和释放，其内存地址在编译期已确定的；主要用来存储局部变量，函数参数以及函数调用的地址等等；对于堆内存来说，其生命周期是由程序员决定的，即程序员手动申请释放，如果没有及时释放，就会造成内存泄漏，当程序结束时，会有操作系统回收未释放的内存。</p>
<p>说完之后，面试官没有立即反应，我以为他不太满意，又接着说了说堆栈的增长方向和内存大小等等…</p>
<p>不知道是我回答的不好还是面试官太高冷，没什么说辞…</p>
</blockquote>
<p>本文内容有参考百科，知乎，博客等优秀回答。</p>
<h2 id="1-从编程语言角度理解不同内存"><a href="#1-从编程语言角度理解不同内存" class="headerlink" title="1.  从编程语言角度理解不同内存"></a>1.  从编程语言角度理解不同内存</h2><p><strong>程序的内存分配：</strong></p>
<p>一个由C/C++编译的程序占用的内存分布：</p>
<ul>
<li><p>栈区（stack）：由编译器自动分配释放 ，存放函数的参数值，局部变量的值等</p>
</li>
<li><p>堆区（heap）：一般由程序员分配释放， 若程序员不释放，程序结束时可能由操作系统回收 </p>
</li>
<li><p>全局区（global）/ 静态区（static）：</p>
<ul>
<li>data区：已经初始化的全局变量、静态变量和常量</li>
<li>bss区：用来存放程序中未初始化的全局变量和静态变量；程序执行前BSS段会自动清0。</li>
<li>常量区：全局区中划分的一个小区域，里面存放的是常量，如const修饰的全局变量、字符串常量</li>
</ul>
</li>
<li><p>代码区（code）：存放函数体的二进制代码</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	@Time     : 2020/6/15 </span></span><br><span class="line"><span class="comment"> 	@Author   : BambooWine</span></span><br><span class="line"><span class="comment"> 	@Mail     : 2278816117@qq.com</span></span><br><span class="line"><span class="comment"> 	@Env	  : win10 + vs2017</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> g_a = <span class="number">10</span>;		<span class="comment">// 全局变量 data区</span></span><br><span class="line"><span class="keyword">int</span> g_b;	        <span class="comment">// 全局变量 bss区</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> s_a = <span class="number">10</span>;	<span class="comment">// 静态变量 data区</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;           <span class="comment">// 栈</span></span><br><span class="line">    <span class="keyword">char</span> s[] = <span class="string">"abc"</span>;	 <span class="comment">// 栈</span></span><br><span class="line">    <span class="keyword">char</span>* p1;            <span class="comment">// 栈</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> s_b = <span class="number">1</span>;	 <span class="comment">// 静态变量 data区</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* str = <span class="string">"123"</span>;	            <span class="comment">// "123"在常量区，str在栈区</span></span><br><span class="line">    p1 = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">10</span>);  <span class="comment">// 申请堆内存</span></span><br><span class="line">    <span class="built_in">strcpy</span>(p1, <span class="string">"123"</span>);   <span class="comment">// 123放在常量区，编译器可能会将它与p3所指向的"123456"优化成一个地方</span></span><br><span class="line">    <span class="built_in">free</span>(p1); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-从物理层角度理解堆栈内存"><a href="#2-从物理层角度理解堆栈内存" class="headerlink" title="2. 从物理层角度理解堆栈内存"></a>2. 从物理层角度理解堆栈内存</h2><blockquote>
<p>不知道大家有没有这样的想法，堆栈不就是内存的不同区，为什么访问速度会有差矣呢？</p>
<p>最近想到了这个问题，但奈何才疏学浅，只能在各种论坛搜索资料。</p>
</blockquote>
<ul>
<li>从硬件上来说，堆和栈最终都是内存条上的若干存储单元，理应并没有什么不同</li>
<li>但是很多CPU对压栈，出栈操作有硬件（指令）上的支持，所以在栈区分配/归还内存速度较快；尤其是函数内部的局部变量，可以轻易与函数调用/返回绑定</li>
<li>由于栈内存分配/回收的特殊机制，使得同一函数内部的”局部变量”总是分配在一段连续的内存空间上</li>
</ul>
<p><a href="https://blog.csdn.net/yxwb1253587469/article/details/50759604?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-3" target="_blank" rel="noopener">https://blog.csdn.net/yxwb1253587469/article/details/50759604?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-3</a></p>
<p><a href="https://www.cnblogs.com/jiudianren/p/5671992.html" target="_blank" rel="noopener">https://www.cnblogs.com/jiudianren/p/5671992.html</a></p>
]]></content>
      <categories>
        <category>计算机组成原理</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>高等数学</title>
    <url>/2020/06/12/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/</url>
    <content><![CDATA[<h1 id="高等数学"><a href="#高等数学" class="headerlink" title="高等数学"></a>高等数学</h1><h2 id="1-函数极限与连续"><a href="#1-函数极限与连续" class="headerlink" title="1. 函数极限与连续"></a>1. 函数极限与连续</h2><ul>
<li>遇到三角函数求极限，并且趋于pi/2，pi这种的，大概率会使用<strong>诱导公式</strong>，使其简化：<ul>
<li>sin(π/2+α) = cosα；  cos(π/2+α) = -sinα；  sin(π/2-α) = cosα；  cos(π/2-α) =sinα；</li>
<li>sin(π+α) = -sinα；  cos(π+α) = -cosα；  sin(π-α) = sinα；  cos(π-α) = -cosα；</li>
<li>tan A= sin A/cos A；</li>
<li>tan（π/2＋α）＝－cotα；    tan（π/2－α）＝cotα；</li>
<li>tan（π－α）＝－tanα；       tan（π＋α）＝tanα；</li>
</ul>
</li>
<li>遇到<code>arctant-pi/2</code>在无穷处取极限时，一般多用<strong>洛必达</strong>。</li>
</ul>
<h2 id="2-一元函数微分学"><a href="#2-一元函数微分学" class="headerlink" title="2. 一元函数微分学"></a>2. 一元函数微分学</h2><ul>
<li>导数定义，以及证明：偶函数的导数是奇函数；奇函数的导数是偶函数；周期函数的导函数是周期函数。</li>
<li>证明：(uv)’ = u’v + uv’  【凑】</li>
</ul>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
</search>
